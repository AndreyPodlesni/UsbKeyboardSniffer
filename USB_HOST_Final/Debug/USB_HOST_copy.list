
USB_HOST_copy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08008340  08008340  00018340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084bc  080084bc  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080084bc  080084bc  000184bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084c4  080084c4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084c4  080084c4  000184c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084c8  080084c8  000184c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080084cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000924  20000088  08008554  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009ac  08008554  000209ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001431b  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000399f  00000000  00000000  00034416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df8  00000000  00000000  00037db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a72  00000000  00000000  00038bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019f94  00000000  00000000  00039622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014afe  00000000  00000000  000535b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cdb6  00000000  00000000  000680b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f10  00000000  00000000  000f4e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000f8d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008328 	.word	0x08008328

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08008328 	.word	0x08008328

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <MX_GPIO_Init+0x4c>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a0f      	ldr	r2, [pc, #60]	; (80005c8 <MX_GPIO_Init+0x4c>)
 800058c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <MX_GPIO_Init+0x4c>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	603b      	str	r3, [r7, #0]
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <MX_GPIO_Init+0x4c>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <MX_GPIO_Init+0x4c>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <MX_GPIO_Init+0x4c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]

}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 face 	bl	8000b70 <HAL_Init>

  /* USER CODE BEGIN Init */
  printf("Started\n\r");
 80005d4:	4807      	ldr	r0, [pc, #28]	; (80005f4 <main+0x28>)
 80005d6:	f007 f8dd 	bl	8007794 <iprintf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f80d 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f7ff ffcd 	bl	800057c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 f9e3 	bl	80009ac <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 80005e6:	f006 fc83 	bl	8006ef0 <MX_USB_HOST_Init>
  MX_USART1_UART_Init();
 80005ea:	f000 f9b5 	bl	8000958 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005ee:	f006 fca5 	bl	8006f3c <MX_USB_HOST_Process>
 80005f2:	e7fc      	b.n	80005ee <main+0x22>
 80005f4:	08008340 	.word	0x08008340

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f007 f919 	bl	800783e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <SystemClock_Config+0xd0>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a28      	ldr	r2, [pc, #160]	; (80006c8 <SystemClock_Config+0xd0>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <SystemClock_Config+0xd0>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <SystemClock_Config+0xd4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <SystemClock_Config+0xd4>)
 8000646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <SystemClock_Config+0xd4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000658:	2301      	movs	r3, #1
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800066c:	2319      	movs	r3, #25
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000670:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000674:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000676:	2304      	movs	r3, #4
 8000678:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800067a:	2307      	movs	r3, #7
 800067c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	4618      	mov	r0, r3
 8000684:	f002 f9aa 	bl	80029dc <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800068e:	f000 f84b 	bl	8000728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2302      	movs	r3, #2
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2102      	movs	r1, #2
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 fc0c 	bl	8002ecc <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ba:	f000 f835 	bl	8000728 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	; 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <USBH_HID_EventCallback>:
/* USER CODE BEGIN 4 */



void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
    Keyboard_Info = USBH_HID_GetKeybdInfo(phost);
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f004 fe51 	bl	8005380 <USBH_HID_GetKeybdInfo>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a0e      	ldr	r2, [pc, #56]	; (800071c <USBH_HID_EventCallback+0x4c>)
 80006e2:	6013      	str	r3, [r2, #0]
    if (Keyboard_Info != NULL) {
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <USBH_HID_EventCallback+0x4c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d013      	beq.n	8000714 <USBH_HID_EventCallback+0x44>
        memcpy(uartBuffer, Keyboard_Info, sizeof(HID_KEYBD_Info_TypeDef));
 80006ec:	4b0b      	ldr	r3, [pc, #44]	; (800071c <USBH_HID_EventCallback+0x4c>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <USBH_HID_EventCallback+0x50>)
 80006f2:	4614      	mov	r4, r2
 80006f4:	6820      	ldr	r0, [r4, #0]
 80006f6:	6861      	ldr	r1, [r4, #4]
 80006f8:	68a2      	ldr	r2, [r4, #8]
 80006fa:	c307      	stmia	r3!, {r0, r1, r2}
 80006fc:	89a2      	ldrh	r2, [r4, #12]
 80006fe:	7ba1      	ldrb	r1, [r4, #14]
 8000700:	801a      	strh	r2, [r3, #0]
 8000702:	460a      	mov	r2, r1
 8000704:	709a      	strb	r2, [r3, #2]
       HAL_UART_Transmit(&huart2, uartBuffer, sizeof(uartBuffer), HAL_MAX_DELAY);
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	220f      	movs	r2, #15
 800070c:	4904      	ldr	r1, [pc, #16]	; (8000720 <USBH_HID_EventCallback+0x50>)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <USBH_HID_EventCallback+0x54>)
 8000710:	f002 fe09 	bl	8003326 <HAL_UART_Transmit>


    }
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bd90      	pop	{r4, r7, pc}
 800071c:	200000a4 	.word	0x200000a4
 8000720:	200000a8 	.word	0x200000a8
 8000724:	20000100 	.word	0x20000100

08000728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000730:	e7fe      	b.n	8000730 <Error_Handler+0x8>
	...

08000734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <HAL_MspInit+0x4c>)
 8000740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000742:	4a0f      	ldr	r2, [pc, #60]	; (8000780 <HAL_MspInit+0x4c>)
 8000744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000748:	6453      	str	r3, [r2, #68]	; 0x44
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <HAL_MspInit+0x4c>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <HAL_MspInit+0x4c>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	4a08      	ldr	r2, [pc, #32]	; (8000780 <HAL_MspInit+0x4c>)
 8000760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000764:	6413      	str	r3, [r2, #64]	; 0x40
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <HAL_MspInit+0x4c>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <NMI_Handler+0x4>

0800078a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <HardFault_Handler+0x4>

08000790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <MemManage_Handler+0x4>

08000796 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <BusFault_Handler+0x4>

0800079c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <UsageFault_Handler+0x4>

080007a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d0:	f000 fa20 	bl	8000c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80007dc:	4802      	ldr	r0, [pc, #8]	; (80007e8 <OTG_FS_IRQHandler+0x10>)
 80007de:	f000 ff5d 	bl	800169c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000055c 	.word	0x2000055c

080007ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	e00a      	b.n	8000814 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007fe:	f3af 8000 	nop.w
 8000802:	4601      	mov	r1, r0
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	60ba      	str	r2, [r7, #8]
 800080a:	b2ca      	uxtb	r2, r1
 800080c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	3301      	adds	r3, #1
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697a      	ldr	r2, [r7, #20]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	429a      	cmp	r2, r3
 800081a:	dbf0      	blt.n	80007fe <_read+0x12>
  }

  return len;
 800081c:	687b      	ldr	r3, [r7, #4]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b086      	sub	sp, #24
 800082a:	af00      	add	r7, sp, #0
 800082c:	60f8      	str	r0, [r7, #12]
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	e009      	b.n	800084c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	1c5a      	adds	r2, r3, #1
 800083c:	60ba      	str	r2, [r7, #8]
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4618      	mov	r0, r3
 8000842:	f000 f959 	bl	8000af8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	3301      	adds	r3, #1
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697a      	ldr	r2, [r7, #20]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	429a      	cmp	r2, r3
 8000852:	dbf1      	blt.n	8000838 <_write+0x12>
  }
  return len;
 8000854:	687b      	ldr	r3, [r7, #4]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <_close>:

int _close(int file)
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800086a:	4618      	mov	r0, r3
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000876:	b480      	push	{r7}
 8000878:	b083      	sub	sp, #12
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
 800087e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000886:	605a      	str	r2, [r3, #4]
  return 0;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <_isatty>:

int _isatty(int file)
{
 8000896:	b480      	push	{r7}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800089e:	2301      	movs	r3, #1
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
	...

080008c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d0:	4a14      	ldr	r2, [pc, #80]	; (8000924 <_sbrk+0x5c>)
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <_sbrk+0x60>)
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d102      	bne.n	80008ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <_sbrk+0x64>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <_sbrk+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d207      	bcs.n	8000908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f8:	f007 f800 	bl	80078fc <__errno>
 80008fc:	4603      	mov	r3, r0
 80008fe:	220c      	movs	r2, #12
 8000900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000902:	f04f 33ff 	mov.w	r3, #4294967295
 8000906:	e009      	b.n	800091c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <_sbrk+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	4a05      	ldr	r2, [pc, #20]	; (800092c <_sbrk+0x64>)
 8000918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20010000 	.word	0x20010000
 8000928:	00000400 	.word	0x00000400
 800092c:	200000b8 	.word	0x200000b8
 8000930:	200009b0 	.word	0x200009b0

08000934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <SystemInit+0x20>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093e:	4a05      	ldr	r2, [pc, #20]	; (8000954 <SystemInit+0x20>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <MX_USART1_UART_Init+0x50>)
 8000960:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000968:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000990:	f002 fc7c 	bl	800328c <HAL_UART_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800099a:	f7ff fec5 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000bc 	.word	0x200000bc
 80009a8:	40011000 	.word	0x40011000

080009ac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <MX_USART2_UART_Init+0x50>)
 80009b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009d2:	220c      	movs	r2, #12
 80009d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_USART2_UART_Init+0x4c>)
 80009e4:	f002 fc52 	bl	800328c <HAL_UART_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ee:	f7ff fe9b 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000100 	.word	0x20000100
 80009fc:	40004400 	.word	0x40004400

08000a00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08c      	sub	sp, #48	; 0x30
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a32      	ldr	r2, [pc, #200]	; (8000ae8 <HAL_UART_MspInit+0xe8>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d12d      	bne.n	8000a7e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
 8000a26:	4b31      	ldr	r3, [pc, #196]	; (8000aec <HAL_UART_MspInit+0xec>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	4a30      	ldr	r2, [pc, #192]	; (8000aec <HAL_UART_MspInit+0xec>)
 8000a2c:	f043 0310 	orr.w	r3, r3, #16
 8000a30:	6453      	str	r3, [r2, #68]	; 0x44
 8000a32:	4b2e      	ldr	r3, [pc, #184]	; (8000aec <HAL_UART_MspInit+0xec>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	f003 0310 	and.w	r3, r3, #16
 8000a3a:	61bb      	str	r3, [r7, #24]
 8000a3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	4b2a      	ldr	r3, [pc, #168]	; (8000aec <HAL_UART_MspInit+0xec>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a29      	ldr	r2, [pc, #164]	; (8000aec <HAL_UART_MspInit+0xec>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b27      	ldr	r3, [pc, #156]	; (8000aec <HAL_UART_MspInit+0xec>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a6c:	2307      	movs	r3, #7
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	481e      	ldr	r0, [pc, #120]	; (8000af0 <HAL_UART_MspInit+0xf0>)
 8000a78:	f000 fa22 	bl	8000ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a7c:	e030      	b.n	8000ae0 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <HAL_UART_MspInit+0xf4>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d12b      	bne.n	8000ae0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	4b17      	ldr	r3, [pc, #92]	; (8000aec <HAL_UART_MspInit+0xec>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	4a16      	ldr	r2, [pc, #88]	; (8000aec <HAL_UART_MspInit+0xec>)
 8000a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a96:	6413      	str	r3, [r2, #64]	; 0x40
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <HAL_UART_MspInit+0xec>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	4b10      	ldr	r3, [pc, #64]	; (8000aec <HAL_UART_MspInit+0xec>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	4a0f      	ldr	r2, [pc, #60]	; (8000aec <HAL_UART_MspInit+0xec>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <HAL_UART_MspInit+0xec>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad0:	2307      	movs	r3, #7
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <HAL_UART_MspInit+0xf0>)
 8000adc:	f000 f9f0 	bl	8000ec0 <HAL_GPIO_Init>
}
 8000ae0:	bf00      	nop
 8000ae2:	3730      	adds	r7, #48	; 0x30
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40011000 	.word	0x40011000
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020000 	.word	0x40020000
 8000af4:	40004400 	.word	0x40004400

08000af8 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*)&ch,1,10);
 8000b00:	1d39      	adds	r1, r7, #4
 8000b02:	230a      	movs	r3, #10
 8000b04:	2201      	movs	r2, #1
 8000b06:	4804      	ldr	r0, [pc, #16]	; (8000b18 <__io_putchar+0x20>)
 8000b08:	f002 fc0d 	bl	8003326 <HAL_UART_Transmit>
	return ch;
 8000b0c:	687b      	ldr	r3, [r7, #4]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000100 	.word	0x20000100

08000b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b20:	480d      	ldr	r0, [pc, #52]	; (8000b58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b22:	490e      	ldr	r1, [pc, #56]	; (8000b5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b24:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b38:	4c0b      	ldr	r4, [pc, #44]	; (8000b68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b46:	f7ff fef5 	bl	8000934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f006 fedd 	bl	8007908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4e:	f7ff fd3d 	bl	80005cc <main>
  bx  lr    
 8000b52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b54:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000b60:	080084cc 	.word	0x080084cc
  ldr r2, =_sbss
 8000b64:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000b68:	200009ac 	.word	0x200009ac

08000b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC_IRQHandler>
	...

08000b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <HAL_Init+0x40>)
 8000b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <HAL_Init+0x40>)
 8000b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_Init+0x40>)
 8000b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f94f 	bl	8000e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9e:	200f      	movs	r0, #15
 8000ba0:	f000 f808 	bl	8000bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba4:	f7ff fdc6 	bl	8000734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023c00 	.word	0x40023c00

08000bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_InitTick+0x54>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_InitTick+0x58>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f967 	bl	8000ea6 <HAL_SYSTICK_Config>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00e      	b.n	8000c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d80a      	bhi.n	8000bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be8:	2200      	movs	r2, #0
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f000 f92f 	bl	8000e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf4:	4a06      	ldr	r2, [pc, #24]	; (8000c10 <HAL_InitTick+0x5c>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e000      	b.n	8000c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	20000004 	.word	0x20000004

08000c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x20>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_IncTick+0x24>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <HAL_IncTick+0x24>)
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000008 	.word	0x20000008
 8000c38:	20000144 	.word	0x20000144

08000c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <HAL_GetTick+0x14>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000144 	.word	0x20000144

08000c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c5c:	f7ff ffee 	bl	8000c3c <HAL_GetTick>
 8000c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c6c:	d005      	beq.n	8000c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_Delay+0x44>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c7a:	bf00      	nop
 8000c7c:	f7ff ffde 	bl	8000c3c <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d8f7      	bhi.n	8000c7c <HAL_Delay+0x28>
  {
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000008 	.word	0x20000008

08000c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cce:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	60d3      	str	r3, [r2, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <__NVIC_GetPriorityGrouping+0x18>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	f003 0307 	and.w	r3, r3, #7
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	db0b      	blt.n	8000d2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f003 021f 	and.w	r2, r3, #31
 8000d18:	4907      	ldr	r1, [pc, #28]	; (8000d38 <__NVIC_EnableIRQ+0x38>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	095b      	lsrs	r3, r3, #5
 8000d20:	2001      	movs	r0, #1
 8000d22:	fa00 f202 	lsl.w	r2, r0, r2
 8000d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000e100 	.word	0xe000e100

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0a      	blt.n	8000d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	490c      	ldr	r1, [pc, #48]	; (8000d88 <__NVIC_SetPriority+0x4c>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d64:	e00a      	b.n	8000d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4908      	ldr	r1, [pc, #32]	; (8000d8c <__NVIC_SetPriority+0x50>)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	3b04      	subs	r3, #4
 8000d74:	0112      	lsls	r2, r2, #4
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	761a      	strb	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf28      	it	cs
 8000dae:	2304      	movcs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3304      	adds	r3, #4
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d902      	bls.n	8000dc0 <NVIC_EncodePriority+0x30>
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	e000      	b.n	8000dc2 <NVIC_EncodePriority+0x32>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43d9      	mvns	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	4313      	orrs	r3, r2
         );
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3724      	adds	r7, #36	; 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e08:	d301      	bcc.n	8000e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00f      	b.n	8000e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <SysTick_Config+0x40>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e16:	210f      	movs	r1, #15
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f7ff ff8e 	bl	8000d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <SysTick_Config+0x40>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SysTick_Config+0x40>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	e000e010 	.word	0xe000e010

08000e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ff29 	bl	8000c9c <__NVIC_SetPriorityGrouping>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e64:	f7ff ff3e 	bl	8000ce4 <__NVIC_GetPriorityGrouping>
 8000e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	6978      	ldr	r0, [r7, #20]
 8000e70:	f7ff ff8e 	bl	8000d90 <NVIC_EncodePriority>
 8000e74:	4602      	mov	r2, r0
 8000e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff5d 	bl	8000d3c <__NVIC_SetPriority>
}
 8000e82:	bf00      	nop
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff31 	bl	8000d00 <__NVIC_EnableIRQ>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ffa2 	bl	8000df8 <SysTick_Config>
 8000eb4:	4603      	mov	r3, r0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	; 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
 8000eda:	e159      	b.n	8001190 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000edc:	2201      	movs	r2, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	f040 8148 	bne.w	800118a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 0303 	and.w	r3, r3, #3
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d005      	beq.n	8000f12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d130      	bne.n	8000f74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f48:	2201      	movs	r2, #1
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	091b      	lsrs	r3, r3, #4
 8000f5e:	f003 0201 	and.w	r2, r3, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d017      	beq.n	8000fb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d123      	bne.n	8001004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	08da      	lsrs	r2, r3, #3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3208      	adds	r2, #8
 8000fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	f003 0307 	and.w	r3, r3, #7
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	220f      	movs	r2, #15
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	691a      	ldr	r2, [r3, #16]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	08da      	lsrs	r2, r3, #3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3208      	adds	r2, #8
 8000ffe:	69b9      	ldr	r1, [r7, #24]
 8001000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0203 	and.w	r2, r3, #3
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001040:	2b00      	cmp	r3, #0
 8001042:	f000 80a2 	beq.w	800118a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b57      	ldr	r3, [pc, #348]	; (80011a8 <HAL_GPIO_Init+0x2e8>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	4a56      	ldr	r2, [pc, #344]	; (80011a8 <HAL_GPIO_Init+0x2e8>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001054:	6453      	str	r3, [r2, #68]	; 0x44
 8001056:	4b54      	ldr	r3, [pc, #336]	; (80011a8 <HAL_GPIO_Init+0x2e8>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001062:	4a52      	ldr	r2, [pc, #328]	; (80011ac <HAL_GPIO_Init+0x2ec>)
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	220f      	movs	r2, #15
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a49      	ldr	r2, [pc, #292]	; (80011b0 <HAL_GPIO_Init+0x2f0>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d019      	beq.n	80010c2 <HAL_GPIO_Init+0x202>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a48      	ldr	r2, [pc, #288]	; (80011b4 <HAL_GPIO_Init+0x2f4>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d013      	beq.n	80010be <HAL_GPIO_Init+0x1fe>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a47      	ldr	r2, [pc, #284]	; (80011b8 <HAL_GPIO_Init+0x2f8>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d00d      	beq.n	80010ba <HAL_GPIO_Init+0x1fa>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a46      	ldr	r2, [pc, #280]	; (80011bc <HAL_GPIO_Init+0x2fc>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d007      	beq.n	80010b6 <HAL_GPIO_Init+0x1f6>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a45      	ldr	r2, [pc, #276]	; (80011c0 <HAL_GPIO_Init+0x300>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d101      	bne.n	80010b2 <HAL_GPIO_Init+0x1f2>
 80010ae:	2304      	movs	r3, #4
 80010b0:	e008      	b.n	80010c4 <HAL_GPIO_Init+0x204>
 80010b2:	2307      	movs	r3, #7
 80010b4:	e006      	b.n	80010c4 <HAL_GPIO_Init+0x204>
 80010b6:	2303      	movs	r3, #3
 80010b8:	e004      	b.n	80010c4 <HAL_GPIO_Init+0x204>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e002      	b.n	80010c4 <HAL_GPIO_Init+0x204>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <HAL_GPIO_Init+0x204>
 80010c2:	2300      	movs	r3, #0
 80010c4:	69fa      	ldr	r2, [r7, #28]
 80010c6:	f002 0203 	and.w	r2, r2, #3
 80010ca:	0092      	lsls	r2, r2, #2
 80010cc:	4093      	lsls	r3, r2
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d4:	4935      	ldr	r1, [pc, #212]	; (80011ac <HAL_GPIO_Init+0x2ec>)
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3302      	adds	r3, #2
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e2:	4b38      	ldr	r3, [pc, #224]	; (80011c4 <HAL_GPIO_Init+0x304>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001106:	4a2f      	ldr	r2, [pc, #188]	; (80011c4 <HAL_GPIO_Init+0x304>)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800110c:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <HAL_GPIO_Init+0x304>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001130:	4a24      	ldr	r2, [pc, #144]	; (80011c4 <HAL_GPIO_Init+0x304>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <HAL_GPIO_Init+0x304>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800115a:	4a1a      	ldr	r2, [pc, #104]	; (80011c4 <HAL_GPIO_Init+0x304>)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001160:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <HAL_GPIO_Init+0x304>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001184:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <HAL_GPIO_Init+0x304>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3301      	adds	r3, #1
 800118e:	61fb      	str	r3, [r7, #28]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	2b0f      	cmp	r3, #15
 8001194:	f67f aea2 	bls.w	8000edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40013800 	.word	0x40013800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	40020400 	.word	0x40020400
 80011b8:	40020800 	.word	0x40020800
 80011bc:	40020c00 	.word	0x40020c00
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40013c00 	.word	0x40013c00

080011c8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80011c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ca:	b08f      	sub	sp, #60	; 0x3c
 80011cc:	af0a      	add	r7, sp, #40	; 0x28
 80011ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e054      	b.n	8001284 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d106      	bne.n	80011fa <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f005 fed9 	bl	8006fac <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2203      	movs	r2, #3
 80011fe:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f002 fc6b 	bl	8003af4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	687e      	ldr	r6, [r7, #4]
 8001226:	466d      	mov	r5, sp
 8001228:	f106 0410 	add.w	r4, r6, #16
 800122c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800122e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001234:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001238:	e885 0003 	stmia.w	r5, {r0, r1}
 800123c:	1d33      	adds	r3, r6, #4
 800123e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001240:	6838      	ldr	r0, [r7, #0]
 8001242:	f002 fbe5 	bl	8003a10 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2101      	movs	r1, #1
 800124c:	4618      	mov	r0, r3
 800124e:	f002 fc62 	bl	8003b16 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	687e      	ldr	r6, [r7, #4]
 800125a:	466d      	mov	r5, sp
 800125c:	f106 0410 	add.w	r4, r6, #16
 8001260:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001262:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001268:	e894 0003 	ldmia.w	r4, {r0, r1}
 800126c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001270:	1d33      	adds	r3, r6, #4
 8001272:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001274:	6838      	ldr	r0, [r7, #0]
 8001276:	f002 fdeb 	bl	8003e50 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800128c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af04      	add	r7, sp, #16
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	4608      	mov	r0, r1
 8001296:	4611      	mov	r1, r2
 8001298:	461a      	mov	r2, r3
 800129a:	4603      	mov	r3, r0
 800129c:	70fb      	strb	r3, [r7, #3]
 800129e:	460b      	mov	r3, r1
 80012a0:	70bb      	strb	r3, [r7, #2]
 80012a2:	4613      	mov	r3, r2
 80012a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d101      	bne.n	80012b4 <HAL_HCD_HC_Init+0x28>
 80012b0:	2302      	movs	r3, #2
 80012b2:	e076      	b.n	80013a2 <HAL_HCD_HC_Init+0x116>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	212c      	movs	r1, #44	; 0x2c
 80012c2:	fb01 f303 	mul.w	r3, r1, r3
 80012c6:	4413      	add	r3, r2
 80012c8:	333d      	adds	r3, #61	; 0x3d
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80012ce:	78fb      	ldrb	r3, [r7, #3]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	212c      	movs	r1, #44	; 0x2c
 80012d4:	fb01 f303 	mul.w	r3, r1, r3
 80012d8:	4413      	add	r3, r2
 80012da:	3338      	adds	r3, #56	; 0x38
 80012dc:	787a      	ldrb	r2, [r7, #1]
 80012de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	212c      	movs	r1, #44	; 0x2c
 80012e6:	fb01 f303 	mul.w	r3, r1, r3
 80012ea:	4413      	add	r3, r2
 80012ec:	3340      	adds	r3, #64	; 0x40
 80012ee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012f0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80012f2:	78fb      	ldrb	r3, [r7, #3]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	212c      	movs	r1, #44	; 0x2c
 80012f8:	fb01 f303 	mul.w	r3, r1, r3
 80012fc:	4413      	add	r3, r2
 80012fe:	3339      	adds	r3, #57	; 0x39
 8001300:	78fa      	ldrb	r2, [r7, #3]
 8001302:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	212c      	movs	r1, #44	; 0x2c
 800130a:	fb01 f303 	mul.w	r3, r1, r3
 800130e:	4413      	add	r3, r2
 8001310:	333f      	adds	r3, #63	; 0x3f
 8001312:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001316:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	78ba      	ldrb	r2, [r7, #2]
 800131c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001320:	b2d0      	uxtb	r0, r2
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	212c      	movs	r1, #44	; 0x2c
 8001326:	fb01 f303 	mul.w	r3, r1, r3
 800132a:	4413      	add	r3, r2
 800132c:	333a      	adds	r3, #58	; 0x3a
 800132e:	4602      	mov	r2, r0
 8001330:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001332:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001336:	2b00      	cmp	r3, #0
 8001338:	da09      	bge.n	800134e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800133a:	78fb      	ldrb	r3, [r7, #3]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	212c      	movs	r1, #44	; 0x2c
 8001340:	fb01 f303 	mul.w	r3, r1, r3
 8001344:	4413      	add	r3, r2
 8001346:	333b      	adds	r3, #59	; 0x3b
 8001348:	2201      	movs	r2, #1
 800134a:	701a      	strb	r2, [r3, #0]
 800134c:	e008      	b.n	8001360 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	212c      	movs	r1, #44	; 0x2c
 8001354:	fb01 f303 	mul.w	r3, r1, r3
 8001358:	4413      	add	r3, r2
 800135a:	333b      	adds	r3, #59	; 0x3b
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	212c      	movs	r1, #44	; 0x2c
 8001366:	fb01 f303 	mul.w	r3, r1, r3
 800136a:	4413      	add	r3, r2
 800136c:	333c      	adds	r3, #60	; 0x3c
 800136e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001372:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	787c      	ldrb	r4, [r7, #1]
 800137a:	78ba      	ldrb	r2, [r7, #2]
 800137c:	78f9      	ldrb	r1, [r7, #3]
 800137e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001380:	9302      	str	r3, [sp, #8]
 8001382:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	f897 3020 	ldrb.w	r3, [r7, #32]
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	4623      	mov	r3, r4
 8001390:	f002 fee4 	bl	800415c <USB_HC_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd90      	pop	{r4, r7, pc}

080013aa <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b084      	sub	sp, #16
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	460b      	mov	r3, r1
 80013b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d101      	bne.n	80013c8 <HAL_HCD_HC_Halt+0x1e>
 80013c4:	2302      	movs	r3, #2
 80013c6:	e00f      	b.n	80013e8 <HAL_HCD_HC_Halt+0x3e>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	78fa      	ldrb	r2, [r7, #3]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f003 f934 	bl	8004646 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	4608      	mov	r0, r1
 80013fa:	4611      	mov	r1, r2
 80013fc:	461a      	mov	r2, r3
 80013fe:	4603      	mov	r3, r0
 8001400:	70fb      	strb	r3, [r7, #3]
 8001402:	460b      	mov	r3, r1
 8001404:	70bb      	strb	r3, [r7, #2]
 8001406:	4613      	mov	r3, r2
 8001408:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800140a:	78fb      	ldrb	r3, [r7, #3]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	212c      	movs	r1, #44	; 0x2c
 8001410:	fb01 f303 	mul.w	r3, r1, r3
 8001414:	4413      	add	r3, r2
 8001416:	333b      	adds	r3, #59	; 0x3b
 8001418:	78ba      	ldrb	r2, [r7, #2]
 800141a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800141c:	78fb      	ldrb	r3, [r7, #3]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	212c      	movs	r1, #44	; 0x2c
 8001422:	fb01 f303 	mul.w	r3, r1, r3
 8001426:	4413      	add	r3, r2
 8001428:	333f      	adds	r3, #63	; 0x3f
 800142a:	787a      	ldrb	r2, [r7, #1]
 800142c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800142e:	7c3b      	ldrb	r3, [r7, #16]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d112      	bne.n	800145a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	212c      	movs	r1, #44	; 0x2c
 800143a:	fb01 f303 	mul.w	r3, r1, r3
 800143e:	4413      	add	r3, r2
 8001440:	3342      	adds	r3, #66	; 0x42
 8001442:	2203      	movs	r2, #3
 8001444:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	212c      	movs	r1, #44	; 0x2c
 800144c:	fb01 f303 	mul.w	r3, r1, r3
 8001450:	4413      	add	r3, r2
 8001452:	333d      	adds	r3, #61	; 0x3d
 8001454:	7f3a      	ldrb	r2, [r7, #28]
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	e008      	b.n	800146c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	212c      	movs	r1, #44	; 0x2c
 8001460:	fb01 f303 	mul.w	r3, r1, r3
 8001464:	4413      	add	r3, r2
 8001466:	3342      	adds	r3, #66	; 0x42
 8001468:	2202      	movs	r2, #2
 800146a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800146c:	787b      	ldrb	r3, [r7, #1]
 800146e:	2b03      	cmp	r3, #3
 8001470:	f200 80c6 	bhi.w	8001600 <HAL_HCD_HC_SubmitRequest+0x210>
 8001474:	a201      	add	r2, pc, #4	; (adr r2, 800147c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147a:	bf00      	nop
 800147c:	0800148d 	.word	0x0800148d
 8001480:	080015ed 	.word	0x080015ed
 8001484:	080014f1 	.word	0x080014f1
 8001488:	0800156f 	.word	0x0800156f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800148c:	7c3b      	ldrb	r3, [r7, #16]
 800148e:	2b01      	cmp	r3, #1
 8001490:	f040 80b8 	bne.w	8001604 <HAL_HCD_HC_SubmitRequest+0x214>
 8001494:	78bb      	ldrb	r3, [r7, #2]
 8001496:	2b00      	cmp	r3, #0
 8001498:	f040 80b4 	bne.w	8001604 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800149c:	8b3b      	ldrh	r3, [r7, #24]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d108      	bne.n	80014b4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	212c      	movs	r1, #44	; 0x2c
 80014a8:	fb01 f303 	mul.w	r3, r1, r3
 80014ac:	4413      	add	r3, r2
 80014ae:	3355      	adds	r3, #85	; 0x55
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	212c      	movs	r1, #44	; 0x2c
 80014ba:	fb01 f303 	mul.w	r3, r1, r3
 80014be:	4413      	add	r3, r2
 80014c0:	3355      	adds	r3, #85	; 0x55
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d109      	bne.n	80014dc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	212c      	movs	r1, #44	; 0x2c
 80014ce:	fb01 f303 	mul.w	r3, r1, r3
 80014d2:	4413      	add	r3, r2
 80014d4:	3342      	adds	r3, #66	; 0x42
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80014da:	e093      	b.n	8001604 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	212c      	movs	r1, #44	; 0x2c
 80014e2:	fb01 f303 	mul.w	r3, r1, r3
 80014e6:	4413      	add	r3, r2
 80014e8:	3342      	adds	r3, #66	; 0x42
 80014ea:	2202      	movs	r2, #2
 80014ec:	701a      	strb	r2, [r3, #0]
      break;
 80014ee:	e089      	b.n	8001604 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80014f0:	78bb      	ldrb	r3, [r7, #2]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d11d      	bne.n	8001532 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	212c      	movs	r1, #44	; 0x2c
 80014fc:	fb01 f303 	mul.w	r3, r1, r3
 8001500:	4413      	add	r3, r2
 8001502:	3355      	adds	r3, #85	; 0x55
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d109      	bne.n	800151e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800150a:	78fb      	ldrb	r3, [r7, #3]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	212c      	movs	r1, #44	; 0x2c
 8001510:	fb01 f303 	mul.w	r3, r1, r3
 8001514:	4413      	add	r3, r2
 8001516:	3342      	adds	r3, #66	; 0x42
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800151c:	e073      	b.n	8001606 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	212c      	movs	r1, #44	; 0x2c
 8001524:	fb01 f303 	mul.w	r3, r1, r3
 8001528:	4413      	add	r3, r2
 800152a:	3342      	adds	r3, #66	; 0x42
 800152c:	2202      	movs	r2, #2
 800152e:	701a      	strb	r2, [r3, #0]
      break;
 8001530:	e069      	b.n	8001606 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	212c      	movs	r1, #44	; 0x2c
 8001538:	fb01 f303 	mul.w	r3, r1, r3
 800153c:	4413      	add	r3, r2
 800153e:	3354      	adds	r3, #84	; 0x54
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d109      	bne.n	800155a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	212c      	movs	r1, #44	; 0x2c
 800154c:	fb01 f303 	mul.w	r3, r1, r3
 8001550:	4413      	add	r3, r2
 8001552:	3342      	adds	r3, #66	; 0x42
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
      break;
 8001558:	e055      	b.n	8001606 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	212c      	movs	r1, #44	; 0x2c
 8001560:	fb01 f303 	mul.w	r3, r1, r3
 8001564:	4413      	add	r3, r2
 8001566:	3342      	adds	r3, #66	; 0x42
 8001568:	2202      	movs	r2, #2
 800156a:	701a      	strb	r2, [r3, #0]
      break;
 800156c:	e04b      	b.n	8001606 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800156e:	78bb      	ldrb	r3, [r7, #2]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d11d      	bne.n	80015b0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	212c      	movs	r1, #44	; 0x2c
 800157a:	fb01 f303 	mul.w	r3, r1, r3
 800157e:	4413      	add	r3, r2
 8001580:	3355      	adds	r3, #85	; 0x55
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d109      	bne.n	800159c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	212c      	movs	r1, #44	; 0x2c
 800158e:	fb01 f303 	mul.w	r3, r1, r3
 8001592:	4413      	add	r3, r2
 8001594:	3342      	adds	r3, #66	; 0x42
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800159a:	e034      	b.n	8001606 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800159c:	78fb      	ldrb	r3, [r7, #3]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	212c      	movs	r1, #44	; 0x2c
 80015a2:	fb01 f303 	mul.w	r3, r1, r3
 80015a6:	4413      	add	r3, r2
 80015a8:	3342      	adds	r3, #66	; 0x42
 80015aa:	2202      	movs	r2, #2
 80015ac:	701a      	strb	r2, [r3, #0]
      break;
 80015ae:	e02a      	b.n	8001606 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	212c      	movs	r1, #44	; 0x2c
 80015b6:	fb01 f303 	mul.w	r3, r1, r3
 80015ba:	4413      	add	r3, r2
 80015bc:	3354      	adds	r3, #84	; 0x54
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d109      	bne.n	80015d8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	212c      	movs	r1, #44	; 0x2c
 80015ca:	fb01 f303 	mul.w	r3, r1, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	3342      	adds	r3, #66	; 0x42
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
      break;
 80015d6:	e016      	b.n	8001606 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	212c      	movs	r1, #44	; 0x2c
 80015de:	fb01 f303 	mul.w	r3, r1, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	3342      	adds	r3, #66	; 0x42
 80015e6:	2202      	movs	r2, #2
 80015e8:	701a      	strb	r2, [r3, #0]
      break;
 80015ea:	e00c      	b.n	8001606 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	212c      	movs	r1, #44	; 0x2c
 80015f2:	fb01 f303 	mul.w	r3, r1, r3
 80015f6:	4413      	add	r3, r2
 80015f8:	3342      	adds	r3, #66	; 0x42
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
      break;
 80015fe:	e002      	b.n	8001606 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001600:	bf00      	nop
 8001602:	e000      	b.n	8001606 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001604:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001606:	78fb      	ldrb	r3, [r7, #3]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	212c      	movs	r1, #44	; 0x2c
 800160c:	fb01 f303 	mul.w	r3, r1, r3
 8001610:	4413      	add	r3, r2
 8001612:	3344      	adds	r3, #68	; 0x44
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001618:	78fb      	ldrb	r3, [r7, #3]
 800161a:	8b3a      	ldrh	r2, [r7, #24]
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	202c      	movs	r0, #44	; 0x2c
 8001620:	fb00 f303 	mul.w	r3, r0, r3
 8001624:	440b      	add	r3, r1
 8001626:	334c      	adds	r3, #76	; 0x4c
 8001628:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800162a:	78fb      	ldrb	r3, [r7, #3]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	212c      	movs	r1, #44	; 0x2c
 8001630:	fb01 f303 	mul.w	r3, r1, r3
 8001634:	4413      	add	r3, r2
 8001636:	3360      	adds	r3, #96	; 0x60
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800163c:	78fb      	ldrb	r3, [r7, #3]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	212c      	movs	r1, #44	; 0x2c
 8001642:	fb01 f303 	mul.w	r3, r1, r3
 8001646:	4413      	add	r3, r2
 8001648:	3350      	adds	r3, #80	; 0x50
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800164e:	78fb      	ldrb	r3, [r7, #3]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	212c      	movs	r1, #44	; 0x2c
 8001654:	fb01 f303 	mul.w	r3, r1, r3
 8001658:	4413      	add	r3, r2
 800165a:	3339      	adds	r3, #57	; 0x39
 800165c:	78fa      	ldrb	r2, [r7, #3]
 800165e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	212c      	movs	r1, #44	; 0x2c
 8001666:	fb01 f303 	mul.w	r3, r1, r3
 800166a:	4413      	add	r3, r2
 800166c:	3361      	adds	r3, #97	; 0x61
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6818      	ldr	r0, [r3, #0]
 8001676:	78fb      	ldrb	r3, [r7, #3]
 8001678:	222c      	movs	r2, #44	; 0x2c
 800167a:	fb02 f303 	mul.w	r3, r2, r3
 800167e:	3338      	adds	r3, #56	; 0x38
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	18d1      	adds	r1, r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	461a      	mov	r2, r3
 800168c:	f002 fe88 	bl	80043a0 <USB_HC_StartXfer>
 8001690:	4603      	mov	r3, r0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop

0800169c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f002 fb89 	bl	8003dca <USB_GetMode>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	f040 80f6 	bne.w	80018ac <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f002 fb6d 	bl	8003da4 <USB_ReadInterrupts>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80ec 	beq.w	80018aa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 fb64 	bl	8003da4 <USB_ReadInterrupts>
 80016dc:	4603      	mov	r3, r0
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80016e6:	d104      	bne.n	80016f2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80016f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 fb54 	bl	8003da4 <USB_ReadInterrupts>
 80016fc:	4603      	mov	r3, r0
 80016fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001706:	d104      	bne.n	8001712 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001710:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f002 fb44 	bl	8003da4 <USB_ReadInterrupts>
 800171c:	4603      	mov	r3, r0
 800171e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001722:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001726:	d104      	bne.n	8001732 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001730:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f002 fb34 	bl	8003da4 <USB_ReadInterrupts>
 800173c:	4603      	mov	r3, r0
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b02      	cmp	r3, #2
 8001744:	d103      	bne.n	800174e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2202      	movs	r2, #2
 800174c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f002 fb26 	bl	8003da4 <USB_ReadInterrupts>
 8001758:	4603      	mov	r3, r0
 800175a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800175e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001762:	d11c      	bne.n	800179e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800176c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10f      	bne.n	800179e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800177e:	2110      	movs	r1, #16
 8001780:	6938      	ldr	r0, [r7, #16]
 8001782:	f002 fa15 	bl	8003bb0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001786:	6938      	ldr	r0, [r7, #16]
 8001788:	f002 fa46 	bl	8003c18 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2101      	movs	r1, #1
 8001792:	4618      	mov	r0, r3
 8001794:	f002 fc1c 	bl	8003fd0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f005 fc77 	bl	800708c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f002 fafe 	bl	8003da4 <USB_ReadInterrupts>
 80017a8:	4603      	mov	r3, r0
 80017aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b2:	d102      	bne.n	80017ba <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f001 f89e 	bl	80028f6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f002 faf0 	bl	8003da4 <USB_ReadInterrupts>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d106      	bne.n	80017dc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f005 fc40 	bl	8007054 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2208      	movs	r2, #8
 80017da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 fadf 	bl	8003da4 <USB_ReadInterrupts>
 80017e6:	4603      	mov	r3, r0
 80017e8:	f003 0310 	and.w	r3, r3, #16
 80017ec:	2b10      	cmp	r3, #16
 80017ee:	d101      	bne.n	80017f4 <HAL_HCD_IRQHandler+0x158>
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <HAL_HCD_IRQHandler+0x15a>
 80017f4:	2300      	movs	r3, #0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d012      	beq.n	8001820 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	699a      	ldr	r2, [r3, #24]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 0210 	bic.w	r2, r2, #16
 8001808:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 ffa1 	bl	8002752 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699a      	ldr	r2, [r3, #24]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0210 	orr.w	r2, r2, #16
 800181e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f002 fabd 	bl	8003da4 <USB_ReadInterrupts>
 800182a:	4603      	mov	r3, r0
 800182c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001830:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001834:	d13a      	bne.n	80018ac <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f002 fef2 	bl	8004624 <USB_HC_ReadInterrupt>
 8001840:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	e025      	b.n	8001894 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	fa22 f303 	lsr.w	r3, r2, r3
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	d018      	beq.n	800188e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	015a      	lsls	r2, r3, #5
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4413      	add	r3, r2
 8001864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800186e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001872:	d106      	bne.n	8001882 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	4619      	mov	r1, r3
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f8ab 	bl	80019d6 <HCD_HC_IN_IRQHandler>
 8001880:	e005      	b.n	800188e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	4619      	mov	r1, r3
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 fbf9 	bl	8002080 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3301      	adds	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	429a      	cmp	r2, r3
 800189c:	d3d4      	bcc.n	8001848 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a6:	615a      	str	r2, [r3, #20]
 80018a8:	e000      	b.n	80018ac <HAL_HCD_IRQHandler+0x210>
      return;
 80018aa:	bf00      	nop
    }
  }
}
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_HCD_Start+0x16>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e013      	b.n	80018f0 <HAL_HCD_Start+0x3e>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2101      	movs	r1, #1
 80018d6:	4618      	mov	r0, r3
 80018d8:	f002 fbde 	bl	8004098 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 f8f6 	bl	8003ad2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_HCD_Stop+0x16>
 800190a:	2302      	movs	r3, #2
 800190c:	e00d      	b.n	800192a <HAL_HCD_Stop+0x32>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f002 ffcc 	bl	80048b8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f002 fb80 	bl	8004044 <USB_ResetPort>
 8001944:	4603      	mov	r3, r0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	460b      	mov	r3, r1
 8001958:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	212c      	movs	r1, #44	; 0x2c
 8001960:	fb01 f303 	mul.w	r3, r1, r3
 8001964:	4413      	add	r3, r2
 8001966:	3360      	adds	r3, #96	; 0x60
 8001968:	781b      	ldrb	r3, [r3, #0]
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001982:	78fb      	ldrb	r3, [r7, #3]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	212c      	movs	r1, #44	; 0x2c
 8001988:	fb01 f303 	mul.w	r3, r1, r3
 800198c:	4413      	add	r3, r2
 800198e:	3350      	adds	r3, #80	; 0x50
 8001990:	681b      	ldr	r3, [r3, #0]
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f002 fbc4 	bl	8004138 <USB_GetCurrentFrame>
 80019b0:	4603      	mov	r3, r0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f002 fb9f 	bl	800410a <USB_GetHostSpeed>
 80019cc:	4603      	mov	r3, r0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	460b      	mov	r3, r1
 80019e0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80019ec:	78fb      	ldrb	r3, [r7, #3]
 80019ee:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	015a      	lsls	r2, r3, #5
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4413      	add	r3, r2
 80019f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d11a      	bne.n	8001a3c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	015a      	lsls	r2, r3, #5
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a12:	461a      	mov	r2, r3
 8001a14:	2304      	movs	r3, #4
 8001a16:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	212c      	movs	r1, #44	; 0x2c
 8001a1e:	fb01 f303 	mul.w	r3, r1, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	3361      	adds	r3, #97	; 0x61
 8001a26:	2206      	movs	r2, #6
 8001a28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 fe06 	bl	8004646 <USB_HC_Halt>
 8001a3a:	e0af      	b.n	8001b9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	015a      	lsls	r2, r3, #5
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4413      	add	r3, r2
 8001a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a52:	d11b      	bne.n	8001a8c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	015a      	lsls	r2, r3, #5
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a60:	461a      	mov	r2, r3
 8001a62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a66:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	212c      	movs	r1, #44	; 0x2c
 8001a6e:	fb01 f303 	mul.w	r3, r1, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	3361      	adds	r3, #97	; 0x61
 8001a76:	2207      	movs	r2, #7
 8001a78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f002 fdde 	bl	8004646 <USB_HC_Halt>
 8001a8a:	e087      	b.n	8001b9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	015a      	lsls	r2, r3, #5
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4413      	add	r3, r2
 8001a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 0320 	and.w	r3, r3, #32
 8001a9e:	2b20      	cmp	r3, #32
 8001aa0:	d109      	bne.n	8001ab6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	015a      	lsls	r2, r3, #5
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aae:	461a      	mov	r2, r3
 8001ab0:	2320      	movs	r3, #32
 8001ab2:	6093      	str	r3, [r2, #8]
 8001ab4:	e072      	b.n	8001b9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	015a      	lsls	r2, r3, #5
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4413      	add	r3, r2
 8001abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d11a      	bne.n	8001b02 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	015a      	lsls	r2, r3, #5
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ad8:	461a      	mov	r2, r3
 8001ada:	2308      	movs	r3, #8
 8001adc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	212c      	movs	r1, #44	; 0x2c
 8001ae4:	fb01 f303 	mul.w	r3, r1, r3
 8001ae8:	4413      	add	r3, r2
 8001aea:	3361      	adds	r3, #97	; 0x61
 8001aec:	2205      	movs	r2, #5
 8001aee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	4611      	mov	r1, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f002 fda3 	bl	8004646 <USB_HC_Halt>
 8001b00:	e04c      	b.n	8001b9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	015a      	lsls	r2, r3, #5
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4413      	add	r3, r2
 8001b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b18:	d11b      	bne.n	8001b52 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	015a      	lsls	r2, r3, #5
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4413      	add	r3, r2
 8001b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b26:	461a      	mov	r2, r3
 8001b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	212c      	movs	r1, #44	; 0x2c
 8001b34:	fb01 f303 	mul.w	r3, r1, r3
 8001b38:	4413      	add	r3, r2
 8001b3a:	3361      	adds	r3, #97	; 0x61
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f002 fd7b 	bl	8004646 <USB_HC_Halt>
 8001b50:	e024      	b.n	8001b9c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	015a      	lsls	r2, r3, #5
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4413      	add	r3, r2
 8001b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b64:	2b80      	cmp	r3, #128	; 0x80
 8001b66:	d119      	bne.n	8001b9c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	015a      	lsls	r2, r3, #5
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b74:	461a      	mov	r2, r3
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	212c      	movs	r1, #44	; 0x2c
 8001b80:	fb01 f303 	mul.w	r3, r1, r3
 8001b84:	4413      	add	r3, r2
 8001b86:	3361      	adds	r3, #97	; 0x61
 8001b88:	2206      	movs	r2, #6
 8001b8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	4611      	mov	r1, r2
 8001b96:	4618      	mov	r0, r3
 8001b98:	f002 fd55 	bl	8004646 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	015a      	lsls	r2, r3, #5
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bb2:	d112      	bne.n	8001bda <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f002 fd41 	bl	8004646 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	015a      	lsls	r2, r3, #5
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4413      	add	r3, r2
 8001bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001bd8:	e24e      	b.n	8002078 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	015a      	lsls	r2, r3, #5
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4413      	add	r3, r2
 8001be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	f040 80df 	bne.w	8001db0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d019      	beq.n	8001c2e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	212c      	movs	r1, #44	; 0x2c
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	3348      	adds	r3, #72	; 0x48
 8001c08:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	0159      	lsls	r1, r3, #5
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	440b      	add	r3, r1
 8001c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001c1c:	1ad2      	subs	r2, r2, r3
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	202c      	movs	r0, #44	; 0x2c
 8001c24:	fb00 f303 	mul.w	r3, r0, r3
 8001c28:	440b      	add	r3, r1
 8001c2a:	3350      	adds	r3, #80	; 0x50
 8001c2c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	212c      	movs	r1, #44	; 0x2c
 8001c34:	fb01 f303 	mul.w	r3, r1, r3
 8001c38:	4413      	add	r3, r2
 8001c3a:	3361      	adds	r3, #97	; 0x61
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	212c      	movs	r1, #44	; 0x2c
 8001c46:	fb01 f303 	mul.w	r3, r1, r3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	335c      	adds	r3, #92	; 0x5c
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	015a      	lsls	r2, r3, #5
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4413      	add	r3, r2
 8001c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5e:	461a      	mov	r2, r3
 8001c60:	2301      	movs	r3, #1
 8001c62:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	212c      	movs	r1, #44	; 0x2c
 8001c6a:	fb01 f303 	mul.w	r3, r1, r3
 8001c6e:	4413      	add	r3, r2
 8001c70:	333f      	adds	r3, #63	; 0x3f
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d009      	beq.n	8001c8c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	212c      	movs	r1, #44	; 0x2c
 8001c7e:	fb01 f303 	mul.w	r3, r1, r3
 8001c82:	4413      	add	r3, r2
 8001c84:	333f      	adds	r3, #63	; 0x3f
 8001c86:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d111      	bne.n	8001cb0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	4611      	mov	r1, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f002 fcd5 	bl	8004646 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	015a      	lsls	r2, r3, #5
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca8:	461a      	mov	r2, r3
 8001caa:	2310      	movs	r3, #16
 8001cac:	6093      	str	r3, [r2, #8]
 8001cae:	e03a      	b.n	8001d26 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	212c      	movs	r1, #44	; 0x2c
 8001cb6:	fb01 f303 	mul.w	r3, r1, r3
 8001cba:	4413      	add	r3, r2
 8001cbc:	333f      	adds	r3, #63	; 0x3f
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d009      	beq.n	8001cd8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	212c      	movs	r1, #44	; 0x2c
 8001cca:	fb01 f303 	mul.w	r3, r1, r3
 8001cce:	4413      	add	r3, r2
 8001cd0:	333f      	adds	r3, #63	; 0x3f
 8001cd2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d126      	bne.n	8001d26 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	015a      	lsls	r2, r3, #5
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4413      	add	r3, r2
 8001ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	0151      	lsls	r1, r2, #5
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	440a      	add	r2, r1
 8001cee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001cf6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	212c      	movs	r1, #44	; 0x2c
 8001cfe:	fb01 f303 	mul.w	r3, r1, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	3360      	adds	r3, #96	; 0x60
 8001d06:	2201      	movs	r2, #1
 8001d08:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	b2d9      	uxtb	r1, r3
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	202c      	movs	r0, #44	; 0x2c
 8001d14:	fb00 f303 	mul.w	r3, r0, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	3360      	adds	r3, #96	; 0x60
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f005 f9c1 	bl	80070a8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d12b      	bne.n	8001d86 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	212c      	movs	r1, #44	; 0x2c
 8001d34:	fb01 f303 	mul.w	r3, r1, r3
 8001d38:	4413      	add	r3, r2
 8001d3a:	3348      	adds	r3, #72	; 0x48
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	202c      	movs	r0, #44	; 0x2c
 8001d44:	fb00 f202 	mul.w	r2, r0, r2
 8001d48:	440a      	add	r2, r1
 8001d4a:	3240      	adds	r2, #64	; 0x40
 8001d4c:	8812      	ldrh	r2, [r2, #0]
 8001d4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 818e 	beq.w	8002078 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	212c      	movs	r1, #44	; 0x2c
 8001d62:	fb01 f303 	mul.w	r3, r1, r3
 8001d66:	4413      	add	r3, r2
 8001d68:	3354      	adds	r3, #84	; 0x54
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	f083 0301 	eor.w	r3, r3, #1
 8001d70:	b2d8      	uxtb	r0, r3
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	212c      	movs	r1, #44	; 0x2c
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3354      	adds	r3, #84	; 0x54
 8001d80:	4602      	mov	r2, r0
 8001d82:	701a      	strb	r2, [r3, #0]
}
 8001d84:	e178      	b.n	8002078 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	212c      	movs	r1, #44	; 0x2c
 8001d8c:	fb01 f303 	mul.w	r3, r1, r3
 8001d90:	4413      	add	r3, r2
 8001d92:	3354      	adds	r3, #84	; 0x54
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	f083 0301 	eor.w	r3, r3, #1
 8001d9a:	b2d8      	uxtb	r0, r3
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	212c      	movs	r1, #44	; 0x2c
 8001da2:	fb01 f303 	mul.w	r3, r1, r3
 8001da6:	4413      	add	r3, r2
 8001da8:	3354      	adds	r3, #84	; 0x54
 8001daa:	4602      	mov	r2, r0
 8001dac:	701a      	strb	r2, [r3, #0]
}
 8001dae:	e163      	b.n	8002078 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	f040 80f6 	bne.w	8001fb4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	212c      	movs	r1, #44	; 0x2c
 8001dce:	fb01 f303 	mul.w	r3, r1, r3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3361      	adds	r3, #97	; 0x61
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d109      	bne.n	8001df0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	212c      	movs	r1, #44	; 0x2c
 8001de2:	fb01 f303 	mul.w	r3, r1, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	3360      	adds	r3, #96	; 0x60
 8001dea:	2201      	movs	r2, #1
 8001dec:	701a      	strb	r2, [r3, #0]
 8001dee:	e0c9      	b.n	8001f84 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	212c      	movs	r1, #44	; 0x2c
 8001df6:	fb01 f303 	mul.w	r3, r1, r3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3361      	adds	r3, #97	; 0x61
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b05      	cmp	r3, #5
 8001e02:	d109      	bne.n	8001e18 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	212c      	movs	r1, #44	; 0x2c
 8001e0a:	fb01 f303 	mul.w	r3, r1, r3
 8001e0e:	4413      	add	r3, r2
 8001e10:	3360      	adds	r3, #96	; 0x60
 8001e12:	2205      	movs	r2, #5
 8001e14:	701a      	strb	r2, [r3, #0]
 8001e16:	e0b5      	b.n	8001f84 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	212c      	movs	r1, #44	; 0x2c
 8001e1e:	fb01 f303 	mul.w	r3, r1, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	3361      	adds	r3, #97	; 0x61
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b06      	cmp	r3, #6
 8001e2a:	d009      	beq.n	8001e40 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	212c      	movs	r1, #44	; 0x2c
 8001e32:	fb01 f303 	mul.w	r3, r1, r3
 8001e36:	4413      	add	r3, r2
 8001e38:	3361      	adds	r3, #97	; 0x61
 8001e3a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d150      	bne.n	8001ee2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	212c      	movs	r1, #44	; 0x2c
 8001e46:	fb01 f303 	mul.w	r3, r1, r3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	335c      	adds	r3, #92	; 0x5c
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	202c      	movs	r0, #44	; 0x2c
 8001e58:	fb00 f303 	mul.w	r3, r0, r3
 8001e5c:	440b      	add	r3, r1
 8001e5e:	335c      	adds	r3, #92	; 0x5c
 8001e60:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	212c      	movs	r1, #44	; 0x2c
 8001e68:	fb01 f303 	mul.w	r3, r1, r3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	335c      	adds	r3, #92	; 0x5c
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d912      	bls.n	8001e9c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	212c      	movs	r1, #44	; 0x2c
 8001e7c:	fb01 f303 	mul.w	r3, r1, r3
 8001e80:	4413      	add	r3, r2
 8001e82:	335c      	adds	r3, #92	; 0x5c
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	212c      	movs	r1, #44	; 0x2c
 8001e8e:	fb01 f303 	mul.w	r3, r1, r3
 8001e92:	4413      	add	r3, r2
 8001e94:	3360      	adds	r3, #96	; 0x60
 8001e96:	2204      	movs	r2, #4
 8001e98:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001e9a:	e073      	b.n	8001f84 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	212c      	movs	r1, #44	; 0x2c
 8001ea2:	fb01 f303 	mul.w	r3, r1, r3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3360      	adds	r3, #96	; 0x60
 8001eaa:	2202      	movs	r2, #2
 8001eac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001ec4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ecc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eda:	461a      	mov	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001ee0:	e050      	b.n	8001f84 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	212c      	movs	r1, #44	; 0x2c
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	3361      	adds	r3, #97	; 0x61
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	d122      	bne.n	8001f3c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	212c      	movs	r1, #44	; 0x2c
 8001efc:	fb01 f303 	mul.w	r3, r1, r3
 8001f00:	4413      	add	r3, r2
 8001f02:	3360      	adds	r3, #96	; 0x60
 8001f04:	2202      	movs	r2, #2
 8001f06:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	015a      	lsls	r2, r3, #5
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4413      	add	r3, r2
 8001f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f1e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f26:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	015a      	lsls	r2, r3, #5
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f34:	461a      	mov	r2, r3
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e023      	b.n	8001f84 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	212c      	movs	r1, #44	; 0x2c
 8001f42:	fb01 f303 	mul.w	r3, r1, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	3361      	adds	r3, #97	; 0x61
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b07      	cmp	r3, #7
 8001f4e:	d119      	bne.n	8001f84 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	212c      	movs	r1, #44	; 0x2c
 8001f56:	fb01 f303 	mul.w	r3, r1, r3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	335c      	adds	r3, #92	; 0x5c
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	202c      	movs	r0, #44	; 0x2c
 8001f68:	fb00 f303 	mul.w	r3, r0, r3
 8001f6c:	440b      	add	r3, r1
 8001f6e:	335c      	adds	r3, #92	; 0x5c
 8001f70:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	212c      	movs	r1, #44	; 0x2c
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3360      	adds	r3, #96	; 0x60
 8001f80:	2204      	movs	r2, #4
 8001f82:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	015a      	lsls	r2, r3, #5
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f90:	461a      	mov	r2, r3
 8001f92:	2302      	movs	r3, #2
 8001f94:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	b2d9      	uxtb	r1, r3
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	202c      	movs	r0, #44	; 0x2c
 8001fa0:	fb00 f303 	mul.w	r3, r0, r3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3360      	adds	r3, #96	; 0x60
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f005 f87b 	bl	80070a8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001fb2:	e061      	b.n	8002078 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	2b10      	cmp	r3, #16
 8001fc8:	d156      	bne.n	8002078 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	212c      	movs	r1, #44	; 0x2c
 8001fd0:	fb01 f303 	mul.w	r3, r1, r3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	333f      	adds	r3, #63	; 0x3f
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d111      	bne.n	8002002 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	212c      	movs	r1, #44	; 0x2c
 8001fe4:	fb01 f303 	mul.w	r3, r1, r3
 8001fe8:	4413      	add	r3, r2
 8001fea:	335c      	adds	r3, #92	; 0x5c
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f002 fb23 	bl	8004646 <USB_HC_Halt>
 8002000:	e031      	b.n	8002066 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	212c      	movs	r1, #44	; 0x2c
 8002008:	fb01 f303 	mul.w	r3, r1, r3
 800200c:	4413      	add	r3, r2
 800200e:	333f      	adds	r3, #63	; 0x3f
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d009      	beq.n	800202a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	212c      	movs	r1, #44	; 0x2c
 800201c:	fb01 f303 	mul.w	r3, r1, r3
 8002020:	4413      	add	r3, r2
 8002022:	333f      	adds	r3, #63	; 0x3f
 8002024:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002026:	2b02      	cmp	r3, #2
 8002028:	d11d      	bne.n	8002066 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	212c      	movs	r1, #44	; 0x2c
 8002030:	fb01 f303 	mul.w	r3, r1, r3
 8002034:	4413      	add	r3, r2
 8002036:	335c      	adds	r3, #92	; 0x5c
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d110      	bne.n	8002066 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	212c      	movs	r1, #44	; 0x2c
 800204a:	fb01 f303 	mul.w	r3, r1, r3
 800204e:	4413      	add	r3, r2
 8002050:	3361      	adds	r3, #97	; 0x61
 8002052:	2203      	movs	r2, #3
 8002054:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f002 faf0 	bl	8004646 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4413      	add	r3, r2
 800206e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002072:	461a      	mov	r2, r3
 8002074:	2310      	movs	r3, #16
 8002076:	6093      	str	r3, [r2, #8]
}
 8002078:	bf00      	nop
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d11a      	bne.n	80020e6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020bc:	461a      	mov	r2, r3
 80020be:	2304      	movs	r3, #4
 80020c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	212c      	movs	r1, #44	; 0x2c
 80020c8:	fb01 f303 	mul.w	r3, r1, r3
 80020cc:	4413      	add	r3, r2
 80020ce:	3361      	adds	r3, #97	; 0x61
 80020d0:	2206      	movs	r2, #6
 80020d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	4611      	mov	r1, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	f002 fab1 	bl	8004646 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80020e4:	e331      	b.n	800274a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	015a      	lsls	r2, r3, #5
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	4413      	add	r3, r2
 80020ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 0320 	and.w	r3, r3, #32
 80020f8:	2b20      	cmp	r3, #32
 80020fa:	d12e      	bne.n	800215a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	015a      	lsls	r2, r3, #5
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	4413      	add	r3, r2
 8002104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002108:	461a      	mov	r2, r3
 800210a:	2320      	movs	r3, #32
 800210c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	212c      	movs	r1, #44	; 0x2c
 8002114:	fb01 f303 	mul.w	r3, r1, r3
 8002118:	4413      	add	r3, r2
 800211a:	333d      	adds	r3, #61	; 0x3d
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b01      	cmp	r3, #1
 8002120:	f040 8313 	bne.w	800274a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	212c      	movs	r1, #44	; 0x2c
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	333d      	adds	r3, #61	; 0x3d
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	212c      	movs	r1, #44	; 0x2c
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	4413      	add	r3, r2
 8002142:	3360      	adds	r3, #96	; 0x60
 8002144:	2202      	movs	r2, #2
 8002146:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	4611      	mov	r1, r2
 8002152:	4618      	mov	r0, r3
 8002154:	f002 fa77 	bl	8004646 <USB_HC_Halt>
}
 8002158:	e2f7      	b.n	800274a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	015a      	lsls	r2, r3, #5
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	4413      	add	r3, r2
 8002162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800216c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002170:	d112      	bne.n	8002198 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	4413      	add	r3, r2
 800217a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217e:	461a      	mov	r2, r3
 8002180:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002184:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f002 fa58 	bl	8004646 <USB_HC_Halt>
}
 8002196:	e2d8      	b.n	800274a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	015a      	lsls	r2, r3, #5
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	4413      	add	r3, r2
 80021a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d140      	bne.n	8002230 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	212c      	movs	r1, #44	; 0x2c
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	335c      	adds	r3, #92	; 0x5c
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d2:	2b40      	cmp	r3, #64	; 0x40
 80021d4:	d111      	bne.n	80021fa <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	212c      	movs	r1, #44	; 0x2c
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	4413      	add	r3, r2
 80021e2:	333d      	adds	r3, #61	; 0x3d
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	015a      	lsls	r2, r3, #5
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f4:	461a      	mov	r2, r3
 80021f6:	2340      	movs	r3, #64	; 0x40
 80021f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	4413      	add	r3, r2
 8002202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002206:	461a      	mov	r2, r3
 8002208:	2301      	movs	r3, #1
 800220a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	212c      	movs	r1, #44	; 0x2c
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	4413      	add	r3, r2
 8002218:	3361      	adds	r3, #97	; 0x61
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f002 fa0c 	bl	8004646 <USB_HC_Halt>
}
 800222e:	e28c      	b.n	800274a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	015a      	lsls	r2, r3, #5
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	4413      	add	r3, r2
 8002238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002242:	2b40      	cmp	r3, #64	; 0x40
 8002244:	d12c      	bne.n	80022a0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	212c      	movs	r1, #44	; 0x2c
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	4413      	add	r3, r2
 8002252:	3361      	adds	r3, #97	; 0x61
 8002254:	2204      	movs	r2, #4
 8002256:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	212c      	movs	r1, #44	; 0x2c
 800225e:	fb01 f303 	mul.w	r3, r1, r3
 8002262:	4413      	add	r3, r2
 8002264:	333d      	adds	r3, #61	; 0x3d
 8002266:	2201      	movs	r2, #1
 8002268:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	212c      	movs	r1, #44	; 0x2c
 8002270:	fb01 f303 	mul.w	r3, r1, r3
 8002274:	4413      	add	r3, r2
 8002276:	335c      	adds	r3, #92	; 0x5c
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f002 f9dd 	bl	8004646 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	4413      	add	r3, r2
 8002294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002298:	461a      	mov	r2, r3
 800229a:	2340      	movs	r3, #64	; 0x40
 800229c:	6093      	str	r3, [r2, #8]
}
 800229e:	e254      	b.n	800274a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d11a      	bne.n	80022ec <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c2:	461a      	mov	r2, r3
 80022c4:	2308      	movs	r3, #8
 80022c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	212c      	movs	r1, #44	; 0x2c
 80022ce:	fb01 f303 	mul.w	r3, r1, r3
 80022d2:	4413      	add	r3, r2
 80022d4:	3361      	adds	r3, #97	; 0x61
 80022d6:	2205      	movs	r2, #5
 80022d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f002 f9ae 	bl	8004646 <USB_HC_Halt>
}
 80022ea:	e22e      	b.n	800274a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	015a      	lsls	r2, r3, #5
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b10      	cmp	r3, #16
 8002300:	d140      	bne.n	8002384 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	212c      	movs	r1, #44	; 0x2c
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	4413      	add	r3, r2
 800230e:	335c      	adds	r3, #92	; 0x5c
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	212c      	movs	r1, #44	; 0x2c
 800231a:	fb01 f303 	mul.w	r3, r1, r3
 800231e:	4413      	add	r3, r2
 8002320:	3361      	adds	r3, #97	; 0x61
 8002322:	2203      	movs	r2, #3
 8002324:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	212c      	movs	r1, #44	; 0x2c
 800232c:	fb01 f303 	mul.w	r3, r1, r3
 8002330:	4413      	add	r3, r2
 8002332:	333d      	adds	r3, #61	; 0x3d
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d112      	bne.n	8002360 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	212c      	movs	r1, #44	; 0x2c
 8002340:	fb01 f303 	mul.w	r3, r1, r3
 8002344:	4413      	add	r3, r2
 8002346:	333c      	adds	r3, #60	; 0x3c
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d108      	bne.n	8002360 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	212c      	movs	r1, #44	; 0x2c
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	4413      	add	r3, r2
 800235a:	333d      	adds	r3, #61	; 0x3d
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	4611      	mov	r1, r2
 800236a:	4618      	mov	r0, r3
 800236c:	f002 f96b 	bl	8004646 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	015a      	lsls	r2, r3, #5
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	4413      	add	r3, r2
 8002378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237c:	461a      	mov	r2, r3
 800237e:	2310      	movs	r3, #16
 8002380:	6093      	str	r3, [r2, #8]
}
 8002382:	e1e2      	b.n	800274a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	015a      	lsls	r2, r3, #5
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	4413      	add	r3, r2
 800238c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002396:	2b80      	cmp	r3, #128	; 0x80
 8002398:	d164      	bne.n	8002464 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d111      	bne.n	80023c6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	212c      	movs	r1, #44	; 0x2c
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	3361      	adds	r3, #97	; 0x61
 80023b0:	2206      	movs	r2, #6
 80023b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	4611      	mov	r1, r2
 80023be:	4618      	mov	r0, r3
 80023c0:	f002 f941 	bl	8004646 <USB_HC_Halt>
 80023c4:	e044      	b.n	8002450 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	212c      	movs	r1, #44	; 0x2c
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	335c      	adds	r3, #92	; 0x5c
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	202c      	movs	r0, #44	; 0x2c
 80023de:	fb00 f303 	mul.w	r3, r0, r3
 80023e2:	440b      	add	r3, r1
 80023e4:	335c      	adds	r3, #92	; 0x5c
 80023e6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	212c      	movs	r1, #44	; 0x2c
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	335c      	adds	r3, #92	; 0x5c
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d920      	bls.n	800243e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	335c      	adds	r3, #92	; 0x5c
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	3360      	adds	r3, #96	; 0x60
 800241c:	2204      	movs	r2, #4
 800241e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	b2d9      	uxtb	r1, r3
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	202c      	movs	r0, #44	; 0x2c
 800242a:	fb00 f303 	mul.w	r3, r0, r3
 800242e:	4413      	add	r3, r2
 8002430:	3360      	adds	r3, #96	; 0x60
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f004 fe36 	bl	80070a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800243c:	e008      	b.n	8002450 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	212c      	movs	r1, #44	; 0x2c
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	4413      	add	r3, r2
 800244a:	3360      	adds	r3, #96	; 0x60
 800244c:	2202      	movs	r2, #2
 800244e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	4413      	add	r3, r2
 8002458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245c:	461a      	mov	r2, r3
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	6093      	str	r3, [r2, #8]
}
 8002462:	e172      	b.n	800274a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	4413      	add	r3, r2
 800246c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800247a:	d11b      	bne.n	80024b4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	212c      	movs	r1, #44	; 0x2c
 8002482:	fb01 f303 	mul.w	r3, r1, r3
 8002486:	4413      	add	r3, r2
 8002488:	3361      	adds	r3, #97	; 0x61
 800248a:	2208      	movs	r2, #8
 800248c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f002 f8d4 	bl	8004646 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024aa:	461a      	mov	r2, r3
 80024ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024b0:	6093      	str	r3, [r2, #8]
}
 80024b2:	e14a      	b.n	800274a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	015a      	lsls	r2, r3, #5
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	f040 813f 	bne.w	800274a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	212c      	movs	r1, #44	; 0x2c
 80024d2:	fb01 f303 	mul.w	r3, r1, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	3361      	adds	r3, #97	; 0x61
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d17d      	bne.n	80025dc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	212c      	movs	r1, #44	; 0x2c
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	3360      	adds	r3, #96	; 0x60
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	212c      	movs	r1, #44	; 0x2c
 80024f8:	fb01 f303 	mul.w	r3, r1, r3
 80024fc:	4413      	add	r3, r2
 80024fe:	333f      	adds	r3, #63	; 0x3f
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d00a      	beq.n	800251c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	333f      	adds	r3, #63	; 0x3f
 8002514:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002516:	2b03      	cmp	r3, #3
 8002518:	f040 8100 	bne.w	800271c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d113      	bne.n	800254c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	212c      	movs	r1, #44	; 0x2c
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	4413      	add	r3, r2
 8002530:	3355      	adds	r3, #85	; 0x55
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	f083 0301 	eor.w	r3, r3, #1
 8002538:	b2d8      	uxtb	r0, r3
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	212c      	movs	r1, #44	; 0x2c
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4413      	add	r3, r2
 8002546:	3355      	adds	r3, #85	; 0x55
 8002548:	4602      	mov	r2, r0
 800254a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	2b01      	cmp	r3, #1
 8002552:	f040 80e3 	bne.w	800271c <HCD_HC_OUT_IRQHandler+0x69c>
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	212c      	movs	r1, #44	; 0x2c
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	334c      	adds	r3, #76	; 0x4c
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 80d8 	beq.w	800271c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	212c      	movs	r1, #44	; 0x2c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	334c      	adds	r3, #76	; 0x4c
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	202c      	movs	r0, #44	; 0x2c
 8002582:	fb00 f202 	mul.w	r2, r0, r2
 8002586:	440a      	add	r2, r1
 8002588:	3240      	adds	r2, #64	; 0x40
 800258a:	8812      	ldrh	r2, [r2, #0]
 800258c:	4413      	add	r3, r2
 800258e:	3b01      	subs	r3, #1
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	202c      	movs	r0, #44	; 0x2c
 8002596:	fb00 f202 	mul.w	r2, r0, r2
 800259a:	440a      	add	r2, r1
 800259c:	3240      	adds	r2, #64	; 0x40
 800259e:	8812      	ldrh	r2, [r2, #0]
 80025a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80b5 	beq.w	800271c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	212c      	movs	r1, #44	; 0x2c
 80025b8:	fb01 f303 	mul.w	r3, r1, r3
 80025bc:	4413      	add	r3, r2
 80025be:	3355      	adds	r3, #85	; 0x55
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	f083 0301 	eor.w	r3, r3, #1
 80025c6:	b2d8      	uxtb	r0, r3
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	212c      	movs	r1, #44	; 0x2c
 80025ce:	fb01 f303 	mul.w	r3, r1, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	3355      	adds	r3, #85	; 0x55
 80025d6:	4602      	mov	r2, r0
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	e09f      	b.n	800271c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	3361      	adds	r3, #97	; 0x61
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d109      	bne.n	8002604 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	212c      	movs	r1, #44	; 0x2c
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	3360      	adds	r3, #96	; 0x60
 80025fe:	2202      	movs	r2, #2
 8002600:	701a      	strb	r2, [r3, #0]
 8002602:	e08b      	b.n	800271c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	212c      	movs	r1, #44	; 0x2c
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	4413      	add	r3, r2
 8002610:	3361      	adds	r3, #97	; 0x61
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b04      	cmp	r3, #4
 8002616:	d109      	bne.n	800262c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	3360      	adds	r3, #96	; 0x60
 8002626:	2202      	movs	r2, #2
 8002628:	701a      	strb	r2, [r3, #0]
 800262a:	e077      	b.n	800271c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3361      	adds	r3, #97	; 0x61
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b05      	cmp	r3, #5
 800263e:	d109      	bne.n	8002654 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	212c      	movs	r1, #44	; 0x2c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	3360      	adds	r3, #96	; 0x60
 800264e:	2205      	movs	r2, #5
 8002650:	701a      	strb	r2, [r3, #0]
 8002652:	e063      	b.n	800271c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	3361      	adds	r3, #97	; 0x61
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b06      	cmp	r3, #6
 8002666:	d009      	beq.n	800267c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	212c      	movs	r1, #44	; 0x2c
 800266e:	fb01 f303 	mul.w	r3, r1, r3
 8002672:	4413      	add	r3, r2
 8002674:	3361      	adds	r3, #97	; 0x61
 8002676:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002678:	2b08      	cmp	r3, #8
 800267a:	d14f      	bne.n	800271c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	212c      	movs	r1, #44	; 0x2c
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	4413      	add	r3, r2
 8002688:	335c      	adds	r3, #92	; 0x5c
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	202c      	movs	r0, #44	; 0x2c
 8002694:	fb00 f303 	mul.w	r3, r0, r3
 8002698:	440b      	add	r3, r1
 800269a:	335c      	adds	r3, #92	; 0x5c
 800269c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	212c      	movs	r1, #44	; 0x2c
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	335c      	adds	r3, #92	; 0x5c
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d912      	bls.n	80026d8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	335c      	adds	r3, #92	; 0x5c
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	212c      	movs	r1, #44	; 0x2c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	3360      	adds	r3, #96	; 0x60
 80026d2:	2204      	movs	r2, #4
 80026d4:	701a      	strb	r2, [r3, #0]
 80026d6:	e021      	b.n	800271c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	212c      	movs	r1, #44	; 0x2c
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	3360      	adds	r3, #96	; 0x60
 80026e6:	2202      	movs	r2, #2
 80026e8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002700:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002708:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	4413      	add	r3, r2
 8002712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002716:	461a      	mov	r2, r3
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	4413      	add	r3, r2
 8002724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002728:	461a      	mov	r2, r3
 800272a:	2302      	movs	r3, #2
 800272c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	b2d9      	uxtb	r1, r3
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	202c      	movs	r0, #44	; 0x2c
 8002738:	fb00 f303 	mul.w	r3, r0, r3
 800273c:	4413      	add	r3, r2
 800273e:	3360      	adds	r3, #96	; 0x60
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f004 fcaf 	bl	80070a8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800274a:	bf00      	nop
 800274c:	3720      	adds	r7, #32
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b08a      	sub	sp, #40	; 0x28
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	0c5b      	lsrs	r3, r3, #17
 8002778:	f003 030f 	and.w	r3, r3, #15
 800277c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002786:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d004      	beq.n	8002798 <HCD_RXQLVL_IRQHandler+0x46>
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2b05      	cmp	r3, #5
 8002792:	f000 80a9 	beq.w	80028e8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002796:	e0aa      	b.n	80028ee <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 80a6 	beq.w	80028ec <HCD_RXQLVL_IRQHandler+0x19a>
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	212c      	movs	r1, #44	; 0x2c
 80027a6:	fb01 f303 	mul.w	r3, r1, r3
 80027aa:	4413      	add	r3, r2
 80027ac:	3344      	adds	r3, #68	; 0x44
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 809b 	beq.w	80028ec <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	212c      	movs	r1, #44	; 0x2c
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	3350      	adds	r3, #80	; 0x50
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	441a      	add	r2, r3
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	202c      	movs	r0, #44	; 0x2c
 80027d0:	fb00 f303 	mul.w	r3, r0, r3
 80027d4:	440b      	add	r3, r1
 80027d6:	334c      	adds	r3, #76	; 0x4c
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d87a      	bhi.n	80028d4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	212c      	movs	r1, #44	; 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	3344      	adds	r3, #68	; 0x44
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	b292      	uxth	r2, r2
 80027f6:	4619      	mov	r1, r3
 80027f8:	f001 fa7c 	bl	8003cf4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	212c      	movs	r1, #44	; 0x2c
 8002802:	fb01 f303 	mul.w	r3, r1, r3
 8002806:	4413      	add	r3, r2
 8002808:	3344      	adds	r3, #68	; 0x44
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	441a      	add	r2, r3
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	202c      	movs	r0, #44	; 0x2c
 8002816:	fb00 f303 	mul.w	r3, r0, r3
 800281a:	440b      	add	r3, r1
 800281c:	3344      	adds	r3, #68	; 0x44
 800281e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	212c      	movs	r1, #44	; 0x2c
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	4413      	add	r3, r2
 800282c:	3350      	adds	r3, #80	; 0x50
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	441a      	add	r2, r3
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	202c      	movs	r0, #44	; 0x2c
 800283a:	fb00 f303 	mul.w	r3, r0, r3
 800283e:	440b      	add	r3, r1
 8002840:	3350      	adds	r3, #80	; 0x50
 8002842:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	4413      	add	r3, r2
 800284c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	0cdb      	lsrs	r3, r3, #19
 8002854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002858:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	212c      	movs	r1, #44	; 0x2c
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	4413      	add	r3, r2
 8002866:	3340      	adds	r3, #64	; 0x40
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4293      	cmp	r3, r2
 8002870:	d13c      	bne.n	80028ec <HCD_RXQLVL_IRQHandler+0x19a>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d039      	beq.n	80028ec <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800288e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002896:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a4:	461a      	mov	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	212c      	movs	r1, #44	; 0x2c
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	3354      	adds	r3, #84	; 0x54
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	f083 0301 	eor.w	r3, r3, #1
 80028be:	b2d8      	uxtb	r0, r3
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	212c      	movs	r1, #44	; 0x2c
 80028c6:	fb01 f303 	mul.w	r3, r1, r3
 80028ca:	4413      	add	r3, r2
 80028cc:	3354      	adds	r3, #84	; 0x54
 80028ce:	4602      	mov	r2, r0
 80028d0:	701a      	strb	r2, [r3, #0]
      break;
 80028d2:	e00b      	b.n	80028ec <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	212c      	movs	r1, #44	; 0x2c
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	3360      	adds	r3, #96	; 0x60
 80028e2:	2204      	movs	r2, #4
 80028e4:	701a      	strb	r2, [r3, #0]
      break;
 80028e6:	e001      	b.n	80028ec <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80028e8:	bf00      	nop
 80028ea:	e000      	b.n	80028ee <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80028ec:	bf00      	nop
  }
}
 80028ee:	bf00      	nop
 80028f0:	3728      	adds	r7, #40	; 0x28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b086      	sub	sp, #24
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002922:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b02      	cmp	r3, #2
 800292c:	d10b      	bne.n	8002946 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b01      	cmp	r3, #1
 8002936:	d102      	bne.n	800293e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f004 fb99 	bl	8007070 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b08      	cmp	r3, #8
 800294e:	d132      	bne.n	80029b6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f043 0308 	orr.w	r3, r3, #8
 8002956:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b04      	cmp	r3, #4
 8002960:	d126      	bne.n	80029b0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d113      	bne.n	8002992 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002970:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002974:	d106      	bne.n	8002984 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2102      	movs	r1, #2
 800297c:	4618      	mov	r0, r3
 800297e:	f001 fb27 	bl	8003fd0 <USB_InitFSLSPClkSel>
 8002982:	e011      	b.n	80029a8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2101      	movs	r1, #1
 800298a:	4618      	mov	r0, r3
 800298c:	f001 fb20 	bl	8003fd0 <USB_InitFSLSPClkSel>
 8002990:	e00a      	b.n	80029a8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d106      	bne.n	80029a8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029a0:	461a      	mov	r2, r3
 80029a2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80029a6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f004 fb8b 	bl	80070c4 <HAL_HCD_PortEnabled_Callback>
 80029ae:	e002      	b.n	80029b6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f004 fb95 	bl	80070e0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d103      	bne.n	80029c8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f043 0320 	orr.w	r3, r3, #32
 80029c6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029ce:	461a      	mov	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	6013      	str	r3, [r2, #0]
}
 80029d4:	bf00      	nop
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e267      	b.n	8002ebe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d075      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029fa:	4b88      	ldr	r3, [pc, #544]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d00c      	beq.n	8002a20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a06:	4b85      	ldr	r3, [pc, #532]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d112      	bne.n	8002a38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a12:	4b82      	ldr	r3, [pc, #520]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a1e:	d10b      	bne.n	8002a38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a20:	4b7e      	ldr	r3, [pc, #504]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d05b      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x108>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d157      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e242      	b.n	8002ebe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a40:	d106      	bne.n	8002a50 <HAL_RCC_OscConfig+0x74>
 8002a42:	4b76      	ldr	r3, [pc, #472]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a75      	ldr	r2, [pc, #468]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	e01d      	b.n	8002a8c <HAL_RCC_OscConfig+0xb0>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a58:	d10c      	bne.n	8002a74 <HAL_RCC_OscConfig+0x98>
 8002a5a:	4b70      	ldr	r3, [pc, #448]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a6f      	ldr	r2, [pc, #444]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	4b6d      	ldr	r3, [pc, #436]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a6c      	ldr	r2, [pc, #432]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	e00b      	b.n	8002a8c <HAL_RCC_OscConfig+0xb0>
 8002a74:	4b69      	ldr	r3, [pc, #420]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a68      	ldr	r2, [pc, #416]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	4b66      	ldr	r3, [pc, #408]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a65      	ldr	r2, [pc, #404]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d013      	beq.n	8002abc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7fe f8d2 	bl	8000c3c <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a9c:	f7fe f8ce 	bl	8000c3c <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b64      	cmp	r3, #100	; 0x64
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e207      	b.n	8002ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	4b5b      	ldr	r3, [pc, #364]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCC_OscConfig+0xc0>
 8002aba:	e014      	b.n	8002ae6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7fe f8be 	bl	8000c3c <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac4:	f7fe f8ba 	bl	8000c3c <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b64      	cmp	r3, #100	; 0x64
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e1f3      	b.n	8002ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad6:	4b51      	ldr	r3, [pc, #324]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0xe8>
 8002ae2:	e000      	b.n	8002ae6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d063      	beq.n	8002bba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002af2:	4b4a      	ldr	r3, [pc, #296]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00b      	beq.n	8002b16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002afe:	4b47      	ldr	r3, [pc, #284]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d11c      	bne.n	8002b44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b0a:	4b44      	ldr	r3, [pc, #272]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d116      	bne.n	8002b44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b16:	4b41      	ldr	r3, [pc, #260]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d005      	beq.n	8002b2e <HAL_RCC_OscConfig+0x152>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d001      	beq.n	8002b2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e1c7      	b.n	8002ebe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2e:	4b3b      	ldr	r3, [pc, #236]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4937      	ldr	r1, [pc, #220]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b42:	e03a      	b.n	8002bba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d020      	beq.n	8002b8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b4c:	4b34      	ldr	r3, [pc, #208]	; (8002c20 <HAL_RCC_OscConfig+0x244>)
 8002b4e:	2201      	movs	r2, #1
 8002b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b52:	f7fe f873 	bl	8000c3c <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b5a:	f7fe f86f 	bl	8000c3c <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e1a8      	b.n	8002ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6c:	4b2b      	ldr	r3, [pc, #172]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0f0      	beq.n	8002b5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b78:	4b28      	ldr	r3, [pc, #160]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4925      	ldr	r1, [pc, #148]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	600b      	str	r3, [r1, #0]
 8002b8c:	e015      	b.n	8002bba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b8e:	4b24      	ldr	r3, [pc, #144]	; (8002c20 <HAL_RCC_OscConfig+0x244>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7fe f852 	bl	8000c3c <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b9c:	f7fe f84e 	bl	8000c3c <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e187      	b.n	8002ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bae:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d036      	beq.n	8002c34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d016      	beq.n	8002bfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bce:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <HAL_RCC_OscConfig+0x248>)
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd4:	f7fe f832 	bl	8000c3c <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bdc:	f7fe f82e 	bl	8000c3c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e167      	b.n	8002ebe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_RCC_OscConfig+0x240>)
 8002bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f0      	beq.n	8002bdc <HAL_RCC_OscConfig+0x200>
 8002bfa:	e01b      	b.n	8002c34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bfc:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <HAL_RCC_OscConfig+0x248>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c02:	f7fe f81b 	bl	8000c3c <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c08:	e00e      	b.n	8002c28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c0a:	f7fe f817 	bl	8000c3c <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d907      	bls.n	8002c28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e150      	b.n	8002ebe <HAL_RCC_OscConfig+0x4e2>
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	42470000 	.word	0x42470000
 8002c24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c28:	4b88      	ldr	r3, [pc, #544]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1ea      	bne.n	8002c0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 8097 	beq.w	8002d70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c42:	2300      	movs	r3, #0
 8002c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c46:	4b81      	ldr	r3, [pc, #516]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10f      	bne.n	8002c72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	60bb      	str	r3, [r7, #8]
 8002c56:	4b7d      	ldr	r3, [pc, #500]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	4a7c      	ldr	r2, [pc, #496]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c60:	6413      	str	r3, [r2, #64]	; 0x40
 8002c62:	4b7a      	ldr	r3, [pc, #488]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c72:	4b77      	ldr	r3, [pc, #476]	; (8002e50 <HAL_RCC_OscConfig+0x474>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d118      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c7e:	4b74      	ldr	r3, [pc, #464]	; (8002e50 <HAL_RCC_OscConfig+0x474>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a73      	ldr	r2, [pc, #460]	; (8002e50 <HAL_RCC_OscConfig+0x474>)
 8002c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8a:	f7fd ffd7 	bl	8000c3c <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c92:	f7fd ffd3 	bl	8000c3c <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e10c      	b.n	8002ebe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca4:	4b6a      	ldr	r3, [pc, #424]	; (8002e50 <HAL_RCC_OscConfig+0x474>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d106      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x2ea>
 8002cb8:	4b64      	ldr	r3, [pc, #400]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbc:	4a63      	ldr	r2, [pc, #396]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc4:	e01c      	b.n	8002d00 <HAL_RCC_OscConfig+0x324>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b05      	cmp	r3, #5
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x30c>
 8002cce:	4b5f      	ldr	r3, [pc, #380]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd2:	4a5e      	ldr	r2, [pc, #376]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002cd4:	f043 0304 	orr.w	r3, r3, #4
 8002cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cda:	4b5c      	ldr	r3, [pc, #368]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cde:	4a5b      	ldr	r2, [pc, #364]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce6:	e00b      	b.n	8002d00 <HAL_RCC_OscConfig+0x324>
 8002ce8:	4b58      	ldr	r3, [pc, #352]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cec:	4a57      	ldr	r2, [pc, #348]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002cee:	f023 0301 	bic.w	r3, r3, #1
 8002cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf4:	4b55      	ldr	r3, [pc, #340]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf8:	4a54      	ldr	r2, [pc, #336]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002cfa:	f023 0304 	bic.w	r3, r3, #4
 8002cfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d015      	beq.n	8002d34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d08:	f7fd ff98 	bl	8000c3c <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0e:	e00a      	b.n	8002d26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d10:	f7fd ff94 	bl	8000c3c <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e0cb      	b.n	8002ebe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d26:	4b49      	ldr	r3, [pc, #292]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0ee      	beq.n	8002d10 <HAL_RCC_OscConfig+0x334>
 8002d32:	e014      	b.n	8002d5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d34:	f7fd ff82 	bl	8000c3c <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3a:	e00a      	b.n	8002d52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d3c:	f7fd ff7e 	bl	8000c3c <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e0b5      	b.n	8002ebe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d52:	4b3e      	ldr	r3, [pc, #248]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1ee      	bne.n	8002d3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d5e:	7dfb      	ldrb	r3, [r7, #23]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d105      	bne.n	8002d70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d64:	4b39      	ldr	r3, [pc, #228]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	4a38      	ldr	r2, [pc, #224]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80a1 	beq.w	8002ebc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d7a:	4b34      	ldr	r3, [pc, #208]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d05c      	beq.n	8002e40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d141      	bne.n	8002e12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8e:	4b31      	ldr	r3, [pc, #196]	; (8002e54 <HAL_RCC_OscConfig+0x478>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d94:	f7fd ff52 	bl	8000c3c <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d9c:	f7fd ff4e 	bl	8000c3c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e087      	b.n	8002ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dae:	4b27      	ldr	r3, [pc, #156]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69da      	ldr	r2, [r3, #28]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	019b      	lsls	r3, r3, #6
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	085b      	lsrs	r3, r3, #1
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	041b      	lsls	r3, r3, #16
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	061b      	lsls	r3, r3, #24
 8002dde:	491b      	ldr	r1, [pc, #108]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002de4:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <HAL_RCC_OscConfig+0x478>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dea:	f7fd ff27 	bl	8000c3c <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df2:	f7fd ff23 	bl	8000c3c <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e05c      	b.n	8002ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e04:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0f0      	beq.n	8002df2 <HAL_RCC_OscConfig+0x416>
 8002e10:	e054      	b.n	8002ebc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e12:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <HAL_RCC_OscConfig+0x478>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e18:	f7fd ff10 	bl	8000c3c <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e20:	f7fd ff0c 	bl	8000c3c <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e045      	b.n	8002ebe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e32:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_RCC_OscConfig+0x470>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0x444>
 8002e3e:	e03d      	b.n	8002ebc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d107      	bne.n	8002e58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e038      	b.n	8002ebe <HAL_RCC_OscConfig+0x4e2>
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	40007000 	.word	0x40007000
 8002e54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <HAL_RCC_OscConfig+0x4ec>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d028      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d121      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d11a      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e88:	4013      	ands	r3, r2
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d111      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	085b      	lsrs	r3, r3, #1
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d107      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800

08002ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0cc      	b.n	800307a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee0:	4b68      	ldr	r3, [pc, #416]	; (8003084 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d90c      	bls.n	8002f08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eee:	4b65      	ldr	r3, [pc, #404]	; (8003084 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef6:	4b63      	ldr	r3, [pc, #396]	; (8003084 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0b8      	b.n	800307a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d020      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f20:	4b59      	ldr	r3, [pc, #356]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	4a58      	ldr	r2, [pc, #352]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f38:	4b53      	ldr	r3, [pc, #332]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	4a52      	ldr	r2, [pc, #328]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f44:	4b50      	ldr	r3, [pc, #320]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	494d      	ldr	r1, [pc, #308]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d044      	beq.n	8002fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d107      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6a:	4b47      	ldr	r3, [pc, #284]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d119      	bne.n	8002faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e07f      	b.n	800307a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d003      	beq.n	8002f8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	d107      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8a:	4b3f      	ldr	r3, [pc, #252]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e06f      	b.n	800307a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9a:	4b3b      	ldr	r3, [pc, #236]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e067      	b.n	800307a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002faa:	4b37      	ldr	r3, [pc, #220]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f023 0203 	bic.w	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	4934      	ldr	r1, [pc, #208]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fbc:	f7fd fe3e 	bl	8000c3c <HAL_GetTick>
 8002fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc4:	f7fd fe3a 	bl	8000c3c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e04f      	b.n	800307a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fda:	4b2b      	ldr	r3, [pc, #172]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 020c 	and.w	r2, r3, #12
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d1eb      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fec:	4b25      	ldr	r3, [pc, #148]	; (8003084 <HAL_RCC_ClockConfig+0x1b8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d20c      	bcs.n	8003014 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffa:	4b22      	ldr	r3, [pc, #136]	; (8003084 <HAL_RCC_ClockConfig+0x1b8>)
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	4b20      	ldr	r3, [pc, #128]	; (8003084 <HAL_RCC_ClockConfig+0x1b8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d001      	beq.n	8003014 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e032      	b.n	800307a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003020:	4b19      	ldr	r3, [pc, #100]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	4916      	ldr	r1, [pc, #88]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	4313      	orrs	r3, r2
 8003030:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d009      	beq.n	8003052 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800303e:	4b12      	ldr	r3, [pc, #72]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	490e      	ldr	r1, [pc, #56]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	4313      	orrs	r3, r2
 8003050:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003052:	f000 f821 	bl	8003098 <HAL_RCC_GetSysClockFreq>
 8003056:	4602      	mov	r2, r0
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	490a      	ldr	r1, [pc, #40]	; (800308c <HAL_RCC_ClockConfig+0x1c0>)
 8003064:	5ccb      	ldrb	r3, [r1, r3]
 8003066:	fa22 f303 	lsr.w	r3, r2, r3
 800306a:	4a09      	ldr	r2, [pc, #36]	; (8003090 <HAL_RCC_ClockConfig+0x1c4>)
 800306c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800306e:	4b09      	ldr	r3, [pc, #36]	; (8003094 <HAL_RCC_ClockConfig+0x1c8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fd fd9e 	bl	8000bb4 <HAL_InitTick>

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40023c00 	.word	0x40023c00
 8003088:	40023800 	.word	0x40023800
 800308c:	08008350 	.word	0x08008350
 8003090:	20000000 	.word	0x20000000
 8003094:	20000004 	.word	0x20000004

08003098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800309c:	b090      	sub	sp, #64	; 0x40
 800309e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	637b      	str	r3, [r7, #52]	; 0x34
 80030a4:	2300      	movs	r3, #0
 80030a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030a8:	2300      	movs	r3, #0
 80030aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030b0:	4b59      	ldr	r3, [pc, #356]	; (8003218 <HAL_RCC_GetSysClockFreq+0x180>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d00d      	beq.n	80030d8 <HAL_RCC_GetSysClockFreq+0x40>
 80030bc:	2b08      	cmp	r3, #8
 80030be:	f200 80a1 	bhi.w	8003204 <HAL_RCC_GetSysClockFreq+0x16c>
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <HAL_RCC_GetSysClockFreq+0x34>
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d003      	beq.n	80030d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80030ca:	e09b      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030cc:	4b53      	ldr	r3, [pc, #332]	; (800321c <HAL_RCC_GetSysClockFreq+0x184>)
 80030ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80030d0:	e09b      	b.n	800320a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030d2:	4b53      	ldr	r3, [pc, #332]	; (8003220 <HAL_RCC_GetSysClockFreq+0x188>)
 80030d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030d6:	e098      	b.n	800320a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030d8:	4b4f      	ldr	r3, [pc, #316]	; (8003218 <HAL_RCC_GetSysClockFreq+0x180>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030e2:	4b4d      	ldr	r3, [pc, #308]	; (8003218 <HAL_RCC_GetSysClockFreq+0x180>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d028      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ee:	4b4a      	ldr	r3, [pc, #296]	; (8003218 <HAL_RCC_GetSysClockFreq+0x180>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	099b      	lsrs	r3, r3, #6
 80030f4:	2200      	movs	r2, #0
 80030f6:	623b      	str	r3, [r7, #32]
 80030f8:	627a      	str	r2, [r7, #36]	; 0x24
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003100:	2100      	movs	r1, #0
 8003102:	4b47      	ldr	r3, [pc, #284]	; (8003220 <HAL_RCC_GetSysClockFreq+0x188>)
 8003104:	fb03 f201 	mul.w	r2, r3, r1
 8003108:	2300      	movs	r3, #0
 800310a:	fb00 f303 	mul.w	r3, r0, r3
 800310e:	4413      	add	r3, r2
 8003110:	4a43      	ldr	r2, [pc, #268]	; (8003220 <HAL_RCC_GetSysClockFreq+0x188>)
 8003112:	fba0 1202 	umull	r1, r2, r0, r2
 8003116:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003118:	460a      	mov	r2, r1
 800311a:	62ba      	str	r2, [r7, #40]	; 0x28
 800311c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800311e:	4413      	add	r3, r2
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003124:	2200      	movs	r2, #0
 8003126:	61bb      	str	r3, [r7, #24]
 8003128:	61fa      	str	r2, [r7, #28]
 800312a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800312e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003132:	f7fd f8a5 	bl	8000280 <__aeabi_uldivmod>
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	4613      	mov	r3, r2
 800313c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800313e:	e053      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003140:	4b35      	ldr	r3, [pc, #212]	; (8003218 <HAL_RCC_GetSysClockFreq+0x180>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	099b      	lsrs	r3, r3, #6
 8003146:	2200      	movs	r2, #0
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	617a      	str	r2, [r7, #20]
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003152:	f04f 0b00 	mov.w	fp, #0
 8003156:	4652      	mov	r2, sl
 8003158:	465b      	mov	r3, fp
 800315a:	f04f 0000 	mov.w	r0, #0
 800315e:	f04f 0100 	mov.w	r1, #0
 8003162:	0159      	lsls	r1, r3, #5
 8003164:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003168:	0150      	lsls	r0, r2, #5
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	ebb2 080a 	subs.w	r8, r2, sl
 8003172:	eb63 090b 	sbc.w	r9, r3, fp
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003182:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003186:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800318a:	ebb2 0408 	subs.w	r4, r2, r8
 800318e:	eb63 0509 	sbc.w	r5, r3, r9
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	00eb      	lsls	r3, r5, #3
 800319c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031a0:	00e2      	lsls	r2, r4, #3
 80031a2:	4614      	mov	r4, r2
 80031a4:	461d      	mov	r5, r3
 80031a6:	eb14 030a 	adds.w	r3, r4, sl
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	eb45 030b 	adc.w	r3, r5, fp
 80031b0:	607b      	str	r3, [r7, #4]
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031be:	4629      	mov	r1, r5
 80031c0:	028b      	lsls	r3, r1, #10
 80031c2:	4621      	mov	r1, r4
 80031c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031c8:	4621      	mov	r1, r4
 80031ca:	028a      	lsls	r2, r1, #10
 80031cc:	4610      	mov	r0, r2
 80031ce:	4619      	mov	r1, r3
 80031d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d2:	2200      	movs	r2, #0
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	60fa      	str	r2, [r7, #12]
 80031d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031dc:	f7fd f850 	bl	8000280 <__aeabi_uldivmod>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4613      	mov	r3, r2
 80031e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_RCC_GetSysClockFreq+0x180>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	0c1b      	lsrs	r3, r3, #16
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	3301      	adds	r3, #1
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80031f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003200:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003202:	e002      	b.n	800320a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003204:	4b05      	ldr	r3, [pc, #20]	; (800321c <HAL_RCC_GetSysClockFreq+0x184>)
 8003206:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003208:	bf00      	nop
    }
  }
  return sysclockfreq;
 800320a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800320c:	4618      	mov	r0, r3
 800320e:	3740      	adds	r7, #64	; 0x40
 8003210:	46bd      	mov	sp, r7
 8003212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800
 800321c:	00f42400 	.word	0x00f42400
 8003220:	017d7840 	.word	0x017d7840

08003224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003228:	4b03      	ldr	r3, [pc, #12]	; (8003238 <HAL_RCC_GetHCLKFreq+0x14>)
 800322a:	681b      	ldr	r3, [r3, #0]
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000000 	.word	0x20000000

0800323c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003240:	f7ff fff0 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 8003244:	4602      	mov	r2, r0
 8003246:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	0a9b      	lsrs	r3, r3, #10
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	4903      	ldr	r1, [pc, #12]	; (8003260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003252:	5ccb      	ldrb	r3, [r1, r3]
 8003254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003258:	4618      	mov	r0, r3
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40023800 	.word	0x40023800
 8003260:	08008360 	.word	0x08008360

08003264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003268:	f7ff ffdc 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 800326c:	4602      	mov	r2, r0
 800326e:	4b05      	ldr	r3, [pc, #20]	; (8003284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	0b5b      	lsrs	r3, r3, #13
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	4903      	ldr	r1, [pc, #12]	; (8003288 <HAL_RCC_GetPCLK2Freq+0x24>)
 800327a:	5ccb      	ldrb	r3, [r1, r3]
 800327c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003280:	4618      	mov	r0, r3
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40023800 	.word	0x40023800
 8003288:	08008360 	.word	0x08008360

0800328c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e03f      	b.n	800331e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d106      	bne.n	80032b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7fd fba4 	bl	8000a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2224      	movs	r2, #36	; 0x24
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f929 	bl	8003528 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695a      	ldr	r2, [r3, #20]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003304:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b08a      	sub	sp, #40	; 0x28
 800332a:	af02      	add	r7, sp, #8
 800332c:	60f8      	str	r0, [r7, #12]
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	603b      	str	r3, [r7, #0]
 8003332:	4613      	mov	r3, r2
 8003334:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b20      	cmp	r3, #32
 8003344:	d17c      	bne.n	8003440 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d002      	beq.n	8003352 <HAL_UART_Transmit+0x2c>
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e075      	b.n	8003442 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_UART_Transmit+0x3e>
 8003360:	2302      	movs	r3, #2
 8003362:	e06e      	b.n	8003442 <HAL_UART_Transmit+0x11c>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2221      	movs	r2, #33	; 0x21
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800337a:	f7fd fc5f 	bl	8000c3c <HAL_GetTick>
 800337e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	88fa      	ldrh	r2, [r7, #6]
 8003384:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	88fa      	ldrh	r2, [r7, #6]
 800338a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003394:	d108      	bne.n	80033a8 <HAL_UART_Transmit+0x82>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d104      	bne.n	80033a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	61bb      	str	r3, [r7, #24]
 80033a6:	e003      	b.n	80033b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033b8:	e02a      	b.n	8003410 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2200      	movs	r2, #0
 80033c2:	2180      	movs	r1, #128	; 0x80
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 f840 	bl	800344a <UART_WaitOnFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e036      	b.n	8003442 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10b      	bne.n	80033f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	3302      	adds	r3, #2
 80033ee:	61bb      	str	r3, [r7, #24]
 80033f0:	e007      	b.n	8003402 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	781a      	ldrb	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	3301      	adds	r3, #1
 8003400:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1cf      	bne.n	80033ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2200      	movs	r2, #0
 8003422:	2140      	movs	r1, #64	; 0x40
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 f810 	bl	800344a <UART_WaitOnFlagUntilTimeout>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e006      	b.n	8003442 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	e000      	b.n	8003442 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003440:	2302      	movs	r3, #2
  }
}
 8003442:	4618      	mov	r0, r3
 8003444:	3720      	adds	r7, #32
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b090      	sub	sp, #64	; 0x40
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	603b      	str	r3, [r7, #0]
 8003456:	4613      	mov	r3, r2
 8003458:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800345a:	e050      	b.n	80034fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800345e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003462:	d04c      	beq.n	80034fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003466:	2b00      	cmp	r3, #0
 8003468:	d007      	beq.n	800347a <UART_WaitOnFlagUntilTimeout+0x30>
 800346a:	f7fd fbe7 	bl	8000c3c <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003476:	429a      	cmp	r2, r3
 8003478:	d241      	bcs.n	80034fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	330c      	adds	r3, #12
 8003480:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003484:	e853 3f00 	ldrex	r3, [r3]
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	330c      	adds	r3, #12
 8003498:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800349a:	637a      	str	r2, [r7, #52]	; 0x34
 800349c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034a2:	e841 2300 	strex	r3, r2, [r1]
 80034a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80034a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1e5      	bne.n	800347a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3314      	adds	r3, #20
 80034b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	e853 3f00 	ldrex	r3, [r3]
 80034bc:	613b      	str	r3, [r7, #16]
   return(result);
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f023 0301 	bic.w	r3, r3, #1
 80034c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	3314      	adds	r3, #20
 80034cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034ce:	623a      	str	r2, [r7, #32]
 80034d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d2:	69f9      	ldr	r1, [r7, #28]
 80034d4:	6a3a      	ldr	r2, [r7, #32]
 80034d6:	e841 2300 	strex	r3, r2, [r1]
 80034da:	61bb      	str	r3, [r7, #24]
   return(result);
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e5      	bne.n	80034ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e00f      	b.n	800351e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4013      	ands	r3, r2
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	429a      	cmp	r2, r3
 800350c:	bf0c      	ite	eq
 800350e:	2301      	moveq	r3, #1
 8003510:	2300      	movne	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	461a      	mov	r2, r3
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	429a      	cmp	r2, r3
 800351a:	d09f      	beq.n	800345c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3740      	adds	r7, #64	; 0x40
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800352c:	b0c0      	sub	sp, #256	; 0x100
 800352e:	af00      	add	r7, sp, #0
 8003530:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003544:	68d9      	ldr	r1, [r3, #12]
 8003546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	ea40 0301 	orr.w	r3, r0, r1
 8003550:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	431a      	orrs	r2, r3
 8003560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	431a      	orrs	r2, r3
 8003568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003580:	f021 010c 	bic.w	r1, r1, #12
 8003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800358e:	430b      	orrs	r3, r1
 8003590:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800359e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a2:	6999      	ldr	r1, [r3, #24]
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	ea40 0301 	orr.w	r3, r0, r1
 80035ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	4b8f      	ldr	r3, [pc, #572]	; (80037f4 <UART_SetConfig+0x2cc>)
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d005      	beq.n	80035c8 <UART_SetConfig+0xa0>
 80035bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	4b8d      	ldr	r3, [pc, #564]	; (80037f8 <UART_SetConfig+0x2d0>)
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d104      	bne.n	80035d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035c8:	f7ff fe4c 	bl	8003264 <HAL_RCC_GetPCLK2Freq>
 80035cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80035d0:	e003      	b.n	80035da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035d2:	f7ff fe33 	bl	800323c <HAL_RCC_GetPCLK1Freq>
 80035d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e4:	f040 810c 	bne.w	8003800 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ec:	2200      	movs	r2, #0
 80035ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035fa:	4622      	mov	r2, r4
 80035fc:	462b      	mov	r3, r5
 80035fe:	1891      	adds	r1, r2, r2
 8003600:	65b9      	str	r1, [r7, #88]	; 0x58
 8003602:	415b      	adcs	r3, r3
 8003604:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003606:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800360a:	4621      	mov	r1, r4
 800360c:	eb12 0801 	adds.w	r8, r2, r1
 8003610:	4629      	mov	r1, r5
 8003612:	eb43 0901 	adc.w	r9, r3, r1
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800362a:	4690      	mov	r8, r2
 800362c:	4699      	mov	r9, r3
 800362e:	4623      	mov	r3, r4
 8003630:	eb18 0303 	adds.w	r3, r8, r3
 8003634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003638:	462b      	mov	r3, r5
 800363a:	eb49 0303 	adc.w	r3, r9, r3
 800363e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800364e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003652:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003656:	460b      	mov	r3, r1
 8003658:	18db      	adds	r3, r3, r3
 800365a:	653b      	str	r3, [r7, #80]	; 0x50
 800365c:	4613      	mov	r3, r2
 800365e:	eb42 0303 	adc.w	r3, r2, r3
 8003662:	657b      	str	r3, [r7, #84]	; 0x54
 8003664:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003668:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800366c:	f7fc fe08 	bl	8000280 <__aeabi_uldivmod>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4b61      	ldr	r3, [pc, #388]	; (80037fc <UART_SetConfig+0x2d4>)
 8003676:	fba3 2302 	umull	r2, r3, r3, r2
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	011c      	lsls	r4, r3, #4
 800367e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003682:	2200      	movs	r2, #0
 8003684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003688:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800368c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003690:	4642      	mov	r2, r8
 8003692:	464b      	mov	r3, r9
 8003694:	1891      	adds	r1, r2, r2
 8003696:	64b9      	str	r1, [r7, #72]	; 0x48
 8003698:	415b      	adcs	r3, r3
 800369a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800369c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80036a0:	4641      	mov	r1, r8
 80036a2:	eb12 0a01 	adds.w	sl, r2, r1
 80036a6:	4649      	mov	r1, r9
 80036a8:	eb43 0b01 	adc.w	fp, r3, r1
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036c0:	4692      	mov	sl, r2
 80036c2:	469b      	mov	fp, r3
 80036c4:	4643      	mov	r3, r8
 80036c6:	eb1a 0303 	adds.w	r3, sl, r3
 80036ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036ce:	464b      	mov	r3, r9
 80036d0:	eb4b 0303 	adc.w	r3, fp, r3
 80036d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036ec:	460b      	mov	r3, r1
 80036ee:	18db      	adds	r3, r3, r3
 80036f0:	643b      	str	r3, [r7, #64]	; 0x40
 80036f2:	4613      	mov	r3, r2
 80036f4:	eb42 0303 	adc.w	r3, r2, r3
 80036f8:	647b      	str	r3, [r7, #68]	; 0x44
 80036fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003702:	f7fc fdbd 	bl	8000280 <__aeabi_uldivmod>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	4611      	mov	r1, r2
 800370c:	4b3b      	ldr	r3, [pc, #236]	; (80037fc <UART_SetConfig+0x2d4>)
 800370e:	fba3 2301 	umull	r2, r3, r3, r1
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	2264      	movs	r2, #100	; 0x64
 8003716:	fb02 f303 	mul.w	r3, r2, r3
 800371a:	1acb      	subs	r3, r1, r3
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003722:	4b36      	ldr	r3, [pc, #216]	; (80037fc <UART_SetConfig+0x2d4>)
 8003724:	fba3 2302 	umull	r2, r3, r3, r2
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003730:	441c      	add	r4, r3
 8003732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003736:	2200      	movs	r2, #0
 8003738:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800373c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003740:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003744:	4642      	mov	r2, r8
 8003746:	464b      	mov	r3, r9
 8003748:	1891      	adds	r1, r2, r2
 800374a:	63b9      	str	r1, [r7, #56]	; 0x38
 800374c:	415b      	adcs	r3, r3
 800374e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003750:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003754:	4641      	mov	r1, r8
 8003756:	1851      	adds	r1, r2, r1
 8003758:	6339      	str	r1, [r7, #48]	; 0x30
 800375a:	4649      	mov	r1, r9
 800375c:	414b      	adcs	r3, r1
 800375e:	637b      	str	r3, [r7, #52]	; 0x34
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800376c:	4659      	mov	r1, fp
 800376e:	00cb      	lsls	r3, r1, #3
 8003770:	4651      	mov	r1, sl
 8003772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003776:	4651      	mov	r1, sl
 8003778:	00ca      	lsls	r2, r1, #3
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	4603      	mov	r3, r0
 8003780:	4642      	mov	r2, r8
 8003782:	189b      	adds	r3, r3, r2
 8003784:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003788:	464b      	mov	r3, r9
 800378a:	460a      	mov	r2, r1
 800378c:	eb42 0303 	adc.w	r3, r2, r3
 8003790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80037a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80037a8:	460b      	mov	r3, r1
 80037aa:	18db      	adds	r3, r3, r3
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ae:	4613      	mov	r3, r2
 80037b0:	eb42 0303 	adc.w	r3, r2, r3
 80037b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80037be:	f7fc fd5f 	bl	8000280 <__aeabi_uldivmod>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <UART_SetConfig+0x2d4>)
 80037c8:	fba3 1302 	umull	r1, r3, r3, r2
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	2164      	movs	r1, #100	; 0x64
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	3332      	adds	r3, #50	; 0x32
 80037da:	4a08      	ldr	r2, [pc, #32]	; (80037fc <UART_SetConfig+0x2d4>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	f003 0207 	and.w	r2, r3, #7
 80037e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4422      	add	r2, r4
 80037ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037f0:	e106      	b.n	8003a00 <UART_SetConfig+0x4d8>
 80037f2:	bf00      	nop
 80037f4:	40011000 	.word	0x40011000
 80037f8:	40011400 	.word	0x40011400
 80037fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003804:	2200      	movs	r2, #0
 8003806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800380a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800380e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003812:	4642      	mov	r2, r8
 8003814:	464b      	mov	r3, r9
 8003816:	1891      	adds	r1, r2, r2
 8003818:	6239      	str	r1, [r7, #32]
 800381a:	415b      	adcs	r3, r3
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
 800381e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003822:	4641      	mov	r1, r8
 8003824:	1854      	adds	r4, r2, r1
 8003826:	4649      	mov	r1, r9
 8003828:	eb43 0501 	adc.w	r5, r3, r1
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	00eb      	lsls	r3, r5, #3
 8003836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800383a:	00e2      	lsls	r2, r4, #3
 800383c:	4614      	mov	r4, r2
 800383e:	461d      	mov	r5, r3
 8003840:	4643      	mov	r3, r8
 8003842:	18e3      	adds	r3, r4, r3
 8003844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003848:	464b      	mov	r3, r9
 800384a:	eb45 0303 	adc.w	r3, r5, r3
 800384e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800385e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800386e:	4629      	mov	r1, r5
 8003870:	008b      	lsls	r3, r1, #2
 8003872:	4621      	mov	r1, r4
 8003874:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003878:	4621      	mov	r1, r4
 800387a:	008a      	lsls	r2, r1, #2
 800387c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003880:	f7fc fcfe 	bl	8000280 <__aeabi_uldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4b60      	ldr	r3, [pc, #384]	; (8003a0c <UART_SetConfig+0x4e4>)
 800388a:	fba3 2302 	umull	r2, r3, r3, r2
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	011c      	lsls	r4, r3, #4
 8003892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003896:	2200      	movs	r2, #0
 8003898:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800389c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80038a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80038a4:	4642      	mov	r2, r8
 80038a6:	464b      	mov	r3, r9
 80038a8:	1891      	adds	r1, r2, r2
 80038aa:	61b9      	str	r1, [r7, #24]
 80038ac:	415b      	adcs	r3, r3
 80038ae:	61fb      	str	r3, [r7, #28]
 80038b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038b4:	4641      	mov	r1, r8
 80038b6:	1851      	adds	r1, r2, r1
 80038b8:	6139      	str	r1, [r7, #16]
 80038ba:	4649      	mov	r1, r9
 80038bc:	414b      	adcs	r3, r1
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038cc:	4659      	mov	r1, fp
 80038ce:	00cb      	lsls	r3, r1, #3
 80038d0:	4651      	mov	r1, sl
 80038d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038d6:	4651      	mov	r1, sl
 80038d8:	00ca      	lsls	r2, r1, #3
 80038da:	4610      	mov	r0, r2
 80038dc:	4619      	mov	r1, r3
 80038de:	4603      	mov	r3, r0
 80038e0:	4642      	mov	r2, r8
 80038e2:	189b      	adds	r3, r3, r2
 80038e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038e8:	464b      	mov	r3, r9
 80038ea:	460a      	mov	r2, r1
 80038ec:	eb42 0303 	adc.w	r3, r2, r3
 80038f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80038fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800390c:	4649      	mov	r1, r9
 800390e:	008b      	lsls	r3, r1, #2
 8003910:	4641      	mov	r1, r8
 8003912:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003916:	4641      	mov	r1, r8
 8003918:	008a      	lsls	r2, r1, #2
 800391a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800391e:	f7fc fcaf 	bl	8000280 <__aeabi_uldivmod>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4611      	mov	r1, r2
 8003928:	4b38      	ldr	r3, [pc, #224]	; (8003a0c <UART_SetConfig+0x4e4>)
 800392a:	fba3 2301 	umull	r2, r3, r3, r1
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	2264      	movs	r2, #100	; 0x64
 8003932:	fb02 f303 	mul.w	r3, r2, r3
 8003936:	1acb      	subs	r3, r1, r3
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	3332      	adds	r3, #50	; 0x32
 800393c:	4a33      	ldr	r2, [pc, #204]	; (8003a0c <UART_SetConfig+0x4e4>)
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003948:	441c      	add	r4, r3
 800394a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800394e:	2200      	movs	r2, #0
 8003950:	673b      	str	r3, [r7, #112]	; 0x70
 8003952:	677a      	str	r2, [r7, #116]	; 0x74
 8003954:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003958:	4642      	mov	r2, r8
 800395a:	464b      	mov	r3, r9
 800395c:	1891      	adds	r1, r2, r2
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	415b      	adcs	r3, r3
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003968:	4641      	mov	r1, r8
 800396a:	1851      	adds	r1, r2, r1
 800396c:	6039      	str	r1, [r7, #0]
 800396e:	4649      	mov	r1, r9
 8003970:	414b      	adcs	r3, r1
 8003972:	607b      	str	r3, [r7, #4]
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003980:	4659      	mov	r1, fp
 8003982:	00cb      	lsls	r3, r1, #3
 8003984:	4651      	mov	r1, sl
 8003986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800398a:	4651      	mov	r1, sl
 800398c:	00ca      	lsls	r2, r1, #3
 800398e:	4610      	mov	r0, r2
 8003990:	4619      	mov	r1, r3
 8003992:	4603      	mov	r3, r0
 8003994:	4642      	mov	r2, r8
 8003996:	189b      	adds	r3, r3, r2
 8003998:	66bb      	str	r3, [r7, #104]	; 0x68
 800399a:	464b      	mov	r3, r9
 800399c:	460a      	mov	r2, r1
 800399e:	eb42 0303 	adc.w	r3, r2, r3
 80039a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	663b      	str	r3, [r7, #96]	; 0x60
 80039ae:	667a      	str	r2, [r7, #100]	; 0x64
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039bc:	4649      	mov	r1, r9
 80039be:	008b      	lsls	r3, r1, #2
 80039c0:	4641      	mov	r1, r8
 80039c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039c6:	4641      	mov	r1, r8
 80039c8:	008a      	lsls	r2, r1, #2
 80039ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039ce:	f7fc fc57 	bl	8000280 <__aeabi_uldivmod>
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <UART_SetConfig+0x4e4>)
 80039d8:	fba3 1302 	umull	r1, r3, r3, r2
 80039dc:	095b      	lsrs	r3, r3, #5
 80039de:	2164      	movs	r1, #100	; 0x64
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	3332      	adds	r3, #50	; 0x32
 80039ea:	4a08      	ldr	r2, [pc, #32]	; (8003a0c <UART_SetConfig+0x4e4>)
 80039ec:	fba2 2303 	umull	r2, r3, r2, r3
 80039f0:	095b      	lsrs	r3, r3, #5
 80039f2:	f003 020f 	and.w	r2, r3, #15
 80039f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4422      	add	r2, r4
 80039fe:	609a      	str	r2, [r3, #8]
}
 8003a00:	bf00      	nop
 8003a02:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a06:	46bd      	mov	sp, r7
 8003a08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a0c:	51eb851f 	.word	0x51eb851f

08003a10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a10:	b084      	sub	sp, #16
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	f107 001c 	add.w	r0, r7, #28
 8003a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d122      	bne.n	8003a6e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d105      	bne.n	8003a62 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f9c0 	bl	8003de8 <USB_CoreReset>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	73fb      	strb	r3, [r7, #15]
 8003a6c:	e01a      	b.n	8003aa4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f9b4 	bl	8003de8 <USB_CoreReset>
 8003a80:	4603      	mov	r3, r0
 8003a82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	639a      	str	r2, [r3, #56]	; 0x38
 8003a96:	e005      	b.n	8003aa4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d10b      	bne.n	8003ac2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f043 0206 	orr.w	r2, r3, #6
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f043 0220 	orr.w	r2, r3, #32
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ace:	b004      	add	sp, #16
 8003ad0:	4770      	bx	lr

08003ad2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f043 0201 	orr.w	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f023 0201 	bic.w	r2, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b084      	sub	sp, #16
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b32:	78fb      	ldrb	r3, [r7, #3]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d115      	bne.n	8003b64 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b44:	2001      	movs	r0, #1
 8003b46:	f7fd f885 	bl	8000c54 <HAL_Delay>
      ms++;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f93a 	bl	8003dca <USB_GetMode>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d01e      	beq.n	8003b9a <USB_SetCurrentMode+0x84>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b31      	cmp	r3, #49	; 0x31
 8003b60:	d9f0      	bls.n	8003b44 <USB_SetCurrentMode+0x2e>
 8003b62:	e01a      	b.n	8003b9a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b64:	78fb      	ldrb	r3, [r7, #3]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d115      	bne.n	8003b96 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b76:	2001      	movs	r0, #1
 8003b78:	f7fd f86c 	bl	8000c54 <HAL_Delay>
      ms++;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f921 	bl	8003dca <USB_GetMode>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d005      	beq.n	8003b9a <USB_SetCurrentMode+0x84>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b31      	cmp	r3, #49	; 0x31
 8003b92:	d9f0      	bls.n	8003b76 <USB_SetCurrentMode+0x60>
 8003b94:	e001      	b.n	8003b9a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e005      	b.n	8003ba6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b32      	cmp	r3, #50	; 0x32
 8003b9e:	d101      	bne.n	8003ba4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4a13      	ldr	r2, [pc, #76]	; (8003c14 <USB_FlushTxFifo+0x64>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d901      	bls.n	8003bd0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e01b      	b.n	8003c08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	daf2      	bge.n	8003bbe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	019b      	lsls	r3, r3, #6
 8003be0:	f043 0220 	orr.w	r2, r3, #32
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	3301      	adds	r3, #1
 8003bec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4a08      	ldr	r2, [pc, #32]	; (8003c14 <USB_FlushTxFifo+0x64>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d901      	bls.n	8003bfa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e006      	b.n	8003c08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f003 0320 	and.w	r3, r3, #32
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	d0f0      	beq.n	8003be8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	00030d40 	.word	0x00030d40

08003c18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	3301      	adds	r3, #1
 8003c28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4a11      	ldr	r2, [pc, #68]	; (8003c74 <USB_FlushRxFifo+0x5c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d901      	bls.n	8003c36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e018      	b.n	8003c68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	daf2      	bge.n	8003c24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2210      	movs	r2, #16
 8003c46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4a08      	ldr	r2, [pc, #32]	; (8003c74 <USB_FlushRxFifo+0x5c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d901      	bls.n	8003c5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e006      	b.n	8003c68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	2b10      	cmp	r3, #16
 8003c64:	d0f0      	beq.n	8003c48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	00030d40 	.word	0x00030d40

08003c78 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b089      	sub	sp, #36	; 0x24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	4611      	mov	r1, r2
 8003c84:	461a      	mov	r2, r3
 8003c86:	460b      	mov	r3, r1
 8003c88:	71fb      	strb	r3, [r7, #7]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003c96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d123      	bne.n	8003ce6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003c9e:	88bb      	ldrh	r3, [r7, #4]
 8003ca0:	3303      	adds	r3, #3
 8003ca2:	089b      	lsrs	r3, r3, #2
 8003ca4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	e018      	b.n	8003cde <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	031a      	lsls	r2, r3, #12
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cb8:	461a      	mov	r2, r3
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d3e2      	bcc.n	8003cac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3724      	adds	r7, #36	; 0x24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b08b      	sub	sp, #44	; 0x2c
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	089b      	lsrs	r3, r3, #2
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003d12:	88fb      	ldrh	r3, [r7, #6]
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	623b      	str	r3, [r7, #32]
 8003d1e:	e014      	b.n	8003d4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	3301      	adds	r3, #1
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	3301      	adds	r3, #1
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	3301      	adds	r3, #1
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	3301      	adds	r3, #1
 8003d48:	623b      	str	r3, [r7, #32]
 8003d4a:	6a3a      	ldr	r2, [r7, #32]
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d3e6      	bcc.n	8003d20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003d52:	8bfb      	ldrh	r3, [r7, #30]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d01e      	beq.n	8003d96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d62:	461a      	mov	r2, r3
 8003d64:	f107 0310 	add.w	r3, r7, #16
 8003d68:	6812      	ldr	r2, [r2, #0]
 8003d6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	fa22 f303 	lsr.w	r3, r2, r3
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	701a      	strb	r2, [r3, #0]
      i++;
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	3301      	adds	r3, #1
 8003d82:	623b      	str	r3, [r7, #32]
      pDest++;
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	3301      	adds	r3, #1
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003d8a:	8bfb      	ldrh	r3, [r7, #30]
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003d90:	8bfb      	ldrh	r3, [r7, #30]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1ea      	bne.n	8003d6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	372c      	adds	r7, #44	; 0x2c
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4013      	ands	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
	...

08003de8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	3301      	adds	r3, #1
 8003df8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4a13      	ldr	r2, [pc, #76]	; (8003e4c <USB_CoreReset+0x64>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d901      	bls.n	8003e06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e01b      	b.n	8003e3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	daf2      	bge.n	8003df4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f043 0201 	orr.w	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	3301      	adds	r3, #1
 8003e22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4a09      	ldr	r2, [pc, #36]	; (8003e4c <USB_CoreReset+0x64>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d901      	bls.n	8003e30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e006      	b.n	8003e3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d0f0      	beq.n	8003e1e <USB_CoreReset+0x36>

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	00030d40 	.word	0x00030d40

08003e50 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e50:	b084      	sub	sp, #16
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b086      	sub	sp, #24
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003e5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e70:	461a      	mov	r2, r3
 8003e72:	2300      	movs	r3, #0
 8003e74:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e86:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e92:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d018      	beq.n	8003ed8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d10a      	bne.n	8003ec2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003eba:	f043 0304 	orr.w	r3, r3, #4
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	e014      	b.n	8003eec <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ed0:	f023 0304 	bic.w	r3, r3, #4
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	e009      	b.n	8003eec <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ee6:	f023 0304 	bic.w	r3, r3, #4
 8003eea:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003eec:	2110      	movs	r1, #16
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff fe5e 	bl	8003bb0 <USB_FlushTxFifo>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7ff fe8a 	bl	8003c18 <USB_FlushRxFifo>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	e015      	b.n	8003f40 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f20:	461a      	mov	r2, r3
 8003f22:	f04f 33ff 	mov.w	r3, #4294967295
 8003f26:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f34:	461a      	mov	r2, r3
 8003f36:	2300      	movs	r3, #0
 8003f38:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	613b      	str	r3, [r7, #16]
 8003f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d3e5      	bcc.n	8003f14 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f04f 32ff 	mov.w	r2, #4294967295
 8003f54:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00b      	beq.n	8003f7a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f68:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a13      	ldr	r2, [pc, #76]	; (8003fbc <USB_HostInit+0x16c>)
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a13      	ldr	r2, [pc, #76]	; (8003fc0 <USB_HostInit+0x170>)
 8003f74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003f78:	e009      	b.n	8003f8e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2280      	movs	r2, #128	; 0x80
 8003f7e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a10      	ldr	r2, [pc, #64]	; (8003fc4 <USB_HostInit+0x174>)
 8003f84:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a0f      	ldr	r2, [pc, #60]	; (8003fc8 <USB_HostInit+0x178>)
 8003f8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d105      	bne.n	8003fa0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	f043 0210 	orr.w	r2, r3, #16
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699a      	ldr	r2, [r3, #24]
 8003fa4:	4b09      	ldr	r3, [pc, #36]	; (8003fcc <USB_HostInit+0x17c>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8003fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fb8:	b004      	add	sp, #16
 8003fba:	4770      	bx	lr
 8003fbc:	01000200 	.word	0x01000200
 8003fc0:	00e00300 	.word	0x00e00300
 8003fc4:	00600080 	.word	0x00600080
 8003fc8:	004000e0 	.word	0x004000e0
 8003fcc:	a3200008 	.word	0xa3200008

08003fd0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003fee:	f023 0303 	bic.w	r3, r3, #3
 8003ff2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	78fb      	ldrb	r3, [r7, #3]
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	68f9      	ldr	r1, [r7, #12]
 8004004:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004008:	4313      	orrs	r3, r2
 800400a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800400c:	78fb      	ldrb	r3, [r7, #3]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d107      	bne.n	8004022 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004018:	461a      	mov	r2, r3
 800401a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800401e:	6053      	str	r3, [r2, #4]
 8004020:	e009      	b.n	8004036 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d106      	bne.n	8004036 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800402e:	461a      	mov	r2, r3
 8004030:	f241 7370 	movw	r3, #6000	; 0x1770
 8004034:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004064:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800406e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004072:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004074:	2064      	movs	r0, #100	; 0x64
 8004076:	f7fc fded 	bl	8000c54 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004082:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004086:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004088:	200a      	movs	r0, #10
 800408a:	f7fc fde3 	bl	8000c54 <HAL_Delay>

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80040bc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d109      	bne.n	80040dc <USB_DriveVbus+0x44>
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d106      	bne.n	80040dc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80040d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040da:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e6:	d109      	bne.n	80040fc <USB_DriveVbus+0x64>
 80040e8:	78fb      	ldrb	r3, [r7, #3]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80040f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040fa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800410a:	b480      	push	{r7}
 800410c:	b085      	sub	sp, #20
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	0c5b      	lsrs	r3, r3, #17
 8004128:	f003 0303 	and.w	r3, r3, #3
}
 800412c:	4618      	mov	r0, r3
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	b29b      	uxth	r3, r3
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
	...

0800415c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	4608      	mov	r0, r1
 8004166:	4611      	mov	r1, r2
 8004168:	461a      	mov	r2, r3
 800416a:	4603      	mov	r3, r0
 800416c:	70fb      	strb	r3, [r7, #3]
 800416e:	460b      	mov	r3, r1
 8004170:	70bb      	strb	r3, [r7, #2]
 8004172:	4613      	mov	r3, r2
 8004174:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800417e:	78fb      	ldrb	r3, [r7, #3]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	4413      	add	r3, r2
 8004186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800418a:	461a      	mov	r2, r3
 800418c:	f04f 33ff 	mov.w	r3, #4294967295
 8004190:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004192:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004196:	2b03      	cmp	r3, #3
 8004198:	d87e      	bhi.n	8004298 <USB_HC_Init+0x13c>
 800419a:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <USB_HC_Init+0x44>)
 800419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a0:	080041b1 	.word	0x080041b1
 80041a4:	0800425b 	.word	0x0800425b
 80041a8:	080041b1 	.word	0x080041b1
 80041ac:	0800421d 	.word	0x0800421d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80041b0:	78fb      	ldrb	r3, [r7, #3]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041bc:	461a      	mov	r2, r3
 80041be:	f240 439d 	movw	r3, #1181	; 0x49d
 80041c2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80041c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	da10      	bge.n	80041ee <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	78fa      	ldrb	r2, [r7, #3]
 80041dc:	0151      	lsls	r1, r2, #5
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	440a      	add	r2, r1
 80041e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ea:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80041ec:	e057      	b.n	800429e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d051      	beq.n	800429e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	4413      	add	r3, r2
 8004202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	78fa      	ldrb	r2, [r7, #3]
 800420a:	0151      	lsls	r1, r2, #5
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	440a      	add	r2, r1
 8004210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004214:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004218:	60d3      	str	r3, [r2, #12]
      break;
 800421a:	e040      	b.n	800429e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800421c:	78fb      	ldrb	r3, [r7, #3]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4413      	add	r3, r2
 8004224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004228:	461a      	mov	r2, r3
 800422a:	f240 639d 	movw	r3, #1693	; 0x69d
 800422e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004230:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004234:	2b00      	cmp	r3, #0
 8004236:	da34      	bge.n	80042a2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004238:	78fb      	ldrb	r3, [r7, #3]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4413      	add	r3, r2
 8004240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	78fa      	ldrb	r2, [r7, #3]
 8004248:	0151      	lsls	r1, r2, #5
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	440a      	add	r2, r1
 800424e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004256:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004258:	e023      	b.n	80042a2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	4413      	add	r3, r2
 8004262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004266:	461a      	mov	r2, r3
 8004268:	f240 2325 	movw	r3, #549	; 0x225
 800426c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800426e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004272:	2b00      	cmp	r3, #0
 8004274:	da17      	bge.n	80042a6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004276:	78fb      	ldrb	r3, [r7, #3]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4413      	add	r3, r2
 800427e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	0151      	lsls	r1, r2, #5
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	440a      	add	r2, r1
 800428c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004290:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004294:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004296:	e006      	b.n	80042a6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	77fb      	strb	r3, [r7, #31]
      break;
 800429c:	e004      	b.n	80042a8 <USB_HC_Init+0x14c>
      break;
 800429e:	bf00      	nop
 80042a0:	e002      	b.n	80042a8 <USB_HC_Init+0x14c>
      break;
 80042a2:	bf00      	nop
 80042a4:	e000      	b.n	80042a8 <USB_HC_Init+0x14c>
      break;
 80042a6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	78fa      	ldrb	r2, [r7, #3]
 80042b8:	0151      	lsls	r1, r2, #5
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	440a      	add	r2, r1
 80042be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042c2:	f043 0302 	orr.w	r3, r3, #2
 80042c6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042ce:	699a      	ldr	r2, [r3, #24]
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	2101      	movs	r1, #1
 80042d8:	fa01 f303 	lsl.w	r3, r1, r3
 80042dc:	6939      	ldr	r1, [r7, #16]
 80042de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80042e2:	4313      	orrs	r3, r2
 80042e4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80042f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	da03      	bge.n	8004302 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80042fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042fe:	61bb      	str	r3, [r7, #24]
 8004300:	e001      	b.n	8004306 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004302:	2300      	movs	r3, #0
 8004304:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff feff 	bl	800410a <USB_GetHostSpeed>
 800430c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800430e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004312:	2b02      	cmp	r3, #2
 8004314:	d106      	bne.n	8004324 <USB_HC_Init+0x1c8>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d003      	beq.n	8004324 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800431c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	e001      	b.n	8004328 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004328:	787b      	ldrb	r3, [r7, #1]
 800432a:	059b      	lsls	r3, r3, #22
 800432c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004330:	78bb      	ldrb	r3, [r7, #2]
 8004332:	02db      	lsls	r3, r3, #11
 8004334:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004338:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800433a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800433e:	049b      	lsls	r3, r3, #18
 8004340:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004344:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004346:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004348:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800434c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004352:	78fb      	ldrb	r3, [r7, #3]
 8004354:	0159      	lsls	r1, r3, #5
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	440b      	add	r3, r1
 800435a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004364:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004366:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800436a:	2b03      	cmp	r3, #3
 800436c:	d003      	beq.n	8004376 <USB_HC_Init+0x21a>
 800436e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004372:	2b01      	cmp	r3, #1
 8004374:	d10f      	bne.n	8004396 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004376:	78fb      	ldrb	r3, [r7, #3]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4413      	add	r3, r2
 800437e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	78fa      	ldrb	r2, [r7, #3]
 8004386:	0151      	lsls	r1, r2, #5
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	440a      	add	r2, r1
 800438c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004390:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004394:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004396:	7ffb      	ldrb	r3, [r7, #31]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3720      	adds	r7, #32
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08c      	sub	sp, #48	; 0x30
 80043a4:	af02      	add	r7, sp, #8
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	4613      	mov	r3, r2
 80043ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	785b      	ldrb	r3, [r3, #1]
 80043b6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80043b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043bc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d02d      	beq.n	8004426 <USB_HC_StartXfer+0x86>
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	791b      	ldrb	r3, [r3, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d129      	bne.n	8004426 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d117      	bne.n	8004408 <USB_HC_StartXfer+0x68>
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	79db      	ldrb	r3, [r3, #7]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <USB_HC_StartXfer+0x48>
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	79db      	ldrb	r3, [r3, #7]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d10f      	bne.n	8004408 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	69fa      	ldr	r2, [r7, #28]
 80043f8:	0151      	lsls	r1, r2, #5
 80043fa:	6a3a      	ldr	r2, [r7, #32]
 80043fc:	440a      	add	r2, r1
 80043fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004406:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004408:	79fb      	ldrb	r3, [r7, #7]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10b      	bne.n	8004426 <USB_HC_StartXfer+0x86>
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	795b      	ldrb	r3, [r3, #5]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d107      	bne.n	8004426 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	785b      	ldrb	r3, [r3, #1]
 800441a:	4619      	mov	r1, r3
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 fa0f 	bl	8004840 <USB_DoPing>
      return HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	e0f8      	b.n	8004618 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d018      	beq.n	8004460 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	8912      	ldrh	r2, [r2, #8]
 8004436:	4413      	add	r3, r2
 8004438:	3b01      	subs	r3, #1
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	8912      	ldrh	r2, [r2, #8]
 800443e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004442:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004444:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004446:	8b7b      	ldrh	r3, [r7, #26]
 8004448:	429a      	cmp	r2, r3
 800444a:	d90b      	bls.n	8004464 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800444c:	8b7b      	ldrh	r3, [r7, #26]
 800444e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004450:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	8912      	ldrh	r2, [r2, #8]
 8004456:	fb03 f202 	mul.w	r2, r3, r2
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	611a      	str	r2, [r3, #16]
 800445e:	e001      	b.n	8004464 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004460:	2301      	movs	r3, #1
 8004462:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	78db      	ldrb	r3, [r3, #3]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d007      	beq.n	800447c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800446c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	8912      	ldrh	r2, [r2, #8]
 8004472:	fb03 f202 	mul.w	r2, r3, r2
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	611a      	str	r2, [r3, #16]
 800447a:	e003      	b.n	8004484 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	695a      	ldr	r2, [r3, #20]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800448c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800448e:	04d9      	lsls	r1, r3, #19
 8004490:	4b63      	ldr	r3, [pc, #396]	; (8004620 <USB_HC_StartXfer+0x280>)
 8004492:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004494:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	7a9b      	ldrb	r3, [r3, #10]
 800449a:	075b      	lsls	r3, r3, #29
 800449c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80044a0:	69f9      	ldr	r1, [r7, #28]
 80044a2:	0148      	lsls	r0, r1, #5
 80044a4:	6a39      	ldr	r1, [r7, #32]
 80044a6:	4401      	add	r1, r0
 80044a8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80044ac:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80044ae:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	68d9      	ldr	r1, [r3, #12]
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c6:	460a      	mov	r2, r1
 80044c8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	bf0c      	ite	eq
 80044da:	2301      	moveq	r3, #1
 80044dc:	2300      	movne	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	0151      	lsls	r1, r2, #5
 80044f4:	6a3a      	ldr	r2, [r7, #32]
 80044f6:	440a      	add	r2, r1
 80044f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004500:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	4413      	add	r3, r2
 800450a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	7e7b      	ldrb	r3, [r7, #25]
 8004512:	075b      	lsls	r3, r3, #29
 8004514:	69f9      	ldr	r1, [r7, #28]
 8004516:	0148      	lsls	r0, r1, #5
 8004518:	6a39      	ldr	r1, [r7, #32]
 800451a:	4401      	add	r1, r0
 800451c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004520:	4313      	orrs	r3, r2
 8004522:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	4413      	add	r3, r2
 800452c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800453a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	78db      	ldrb	r3, [r3, #3]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d004      	beq.n	800454e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	e003      	b.n	8004556 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004554:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800455c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	4413      	add	r3, r2
 8004566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800456a:	461a      	mov	r2, r3
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	e04e      	b.n	8004618 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	78db      	ldrb	r3, [r3, #3]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d149      	bne.n	8004616 <USB_HC_StartXfer+0x276>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d045      	beq.n	8004616 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	79db      	ldrb	r3, [r3, #7]
 800458e:	2b03      	cmp	r3, #3
 8004590:	d830      	bhi.n	80045f4 <USB_HC_StartXfer+0x254>
 8004592:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <USB_HC_StartXfer+0x1f8>)
 8004594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004598:	080045a9 	.word	0x080045a9
 800459c:	080045cd 	.word	0x080045cd
 80045a0:	080045a9 	.word	0x080045a9
 80045a4:	080045cd 	.word	0x080045cd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	3303      	adds	r3, #3
 80045ae:	089b      	lsrs	r3, r3, #2
 80045b0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80045b2:	8afa      	ldrh	r2, [r7, #22]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d91c      	bls.n	80045f8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	f043 0220 	orr.w	r2, r3, #32
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	619a      	str	r2, [r3, #24]
        }
        break;
 80045ca:	e015      	b.n	80045f8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	3303      	adds	r3, #3
 80045d2:	089b      	lsrs	r3, r3, #2
 80045d4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80045d6:	8afa      	ldrh	r2, [r7, #22]
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d90a      	bls.n	80045fc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	619a      	str	r2, [r3, #24]
        }
        break;
 80045f2:	e003      	b.n	80045fc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80045f4:	bf00      	nop
 80045f6:	e002      	b.n	80045fe <USB_HC_StartXfer+0x25e>
        break;
 80045f8:	bf00      	nop
 80045fa:	e000      	b.n	80045fe <USB_HC_StartXfer+0x25e>
        break;
 80045fc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	68d9      	ldr	r1, [r3, #12]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	785a      	ldrb	r2, [r3, #1]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	b29b      	uxth	r3, r3
 800460c:	2000      	movs	r0, #0
 800460e:	9000      	str	r0, [sp, #0]
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f7ff fb31 	bl	8003c78 <USB_WritePacket>
  }

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3728      	adds	r7, #40	; 0x28
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	1ff80000 	.word	0x1ff80000

08004624 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	b29b      	uxth	r3, r3
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004646:	b480      	push	{r7}
 8004648:	b089      	sub	sp, #36	; 0x24
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	460b      	mov	r3, r1
 8004650:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004656:	78fb      	ldrb	r3, [r7, #3]
 8004658:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	4413      	add	r3, r2
 8004666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	0c9b      	lsrs	r3, r3, #18
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	4413      	add	r3, r2
 800467c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	0fdb      	lsrs	r3, r3, #31
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b20      	cmp	r3, #32
 8004694:	d104      	bne.n	80046a0 <USB_HC_Halt+0x5a>
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	e0c8      	b.n	8004832 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <USB_HC_Halt+0x66>
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d163      	bne.n	8004774 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	0151      	lsls	r1, r2, #5
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	440a      	add	r2, r1
 80046c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046ca:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f040 80ab 	bne.w	8004830 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d133      	bne.n	800474e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	0151      	lsls	r1, r2, #5
 80046f8:	69fa      	ldr	r2, [r7, #28]
 80046fa:	440a      	add	r2, r1
 80046fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004700:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004704:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	4413      	add	r3, r2
 800470e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	0151      	lsls	r1, r2, #5
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	440a      	add	r2, r1
 800471c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004720:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004724:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	3301      	adds	r3, #1
 800472a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004732:	d81d      	bhi.n	8004770 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	4413      	add	r3, r2
 800473c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004746:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800474a:	d0ec      	beq.n	8004726 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800474c:	e070      	b.n	8004830 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	4413      	add	r3, r2
 8004756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	0151      	lsls	r1, r2, #5
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	440a      	add	r2, r1
 8004764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004768:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800476c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800476e:	e05f      	b.n	8004830 <USB_HC_Halt+0x1ea>
            break;
 8004770:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004772:	e05d      	b.n	8004830 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	4413      	add	r3, r2
 800477c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	0151      	lsls	r1, r2, #5
 8004786:	69fa      	ldr	r2, [r7, #28]
 8004788:	440a      	add	r2, r1
 800478a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800478e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004792:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d133      	bne.n	800480c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	0151      	lsls	r1, r2, #5
 80047b6:	69fa      	ldr	r2, [r7, #28]
 80047b8:	440a      	add	r2, r1
 80047ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	0151      	lsls	r1, r2, #5
 80047d6:	69fa      	ldr	r2, [r7, #28]
 80047d8:	440a      	add	r2, r1
 80047da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047e2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	3301      	adds	r3, #1
 80047e8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047f0:	d81d      	bhi.n	800482e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004804:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004808:	d0ec      	beq.n	80047e4 <USB_HC_Halt+0x19e>
 800480a:	e011      	b.n	8004830 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	4413      	add	r3, r2
 8004814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	0151      	lsls	r1, r2, #5
 800481e:	69fa      	ldr	r2, [r7, #28]
 8004820:	440a      	add	r2, r1
 8004822:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004826:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	e000      	b.n	8004830 <USB_HC_Halt+0x1ea>
          break;
 800482e:	bf00      	nop
    }
  }

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3724      	adds	r7, #36	; 0x24
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
	...

08004840 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004854:	2301      	movs	r3, #1
 8004856:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	04da      	lsls	r2, r3, #19
 800485c:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <USB_DoPing+0x74>)
 800485e:	4013      	ands	r3, r2
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	0151      	lsls	r1, r2, #5
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	440a      	add	r2, r1
 8004868:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800486c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004870:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	4413      	add	r3, r2
 800487a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004888:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004890:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	4413      	add	r3, r2
 800489a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489e:	461a      	mov	r2, r3
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	371c      	adds	r7, #28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	1ff80000 	.word	0x1ff80000

080048b8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b088      	sub	sp, #32
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7ff f911 	bl	8003af4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048d2:	2110      	movs	r1, #16
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff f96b 	bl	8003bb0 <USB_FlushTxFifo>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7ff f997 	bl	8003c18 <USB_FlushRxFifo>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80048f4:	2300      	movs	r3, #0
 80048f6:	61bb      	str	r3, [r7, #24]
 80048f8:	e01f      	b.n	800493a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	4413      	add	r3, r2
 8004902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004910:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004918:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004920:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	4413      	add	r3, r2
 800492a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800492e:	461a      	mov	r2, r3
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	3301      	adds	r3, #1
 8004938:	61bb      	str	r3, [r7, #24]
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	2b0f      	cmp	r3, #15
 800493e:	d9dc      	bls.n	80048fa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004940:	2300      	movs	r3, #0
 8004942:	61bb      	str	r3, [r7, #24]
 8004944:	e034      	b.n	80049b0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	4413      	add	r3, r2
 800494e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800495c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004964:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800496c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	4413      	add	r3, r2
 8004976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497a:	461a      	mov	r2, r3
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	3301      	adds	r3, #1
 8004984:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800498c:	d80c      	bhi.n	80049a8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	4413      	add	r3, r2
 8004996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049a4:	d0ec      	beq.n	8004980 <USB_StopHost+0xc8>
 80049a6:	e000      	b.n	80049aa <USB_StopHost+0xf2>
        break;
 80049a8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	3301      	adds	r3, #1
 80049ae:	61bb      	str	r3, [r7, #24]
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	2b0f      	cmp	r3, #15
 80049b4:	d9c7      	bls.n	8004946 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049bc:	461a      	mov	r2, r3
 80049be:	f04f 33ff 	mov.w	r3, #4294967295
 80049c2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f04f 32ff 	mov.w	r2, #4294967295
 80049ca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff f880 	bl	8003ad2 <USB_EnableGlobalInt>

  return ret;
 80049d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3720      	adds	r7, #32
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80049dc:	b590      	push	{r4, r7, lr}
 80049de:	b08b      	sub	sp, #44	; 0x2c
 80049e0:	af04      	add	r7, sp, #16
 80049e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80049ee:	7919      	ldrb	r1, [r3, #4]
 80049f0:	23ff      	movs	r3, #255	; 0xff
 80049f2:	2201      	movs	r2, #1
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 ff1f 	bl	8005838 <USBH_FindInterface>
 80049fa:	4603      	mov	r3, r0
 80049fc:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80049fe:	7dbb      	ldrb	r3, [r7, #22]
 8004a00:	2bff      	cmp	r3, #255	; 0xff
 8004a02:	d002      	beq.n	8004a0a <USBH_HID_InterfaceInit+0x2e>
 8004a04:	7dbb      	ldrb	r3, [r7, #22]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d901      	bls.n	8004a0e <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e108      	b.n	8004c20 <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 8004a0e:	7dbb      	ldrb	r3, [r7, #22]
 8004a10:	4619      	mov	r1, r3
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fef4 	bl	8005800 <USBH_SelectInterface>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8004a1c:	7d7b      	ldrb	r3, [r7, #21]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 8004a22:	2302      	movs	r3, #2
 8004a24:	e0fc      	b.n	8004c20 <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8004a2c:	2034      	movs	r0, #52	; 0x34
 8004a2e:	f002 fd33 	bl	8007498 <malloc>
 8004a32:	4603      	mov	r3, r0
 8004a34:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 8004a46:	2302      	movs	r3, #2
 8004a48:	e0ea      	b.n	8004c20 <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8004a4a:	2234      	movs	r2, #52	; 0x34
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	6938      	ldr	r0, [r7, #16]
 8004a50:	f002 fef5 	bl	800783e <memset>

  HID_Handle->state = HID_ERROR;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	2207      	movs	r2, #7
 8004a58:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8004a5a:	7dbb      	ldrb	r3, [r7, #22]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	211a      	movs	r1, #26
 8004a60:	fb01 f303 	mul.w	r3, r1, r3
 8004a64:	4413      	add	r3, r2
 8004a66:	f203 3349 	addw	r3, r3, #841	; 0x349
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d103      	bne.n	8004a78 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	4a6d      	ldr	r2, [pc, #436]	; (8004c28 <USBH_HID_InterfaceInit+0x24c>)
 8004a74:	631a      	str	r2, [r3, #48]	; 0x30
 8004a76:	e010      	b.n	8004a9a <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8004a78:	7dbb      	ldrb	r3, [r7, #22]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	211a      	movs	r1, #26
 8004a7e:	fb01 f303 	mul.w	r3, r1, r3
 8004a82:	4413      	add	r3, r2
 8004a84:	f203 3349 	addw	r3, r3, #841	; 0x349
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d103      	bne.n	8004a96 <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	4a66      	ldr	r2, [pc, #408]	; (8004c2c <USBH_HID_InterfaceInit+0x250>)
 8004a92:	631a      	str	r2, [r3, #48]	; 0x30
 8004a94:	e001      	b.n	8004a9a <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 8004a96:	2302      	movs	r3, #2
 8004a98:	e0c2      	b.n	8004c20 <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004aa6:	7dbb      	ldrb	r3, [r7, #22]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	211a      	movs	r1, #26
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004ab6:	781a      	ldrb	r2, [r3, #0]
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004abc:	7dbb      	ldrb	r3, [r7, #22]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	211a      	movs	r1, #26
 8004ac2:	fb01 f303 	mul.w	r3, r1, r3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004acc:	881a      	ldrh	r2, [r3, #0]
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8004ad2:	7dbb      	ldrb	r3, [r7, #22]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	211a      	movs	r1, #26
 8004ad8:	fb01 f303 	mul.w	r3, r1, r3
 8004adc:	4413      	add	r3, r2
 8004ade:	f203 3352 	addw	r3, r3, #850	; 0x352
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	8b9b      	ldrh	r3, [r3, #28]
 8004aee:	2b09      	cmp	r3, #9
 8004af0:	d802      	bhi.n	8004af8 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	220a      	movs	r2, #10
 8004af6:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8004af8:	7dbb      	ldrb	r3, [r7, #22]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	211a      	movs	r1, #26
 8004afe:	fb01 f303 	mul.w	r3, r1, r3
 8004b02:	4413      	add	r3, r2
 8004b04:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	bf28      	it	cs
 8004b0e:	2302      	movcs	r3, #2
 8004b10:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8004b12:	2300      	movs	r3, #0
 8004b14:	75fb      	strb	r3, [r7, #23]
 8004b16:	e07d      	b.n	8004c14 <USBH_HID_InterfaceInit+0x238>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 8004b18:	7dbb      	ldrb	r3, [r7, #22]
 8004b1a:	7df9      	ldrb	r1, [r7, #23]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	3101      	adds	r1, #1
 8004b20:	00c9      	lsls	r1, r1, #3
 8004b22:	201a      	movs	r0, #26
 8004b24:	fb00 f303 	mul.w	r3, r0, r3
 8004b28:	440b      	add	r3, r1
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	b25b      	sxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	da35      	bge.n	8004ba4 <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8004b38:	7dbb      	ldrb	r3, [r7, #22]
 8004b3a:	7df9      	ldrb	r1, [r7, #23]
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	3101      	adds	r1, #1
 8004b40:	00c9      	lsls	r1, r1, #3
 8004b42:	201a      	movs	r0, #26
 8004b44:	fb00 f303 	mul.w	r3, r0, r3
 8004b48:	440b      	add	r3, r1
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004b50:	781a      	ldrb	r2, [r3, #0]
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	791b      	ldrb	r3, [r3, #4]
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f002 f964 	bl	8006e2a <USBH_AllocPipe>
 8004b62:	4603      	mov	r3, r0
 8004b64:	461a      	mov	r2, r3
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	7859      	ldrb	r1, [r3, #1]
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	7918      	ldrb	r0, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	8b12      	ldrh	r2, [r2, #24]
 8004b82:	9202      	str	r2, [sp, #8]
 8004b84:	2203      	movs	r2, #3
 8004b86:	9201      	str	r2, [sp, #4]
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	4623      	mov	r3, r4
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f002 f91c 	bl	8006dcc <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	785b      	ldrb	r3, [r3, #1]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f002 fc14 	bl	80073ca <USBH_LL_SetToggle>
 8004ba2:	e034      	b.n	8004c0e <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8004ba4:	7dbb      	ldrb	r3, [r7, #22]
 8004ba6:	7df9      	ldrb	r1, [r7, #23]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	3101      	adds	r1, #1
 8004bac:	00c9      	lsls	r1, r1, #3
 8004bae:	201a      	movs	r0, #26
 8004bb0:	fb00 f303 	mul.w	r3, r0, r3
 8004bb4:	440b      	add	r3, r1
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004bbc:	781a      	ldrb	r2, [r3, #0]
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	78db      	ldrb	r3, [r3, #3]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f002 f92e 	bl	8006e2a <USBH_AllocPipe>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	7819      	ldrb	r1, [r3, #0]
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	78d8      	ldrb	r0, [r3, #3]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	8b12      	ldrh	r2, [r2, #24]
 8004bee:	9202      	str	r2, [sp, #8]
 8004bf0:	2203      	movs	r2, #3
 8004bf2:	9201      	str	r2, [sp, #4]
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	4623      	mov	r3, r4
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f002 f8e6 	bl	8006dcc <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2200      	movs	r2, #0
 8004c06:	4619      	mov	r1, r3
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f002 fbde 	bl	80073ca <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
 8004c10:	3301      	adds	r3, #1
 8004c12:	75fb      	strb	r3, [r7, #23]
 8004c14:	7dfa      	ldrb	r2, [r7, #23]
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	f4ff af7d 	bcc.w	8004b18 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd90      	pop	{r4, r7, pc}
 8004c28:	080052d9 	.word	0x080052d9
 8004c2c:	080054c9 	.word	0x080054c9

08004c30 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	785b      	ldrb	r3, [r3, #1]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00e      	beq.n	8004c68 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	785b      	ldrb	r3, [r3, #1]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f002 f8da 	bl	8006e0a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	785b      	ldrb	r3, [r3, #1]
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f002 f905 	bl	8006e6c <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00e      	beq.n	8004c8e <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	4619      	mov	r1, r3
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f002 f8c7 	bl	8006e0a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	4619      	mov	r1, r3
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f002 f8f2 	bl	8006e6c <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00b      	beq.n	8004cb2 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f002 fc00 	bl	80074a8 <free>
    phost->pActiveClass->pData = 0U;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004cae:	2200      	movs	r2, #0
 8004cb0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	795b      	ldrb	r3, [r3, #5]
 8004cda:	2b05      	cmp	r3, #5
 8004cdc:	d860      	bhi.n	8004da0 <USBH_HID_ClassRequest+0xe4>
 8004cde:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <USBH_HID_ClassRequest+0x28>)
 8004ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce4:	08004cfd 	.word	0x08004cfd
 8004ce8:	08004da1 	.word	0x08004da1
 8004cec:	08004d17 	.word	0x08004d17
 8004cf0:	08004cfd 	.word	0x08004cfd
 8004cf4:	08004d41 	.word	0x08004d41
 8004cf8:	08004d6b 	.word	0x08004d6b
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	331c      	adds	r3, #28
 8004d06:	4619      	mov	r1, r3
 8004d08:	4610      	mov	r0, r2
 8004d0a:	f000 f9cd 	bl	80050a8 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2202      	movs	r2, #2
 8004d12:	715a      	strb	r2, [r3, #5]

      break;
 8004d14:	e04b      	b.n	8004dae <USBH_HID_ClassRequest+0xf2>
    case HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f930 	bl	8004f82 <USBH_HID_GetHIDReportDescriptor>
 8004d22:	4603      	mov	r3, r0
 8004d24:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8004d26:	7bbb      	ldrb	r3, [r7, #14]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d103      	bne.n	8004d34 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2204      	movs	r2, #4
 8004d30:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 8004d32:	e037      	b.n	8004da4 <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8004d34:	7bbb      	ldrb	r3, [r7, #14]
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d134      	bne.n	8004da4 <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8004d3e:	e031      	b.n	8004da4 <USBH_HID_ClassRequest+0xe8>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8004d40:	2200      	movs	r2, #0
 8004d42:	2100      	movs	r1, #0
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f935 	bl	8004fb4 <USBH_HID_SetIdle>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 8004d4e:	7bbb      	ldrb	r3, [r7, #14]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d103      	bne.n	8004d5c <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2205      	movs	r2, #5
 8004d58:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 8004d5a:	e025      	b.n	8004da8 <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8004d5c:	7bbb      	ldrb	r3, [r7, #14]
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d122      	bne.n	8004da8 <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2205      	movs	r2, #5
 8004d66:	715a      	strb	r2, [r3, #5]
      break;
 8004d68:	e01e      	b.n	8004da8 <USBH_HID_ClassRequest+0xec>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f975 	bl	800505c <USBH_HID_SetProtocol>
 8004d72:	4603      	mov	r3, r0
 8004d74:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8004d76:	7bbb      	ldrb	r3, [r7, #14]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10b      	bne.n	8004d94 <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004d88:	2102      	movs	r1, #2
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	4798      	blx	r3
        status = USBH_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 8004d92:	e00b      	b.n	8004dac <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8004d94:	7bbb      	ldrb	r3, [r7, #14]
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d108      	bne.n	8004dac <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8004d9e:	e005      	b.n	8004dac <USBH_HID_ClassRequest+0xf0>

    case HID_REQ_IDLE:
    default:
      break;
 8004da0:	bf00      	nop
 8004da2:	e004      	b.n	8004dae <USBH_HID_ClassRequest+0xf2>
      break;
 8004da4:	bf00      	nop
 8004da6:	e002      	b.n	8004dae <USBH_HID_ClassRequest+0xf2>
      break;
 8004da8:	bf00      	nop
 8004daa:	e000      	b.n	8004dae <USBH_HID_ClassRequest+0xf2>
      break;
 8004dac:	bf00      	nop
  }

  return status;
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b088      	sub	sp, #32
 8004dbc:	af02      	add	r7, sp, #8
 8004dbe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	789b      	ldrb	r3, [r3, #2]
 8004dd2:	2b06      	cmp	r3, #6
 8004dd4:	f200 80a9 	bhi.w	8004f2a <USBH_HID_Process+0x172>
 8004dd8:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <USBH_HID_Process+0x28>)
 8004dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dde:	bf00      	nop
 8004de0:	08004dfd 	.word	0x08004dfd
 8004de4:	08004e0d 	.word	0x08004e0d
 8004de8:	08004f2b 	.word	0x08004f2b
 8004dec:	08004f2b 	.word	0x08004f2b
 8004df0:	08004e7d 	.word	0x08004e7d
 8004df4:	08004e67 	.word	0x08004e67
 8004df8:	08004eab 	.word	0x08004eab
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	2201      	movs	r2, #1
 8004e08:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8004e0a:	e093      	b.n	8004f34 <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	695a      	ldr	r2, [r3, #20]
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	8b1b      	ldrh	r3, [r3, #24]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f8f0 	bl	8005004 <USBH_HID_GetReport>
 8004e24:	4603      	mov	r3, r0
 8004e26:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8004e28:	7dfb      	ldrb	r3, [r7, #23]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d103      	bne.n	8004e36 <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2205      	movs	r2, #5
 8004e32:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8004e34:	e07e      	b.n	8004f34 <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 8004e36:	7dfb      	ldrb	r3, [r7, #23]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d105      	bne.n	8004e48 <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	75fb      	strb	r3, [r7, #23]
      break;
 8004e46:	e075      	b.n	8004f34 <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 8004e48:	7dfb      	ldrb	r3, [r7, #23]
 8004e4a:	2b03      	cmp	r3, #3
 8004e4c:	d105      	bne.n	8004e5a <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	2205      	movs	r2, #5
 8004e52:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8004e54:	2300      	movs	r3, #0
 8004e56:	75fb      	strb	r3, [r7, #23]
      break;
 8004e58:	e06c      	b.n	8004f34 <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	2207      	movs	r2, #7
 8004e5e:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8004e60:	2302      	movs	r3, #2
 8004e62:	75fb      	strb	r3, [r7, #23]
      break;
 8004e64:	e066      	b.n	8004f34 <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d05c      	beq.n	8004f2e <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	2204      	movs	r2, #4
 8004e78:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8004e7a:	e058      	b.n	8004f2e <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	785b      	ldrb	r3, [r3, #1]
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f001 ff7f 	bl	8006d8e <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	2206      	movs	r2, #6
 8004e94:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 8004ea8:	e044      	b.n	8004f34 <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	785b      	ldrb	r3, [r3, #1]
 8004eae:	4619      	mov	r1, r3
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f002 fa69 	bl	8007388 <USBH_LL_GetURBState>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d120      	bne.n	8004efe <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	785b      	ldrb	r3, [r3, #1]
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f002 f9ce 	bl	8007264 <USBH_LL_GetLastXferSize>
 8004ec8:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d12e      	bne.n	8004f32 <USBH_HID_Process+0x17a>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d02b      	beq.n	8004f32 <USBH_HID_Process+0x17a>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f103 0008 	add.w	r0, r3, #8
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	6959      	ldr	r1, [r3, #20]
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	8b1b      	ldrh	r3, [r3, #24]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	f000 f9a0 	bl	800522e <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fb fbea 	bl	80006d0 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 8004efc:	e019      	b.n	8004f32 <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	785b      	ldrb	r3, [r3, #1]
 8004f02:	4619      	mov	r1, r3
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f002 fa3f 	bl	8007388 <USBH_LL_GetURBState>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b05      	cmp	r3, #5
 8004f0e:	d110      	bne.n	8004f32 <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	7e9b      	ldrb	r3, [r3, #26]
 8004f14:	4619      	mov	r1, r3
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f001 fa5b 	bl	80063d2 <USBH_ClrFeature>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d107      	bne.n	8004f32 <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	2204      	movs	r2, #4
 8004f26:	709a      	strb	r2, [r3, #2]
      break;
 8004f28:	e003      	b.n	8004f32 <USBH_HID_Process+0x17a>

    default:
      break;
 8004f2a:	bf00      	nop
 8004f2c:	e002      	b.n	8004f34 <USBH_HID_Process+0x17c>
      break;
 8004f2e:	bf00      	nop
 8004f30:	e000      	b.n	8004f34 <USBH_HID_Process+0x17c>
      break;
 8004f32:	bf00      	nop
  }

  return status;
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop

08004f40 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	789b      	ldrb	r3, [r3, #2]
 8004f56:	2b06      	cmp	r3, #6
 8004f58:	d10c      	bne.n	8004f74 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	8b92      	ldrh	r2, [r2, #28]
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d302      	bcc.n	8004f74 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2204      	movs	r2, #4
 8004f72:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b086      	sub	sp, #24
 8004f86:	af02      	add	r7, sp, #8
 8004f88:	6078      	str	r0, [r7, #4]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8004f94:	887b      	ldrh	r3, [r7, #2]
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f001 f976 	bl	8006292 <USBH_GetDescriptor>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	70fb      	strb	r3, [r7, #3]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2221      	movs	r2, #33	; 0x21
 8004fc8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	220a      	movs	r2, #10
 8004fce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	021b      	lsls	r3, r3, #8
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	78bb      	ldrb	r3, [r7, #2]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f001 fcbb 	bl	8006970 <USBH_CtlReq>
 8004ffa:	4603      	mov	r3, r0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	607b      	str	r3, [r7, #4]
 800500e:	460b      	mov	r3, r1
 8005010:	72fb      	strb	r3, [r7, #11]
 8005012:	4613      	mov	r3, r2
 8005014:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	22a1      	movs	r2, #161	; 0xa1
 800501a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2201      	movs	r2, #1
 8005020:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 8005022:	7afb      	ldrb	r3, [r7, #11]
 8005024:	b29b      	uxth	r3, r3
 8005026:	021b      	lsls	r3, r3, #8
 8005028:	b29a      	uxth	r2, r3
 800502a:	7abb      	ldrb	r3, [r7, #10]
 800502c:	b29b      	uxth	r3, r3
 800502e:	4313      	orrs	r3, r2
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800503c:	7e3b      	ldrb	r3, [r7, #24]
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8005044:	7e3b      	ldrb	r3, [r7, #24]
 8005046:	b29b      	uxth	r3, r3
 8005048:	461a      	mov	r2, r3
 800504a:	6879      	ldr	r1, [r7, #4]
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f001 fc8f 	bl	8006970 <USBH_CtlReq>
 8005052:	4603      	mov	r3, r0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2221      	movs	r2, #33	; 0x21
 800506c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	220b      	movs	r2, #11
 8005072:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 8005074:	78fb      	ldrb	r3, [r7, #3]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	825a      	strh	r2, [r3, #18]
 8005080:	e002      	b.n	8005088 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8005094:	2200      	movs	r2, #0
 8005096:	2100      	movs	r1, #0
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f001 fc69 	bl	8006970 <USBH_CtlReq>
 800509e:	4603      	mov	r3, r0

}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	3302      	adds	r3, #2
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	b29a      	uxth	r2, r3
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	3303      	adds	r3, #3
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	4313      	orrs	r3, r2
 80050cc:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 80050ce:	897b      	ldrh	r3, [r7, #10]
 80050d0:	2b09      	cmp	r3, #9
 80050d2:	d943      	bls.n	800515c <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 80050d4:	2309      	movs	r3, #9
 80050d6:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 80050d8:	e03c      	b.n	8005154 <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 80050da:	f107 0308 	add.w	r3, r7, #8
 80050de:	4619      	mov	r1, r3
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f001 fc2a 	bl	800693a <USBH_GetNextDesc>
 80050e6:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	785b      	ldrb	r3, [r3, #1]
 80050ec:	2b21      	cmp	r3, #33	; 0x21
 80050ee:	d131      	bne.n	8005154 <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	781a      	ldrb	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	785a      	ldrb	r2, [r3, #1]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	3302      	adds	r3, #2
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	3303      	adds	r3, #3
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	b29b      	uxth	r3, r3
 8005110:	021b      	lsls	r3, r3, #8
 8005112:	b29b      	uxth	r3, r3
 8005114:	4313      	orrs	r3, r2
 8005116:	b29a      	uxth	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	791a      	ldrb	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	795a      	ldrb	r2, [r3, #5]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	799a      	ldrb	r2, [r3, #6]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	3307      	adds	r3, #7
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3308      	adds	r3, #8
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	b29b      	uxth	r3, r3
 8005144:	021b      	lsls	r3, r3, #8
 8005146:	b29b      	uxth	r3, r3
 8005148:	4313      	orrs	r3, r2
 800514a:	b29a      	uxth	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	811a      	strh	r2, [r3, #8]
        break;
 8005150:	bf00      	nop
      }
    }
  }
}
 8005152:	e003      	b.n	800515c <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 8005154:	893b      	ldrh	r3, [r7, #8]
 8005156:	897a      	ldrh	r2, [r7, #10]
 8005158:	429a      	cmp	r2, r3
 800515a:	d8be      	bhi.n	80050da <USBH_HID_ParseHIDDesc+0x32>
}
 800515c:	bf00      	nop
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	4613      	mov	r3, r2
 8005170:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	729a      	strb	r2, [r3, #10]
  f->size = size;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	88fa      	ldrh	r2, [r7, #6]
 8005188:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	601a      	str	r2, [r3, #0]
}
 8005190:	bf00      	nop
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	4613      	mov	r3, r2
 80051a8:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	7a9b      	ldrb	r3, [r3, #10]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d131      	bne.n	800521a <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2201      	movs	r2, #1
 80051ba:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 80051bc:	2300      	movs	r3, #0
 80051be:	82fb      	strh	r3, [r7, #22]
 80051c0:	e027      	b.n	8005212 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	88da      	ldrh	r2, [r3, #6]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	889b      	ldrh	r3, [r3, #4]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d019      	beq.n	8005202 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	88d2      	ldrh	r2, [r2, #6]
 80051d6:	441a      	add	r2, r3
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1c59      	adds	r1, r3, #1
 80051dc:	6139      	str	r1, [r7, #16]
 80051de:	7812      	ldrb	r2, [r2, #0]
 80051e0:	701a      	strb	r2, [r3, #0]
        f->tail++;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	88db      	ldrh	r3, [r3, #6]
 80051e6:	3301      	adds	r3, #1
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	88da      	ldrh	r2, [r3, #6]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	891b      	ldrh	r3, [r3, #8]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d108      	bne.n	800520c <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	80da      	strh	r2, [r3, #6]
 8005200:	e004      	b.n	800520c <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	729a      	strb	r2, [r3, #10]
        return i;
 8005208:	8afb      	ldrh	r3, [r7, #22]
 800520a:	e00a      	b.n	8005222 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 800520c:	8afb      	ldrh	r3, [r7, #22]
 800520e:	3301      	adds	r3, #1
 8005210:	82fb      	strh	r3, [r7, #22]
 8005212:	8afa      	ldrh	r2, [r7, #22]
 8005214:	88fb      	ldrh	r3, [r7, #6]
 8005216:	429a      	cmp	r2, r3
 8005218:	d3d3      	bcc.n	80051c2 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8005220:	88fb      	ldrh	r3, [r7, #6]
}
 8005222:	4618      	mov	r0, r3
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800522e:	b480      	push	{r7}
 8005230:	b087      	sub	sp, #28
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	4613      	mov	r3, r2
 800523a:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	7a9b      	ldrb	r3, [r3, #10]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d13c      	bne.n	80052c2 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2201      	movs	r2, #1
 800524c:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800524e:	2300      	movs	r3, #0
 8005250:	82fb      	strh	r3, [r7, #22]
 8005252:	e032      	b.n	80052ba <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	889b      	ldrh	r3, [r3, #4]
 8005258:	3301      	adds	r3, #1
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	88d2      	ldrh	r2, [r2, #6]
 800525e:	4293      	cmp	r3, r2
 8005260:	d00a      	beq.n	8005278 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	889b      	ldrh	r3, [r3, #4]
 8005266:	3301      	adds	r3, #1
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 800526c:	4293      	cmp	r3, r2
 800526e:	d108      	bne.n	8005282 <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	88db      	ldrh	r3, [r3, #6]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d104      	bne.n	8005282 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	729a      	strb	r2, [r3, #10]
        return i;
 800527e:	8afb      	ldrh	r3, [r7, #22]
 8005280:	e023      	b.n	80052ca <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	613a      	str	r2, [r7, #16]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	6812      	ldr	r2, [r2, #0]
 800528c:	68f9      	ldr	r1, [r7, #12]
 800528e:	8889      	ldrh	r1, [r1, #4]
 8005290:	440a      	add	r2, r1
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	7013      	strb	r3, [r2, #0]
        f->head++;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	889b      	ldrh	r3, [r3, #4]
 800529a:	3301      	adds	r3, #1
 800529c:	b29a      	uxth	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	889a      	ldrh	r2, [r3, #4]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	891b      	ldrh	r3, [r3, #8]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d102      	bne.n	80052b4 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 80052b4:	8afb      	ldrh	r3, [r7, #22]
 80052b6:	3301      	adds	r3, #1
 80052b8:	82fb      	strh	r3, [r7, #22]
 80052ba:	8afa      	ldrh	r2, [r7, #22]
 80052bc:	88fb      	ldrh	r3, [r7, #6]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d3c8      	bcc.n	8005254 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	729a      	strb	r2, [r3, #10]

  return nbytes;
 80052c8:	88fb      	ldrh	r3, [r7, #6]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
	...

080052d8 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 80052ea:	4b22      	ldr	r3, [pc, #136]	; (8005374 <USBH_HID_KeybdInit+0x9c>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 80052f0:	4b20      	ldr	r3, [pc, #128]	; (8005374 <USBH_HID_KeybdInit+0x9c>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 80052f6:	4b1f      	ldr	r3, [pc, #124]	; (8005374 <USBH_HID_KeybdInit+0x9c>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 80052fc:	4b1d      	ldr	r3, [pc, #116]	; (8005374 <USBH_HID_KeybdInit+0x9c>)
 80052fe:	2200      	movs	r2, #0
 8005300:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 8005302:	4b1c      	ldr	r3, [pc, #112]	; (8005374 <USBH_HID_KeybdInit+0x9c>)
 8005304:	2200      	movs	r2, #0
 8005306:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 8005308:	4b1a      	ldr	r3, [pc, #104]	; (8005374 <USBH_HID_KeybdInit+0x9c>)
 800530a:	2200      	movs	r2, #0
 800530c:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 800530e:	4b19      	ldr	r3, [pc, #100]	; (8005374 <USBH_HID_KeybdInit+0x9c>)
 8005310:	2200      	movs	r2, #0
 8005312:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 8005314:	4b17      	ldr	r3, [pc, #92]	; (8005374 <USBH_HID_KeybdInit+0x9c>)
 8005316:	2200      	movs	r2, #0
 8005318:	721a      	strb	r2, [r3, #8]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800531a:	2300      	movs	r3, #0
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	e00c      	b.n	800533a <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 8005320:	4a15      	ldr	r2, [pc, #84]	; (8005378 <USBH_HID_KeybdInit+0xa0>)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2100      	movs	r1, #0
 8005326:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 800532a:	4a14      	ldr	r2, [pc, #80]	; (800537c <USBH_HID_KeybdInit+0xa4>)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2100      	movs	r1, #0
 8005330:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	3301      	adds	r3, #1
 8005338:	60fb      	str	r3, [r7, #12]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d9ef      	bls.n	8005320 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	8b1b      	ldrh	r3, [r3, #24]
 8005344:	2b08      	cmp	r3, #8
 8005346:	d902      	bls.n	800534e <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2208      	movs	r2, #8
 800534c:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	4a0a      	ldr	r2, [pc, #40]	; (800537c <USBH_HID_KeybdInit+0xa4>)
 8005352:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f103 0008 	add.w	r0, r3, #8
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005360:	2250      	movs	r2, #80	; 0x50
 8005362:	4619      	mov	r1, r3
 8005364:	f7ff fefe 	bl	8005164 <USBH_HID_FifoInit>

  return USBH_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20000148 	.word	0x20000148
 8005378:	20000160 	.word	0x20000160
 800537c:	20000158 	.word	0x20000158

08005380 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f80d 	bl	80053a8 <USBH_HID_KeybdDecode>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 8005394:	4b03      	ldr	r3, [pc, #12]	; (80053a4 <USBH_HID_GetKeybdInfo+0x24>)
 8005396:	e000      	b.n	800539a <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 8005398:	2300      	movs	r3, #0
  }
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20000148 	.word	0x20000148

080053a8 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	60bb      	str	r3, [r7, #8]
  if (HID_Handle->length == 0U)
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	8b1b      	ldrh	r3, [r3, #24]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 80053c2:	2302      	movs	r3, #2
 80053c4:	e066      	b.n	8005494 <USBH_HID_KeybdDecode+0xec>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f103 0008 	add.w	r0, r3, #8
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	8b1b      	ldrh	r3, [r3, #24]
 80053d0:	461a      	mov	r2, r3
 80053d2:	4932      	ldr	r1, [pc, #200]	; (800549c <USBH_HID_KeybdDecode+0xf4>)
 80053d4:	f7ff fee2 	bl	800519c <USBH_HID_FifoRead>
 80053d8:	4603      	mov	r3, r0
 80053da:	461a      	mov	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	8b1b      	ldrh	r3, [r3, #24]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d156      	bne.n	8005492 <USBH_HID_KeybdDecode+0xea>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 80053e4:	2100      	movs	r1, #0
 80053e6:	482e      	ldr	r0, [pc, #184]	; (80054a0 <USBH_HID_KeybdDecode+0xf8>)
 80053e8:	f000 f8b8 	bl	800555c <HID_ReadItem>
 80053ec:	4603      	mov	r3, r0
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	4b2c      	ldr	r3, [pc, #176]	; (80054a4 <USBH_HID_KeybdDecode+0xfc>)
 80053f2:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 80053f4:	2100      	movs	r1, #0
 80053f6:	482c      	ldr	r0, [pc, #176]	; (80054a8 <USBH_HID_KeybdDecode+0x100>)
 80053f8:	f000 f8b0 	bl	800555c <HID_ReadItem>
 80053fc:	4603      	mov	r3, r0
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	4b28      	ldr	r3, [pc, #160]	; (80054a4 <USBH_HID_KeybdDecode+0xfc>)
 8005402:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 8005404:	2100      	movs	r1, #0
 8005406:	4829      	ldr	r0, [pc, #164]	; (80054ac <USBH_HID_KeybdDecode+0x104>)
 8005408:	f000 f8a8 	bl	800555c <HID_ReadItem>
 800540c:	4603      	mov	r3, r0
 800540e:	b2da      	uxtb	r2, r3
 8005410:	4b24      	ldr	r3, [pc, #144]	; (80054a4 <USBH_HID_KeybdDecode+0xfc>)
 8005412:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 8005414:	2100      	movs	r1, #0
 8005416:	4826      	ldr	r0, [pc, #152]	; (80054b0 <USBH_HID_KeybdDecode+0x108>)
 8005418:	f000 f8a0 	bl	800555c <HID_ReadItem>
 800541c:	4603      	mov	r3, r0
 800541e:	b2da      	uxtb	r2, r3
 8005420:	4b20      	ldr	r3, [pc, #128]	; (80054a4 <USBH_HID_KeybdDecode+0xfc>)
 8005422:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 8005424:	2100      	movs	r1, #0
 8005426:	4823      	ldr	r0, [pc, #140]	; (80054b4 <USBH_HID_KeybdDecode+0x10c>)
 8005428:	f000 f898 	bl	800555c <HID_ReadItem>
 800542c:	4603      	mov	r3, r0
 800542e:	b2da      	uxtb	r2, r3
 8005430:	4b1c      	ldr	r3, [pc, #112]	; (80054a4 <USBH_HID_KeybdDecode+0xfc>)
 8005432:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 8005434:	2100      	movs	r1, #0
 8005436:	4820      	ldr	r0, [pc, #128]	; (80054b8 <USBH_HID_KeybdDecode+0x110>)
 8005438:	f000 f890 	bl	800555c <HID_ReadItem>
 800543c:	4603      	mov	r3, r0
 800543e:	b2da      	uxtb	r2, r3
 8005440:	4b18      	ldr	r3, [pc, #96]	; (80054a4 <USBH_HID_KeybdDecode+0xfc>)
 8005442:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 8005444:	2100      	movs	r1, #0
 8005446:	481d      	ldr	r0, [pc, #116]	; (80054bc <USBH_HID_KeybdDecode+0x114>)
 8005448:	f000 f888 	bl	800555c <HID_ReadItem>
 800544c:	4603      	mov	r3, r0
 800544e:	b2da      	uxtb	r2, r3
 8005450:	4b14      	ldr	r3, [pc, #80]	; (80054a4 <USBH_HID_KeybdDecode+0xfc>)
 8005452:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 8005454:	2100      	movs	r1, #0
 8005456:	481a      	ldr	r0, [pc, #104]	; (80054c0 <USBH_HID_KeybdDecode+0x118>)
 8005458:	f000 f880 	bl	800555c <HID_ReadItem>
 800545c:	4603      	mov	r3, r0
 800545e:	b2da      	uxtb	r2, r3
 8005460:	4b10      	ldr	r3, [pc, #64]	; (80054a4 <USBH_HID_KeybdDecode+0xfc>)
 8005462:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 8005464:	2300      	movs	r3, #0
 8005466:	73fb      	strb	r3, [r7, #15]
 8005468:	e00e      	b.n	8005488 <USBH_HID_KeybdDecode+0xe0>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	4619      	mov	r1, r3
 800546e:	4815      	ldr	r0, [pc, #84]	; (80054c4 <USBH_HID_KeybdDecode+0x11c>)
 8005470:	f000 f874 	bl	800555c <HID_ReadItem>
 8005474:	4602      	mov	r2, r0
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	b2d1      	uxtb	r1, r2
 800547a:	4a0a      	ldr	r2, [pc, #40]	; (80054a4 <USBH_HID_KeybdDecode+0xfc>)
 800547c:	4413      	add	r3, r2
 800547e:	460a      	mov	r2, r1
 8005480:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	3301      	adds	r3, #1
 8005486:	73fb      	strb	r3, [r7, #15]
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	2b05      	cmp	r3, #5
 800548c:	d9ed      	bls.n	800546a <USBH_HID_KeybdDecode+0xc2>
    }

    return USBH_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	e000      	b.n	8005494 <USBH_HID_KeybdDecode+0xec>
  }
  return   USBH_FAIL;
 8005492:	2302      	movs	r3, #2
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	20000160 	.word	0x20000160
 80054a0:	08008368 	.word	0x08008368
 80054a4:	20000148 	.word	0x20000148
 80054a8:	08008388 	.word	0x08008388
 80054ac:	080083a8 	.word	0x080083a8
 80054b0:	080083c8 	.word	0x080083c8
 80054b4:	080083e8 	.word	0x080083e8
 80054b8:	08008408 	.word	0x08008408
 80054bc:	08008428 	.word	0x08008428
 80054c0:	08008448 	.word	0x08008448
 80054c4:	08008468 	.word	0x08008468

080054c8 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054d6:	69db      	ldr	r3, [r3, #28]
 80054d8:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 80054da:	4b1d      	ldr	r3, [pc, #116]	; (8005550 <USBH_HID_MouseInit+0x88>)
 80054dc:	2200      	movs	r2, #0
 80054de:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 80054e0:	4b1b      	ldr	r3, [pc, #108]	; (8005550 <USBH_HID_MouseInit+0x88>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 80054e6:	4b1a      	ldr	r3, [pc, #104]	; (8005550 <USBH_HID_MouseInit+0x88>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 80054ec:	4b18      	ldr	r3, [pc, #96]	; (8005550 <USBH_HID_MouseInit+0x88>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 80054f2:	4b17      	ldr	r3, [pc, #92]	; (8005550 <USBH_HID_MouseInit+0x88>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 80054f8:	2300      	movs	r3, #0
 80054fa:	60fb      	str	r3, [r7, #12]
 80054fc:	e00c      	b.n	8005518 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 80054fe:	4a15      	ldr	r2, [pc, #84]	; (8005554 <USBH_HID_MouseInit+0x8c>)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2100      	movs	r1, #0
 8005504:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 8005508:	4a13      	ldr	r2, [pc, #76]	; (8005558 <USBH_HID_MouseInit+0x90>)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2100      	movs	r1, #0
 800550e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	3301      	adds	r3, #1
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d9ef      	bls.n	80054fe <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	8b1b      	ldrh	r3, [r3, #24]
 8005522:	2b08      	cmp	r3, #8
 8005524:	d902      	bls.n	800552c <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2208      	movs	r2, #8
 800552a:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	4a0a      	ldr	r2, [pc, #40]	; (8005558 <USBH_HID_MouseInit+0x90>)
 8005530:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f103 0008 	add.w	r0, r3, #8
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800553e:	2250      	movs	r2, #80	; 0x50
 8005540:	4619      	mov	r1, r3
 8005542:	f7ff fe0f 	bl	8005164 <USBH_HID_FifoInit>

  return USBH_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	20000168 	.word	0x20000168
 8005554:	20000170 	.word	0x20000170
 8005558:	20000178 	.word	0x20000178

0800555c <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800555c:	b480      	push	{r7}
 800555e:	b089      	sub	sp, #36	; 0x24
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	7a1b      	ldrb	r3, [r3, #8]
 800557a:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	7a5b      	ldrb	r3, [r3, #9]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d01a      	beq.n	80055ba <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	7a5b      	ldrb	r3, [r3, #9]
 8005588:	78fa      	ldrb	r2, [r7, #3]
 800558a:	429a      	cmp	r2, r3
 800558c:	d301      	bcc.n	8005592 <HID_ReadItem+0x36>
    {
      return (0U);
 800558e:	2300      	movs	r3, #0
 8005590:	e078      	b.n	8005684 <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 8005592:	78fb      	ldrb	r3, [r7, #3]
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6852      	ldr	r2, [r2, #4]
 8005598:	fb02 f303 	mul.w	r3, r2, r3
 800559c:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800559e:	7cfb      	ldrb	r3, [r7, #19]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	08db      	lsrs	r3, r3, #3
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4413      	add	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	f003 0307 	and.w	r3, r3, #7
 80055b8:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 80055ba:	2300      	movs	r3, #0
 80055bc:	61bb      	str	r3, [r7, #24]
 80055be:	e00a      	b.n	80055d6 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	fa02 f303 	lsl.w	r3, r2, r3
 80055ce:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	3301      	adds	r3, #1
 80055d4:	61bb      	str	r3, [r7, #24]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d004      	beq.n	80055ec <HID_ReadItem+0x90>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	08db      	lsrs	r3, r3, #3
 80055e8:	3301      	adds	r3, #1
 80055ea:	e002      	b.n	80055f2 <HID_ReadItem+0x96>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	08db      	lsrs	r3, r3, #3
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d8e3      	bhi.n	80055c0 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 80055f8:	7cfb      	ldrb	r3, [r7, #19]
 80055fa:	69fa      	ldr	r2, [r7, #28]
 80055fc:	40da      	lsrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f04f 31ff 	mov.w	r1, #4294967295
 8005606:	fa01 f303 	lsl.w	r3, r1, r3
 800560a:	43db      	mvns	r3, r3
 800560c:	4013      	ands	r3, r2
 800560e:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	429a      	cmp	r2, r3
 8005618:	d304      	bcc.n	8005624 <HID_ReadItem+0xc8>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	69fa      	ldr	r2, [r7, #28]
 8005620:	429a      	cmp	r2, r3
 8005622:	d901      	bls.n	8005628 <HID_ReadItem+0xcc>
  {
    return (0U);
 8005624:	2300      	movs	r3, #0
 8005626:	e02d      	b.n	8005684 <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	7a9b      	ldrb	r3, [r3, #10]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d01e      	beq.n	800566e <HID_ReadItem+0x112>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	3b01      	subs	r3, #1
 8005636:	69fa      	ldr	r2, [r7, #28]
 8005638:	fa22 f303 	lsr.w	r3, r2, r3
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	d014      	beq.n	800566e <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	425b      	negs	r3, r3
 8005650:	69fa      	ldr	r2, [r7, #28]
 8005652:	4313      	orrs	r3, r2
 8005654:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	e010      	b.n	8005684 <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	fb02 f303 	mul.w	r3, r2, r3
 800566c:	e00a      	b.n	8005684 <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d101      	bne.n	800567a <HID_ReadItem+0x11e>
    {
      return (val);
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	e004      	b.n	8005684 <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	69fa      	ldr	r2, [r7, #28]
 8005680:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 8005684:	4618      	mov	r0, r3
 8005686:	3724      	adds	r7, #36	; 0x24
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	4613      	mov	r3, r2
 800569c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80056a4:	2302      	movs	r3, #2
 80056a6:	e029      	b.n	80056fc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	79fa      	ldrb	r2, [r7, #7]
 80056ac:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 f81f 	bl	8005704 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f001 fd01 	bl	80070fc <USBH_LL_Init>

  return USBH_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005710:	2300      	movs	r3, #0
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	e009      	b.n	800572a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	33e0      	adds	r3, #224	; 0xe0
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	2200      	movs	r2, #0
 8005722:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	3301      	adds	r3, #1
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2b0f      	cmp	r3, #15
 800572e:	d9f2      	bls.n	8005716 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005730:	2300      	movs	r3, #0
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	e009      	b.n	800574a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4413      	add	r3, r2
 800573c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005740:	2200      	movs	r2, #0
 8005742:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	3301      	adds	r3, #1
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005750:	d3f1      	bcc.n	8005736 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2240      	movs	r2, #64	; 0x40
 8005776:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d016      	beq.n	80057ee <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10e      	bne.n	80057e8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80057d0:	1c59      	adds	r1, r3, #1
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	33de      	adds	r3, #222	; 0xde
 80057dc:	6839      	ldr	r1, [r7, #0]
 80057de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	73fb      	strb	r3, [r7, #15]
 80057e6:	e004      	b.n	80057f2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80057e8:	2302      	movs	r3, #2
 80057ea:	73fb      	strb	r3, [r7, #15]
 80057ec:	e001      	b.n	80057f2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80057ee:	2302      	movs	r3, #2
 80057f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005816:	78fa      	ldrb	r2, [r7, #3]
 8005818:	429a      	cmp	r2, r3
 800581a:	d204      	bcs.n	8005826 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	78fa      	ldrb	r2, [r7, #3]
 8005820:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005824:	e001      	b.n	800582a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005826:	2302      	movs	r3, #2
 8005828:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800582a:	7bfb      	ldrb	r3, [r7, #15]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	4608      	mov	r0, r1
 8005842:	4611      	mov	r1, r2
 8005844:	461a      	mov	r2, r3
 8005846:	4603      	mov	r3, r0
 8005848:	70fb      	strb	r3, [r7, #3]
 800584a:	460b      	mov	r3, r1
 800584c:	70bb      	strb	r3, [r7, #2]
 800584e:	4613      	mov	r3, r2
 8005850:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005856:	2300      	movs	r3, #0
 8005858:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005860:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005862:	e025      	b.n	80058b0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005864:	7dfb      	ldrb	r3, [r7, #23]
 8005866:	221a      	movs	r2, #26
 8005868:	fb02 f303 	mul.w	r3, r2, r3
 800586c:	3308      	adds	r3, #8
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4413      	add	r3, r2
 8005872:	3302      	adds	r3, #2
 8005874:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	795b      	ldrb	r3, [r3, #5]
 800587a:	78fa      	ldrb	r2, [r7, #3]
 800587c:	429a      	cmp	r2, r3
 800587e:	d002      	beq.n	8005886 <USBH_FindInterface+0x4e>
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	2bff      	cmp	r3, #255	; 0xff
 8005884:	d111      	bne.n	80058aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800588a:	78ba      	ldrb	r2, [r7, #2]
 800588c:	429a      	cmp	r2, r3
 800588e:	d002      	beq.n	8005896 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005890:	78bb      	ldrb	r3, [r7, #2]
 8005892:	2bff      	cmp	r3, #255	; 0xff
 8005894:	d109      	bne.n	80058aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800589a:	787a      	ldrb	r2, [r7, #1]
 800589c:	429a      	cmp	r2, r3
 800589e:	d002      	beq.n	80058a6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80058a0:	787b      	ldrb	r3, [r7, #1]
 80058a2:	2bff      	cmp	r3, #255	; 0xff
 80058a4:	d101      	bne.n	80058aa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80058a6:	7dfb      	ldrb	r3, [r7, #23]
 80058a8:	e006      	b.n	80058b8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80058aa:	7dfb      	ldrb	r3, [r7, #23]
 80058ac:	3301      	adds	r3, #1
 80058ae:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d9d6      	bls.n	8005864 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80058b6:	23ff      	movs	r3, #255	; 0xff
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	371c      	adds	r7, #28
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f001 fc51 	bl	8007174 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80058d2:	2101      	movs	r1, #1
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f001 fd6a 	bl	80073ae <USBH_LL_DriverVBUS>

  return USBH_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b088      	sub	sp, #32
 80058e8:	af04      	add	r7, sp, #16
 80058ea:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80058ec:	2302      	movs	r3, #2
 80058ee:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d102      	bne.n	8005906 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2203      	movs	r2, #3
 8005904:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b0b      	cmp	r3, #11
 800590e:	f200 81be 	bhi.w	8005c8e <USBH_Process+0x3aa>
 8005912:	a201      	add	r2, pc, #4	; (adr r2, 8005918 <USBH_Process+0x34>)
 8005914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005918:	08005949 	.word	0x08005949
 800591c:	0800597b 	.word	0x0800597b
 8005920:	080059e3 	.word	0x080059e3
 8005924:	08005c29 	.word	0x08005c29
 8005928:	08005c8f 	.word	0x08005c8f
 800592c:	08005a87 	.word	0x08005a87
 8005930:	08005bcf 	.word	0x08005bcf
 8005934:	08005abd 	.word	0x08005abd
 8005938:	08005add 	.word	0x08005add
 800593c:	08005afd 	.word	0x08005afd
 8005940:	08005b41 	.word	0x08005b41
 8005944:	08005c11 	.word	0x08005c11
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 819e 	beq.w	8005c92 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800595c:	20c8      	movs	r0, #200	; 0xc8
 800595e:	f001 fd64 	bl	800742a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f001 fc63 	bl	800722e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005978:	e18b      	b.n	8005c92 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005980:	2b01      	cmp	r3, #1
 8005982:	d107      	bne.n	8005994 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005992:	e18d      	b.n	8005cb0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800599a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800599e:	d914      	bls.n	80059ca <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80059a6:	3301      	adds	r3, #1
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d903      	bls.n	80059c2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	220d      	movs	r2, #13
 80059be:	701a      	strb	r2, [r3, #0]
      break;
 80059c0:	e176      	b.n	8005cb0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	701a      	strb	r2, [r3, #0]
      break;
 80059c8:	e172      	b.n	8005cb0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80059d0:	f103 020a 	add.w	r2, r3, #10
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80059da:	200a      	movs	r0, #10
 80059dc:	f001 fd25 	bl	800742a <USBH_Delay>
      break;
 80059e0:	e166      	b.n	8005cb0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d005      	beq.n	80059f8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80059f2:	2104      	movs	r1, #4
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80059f8:	2064      	movs	r0, #100	; 0x64
 80059fa:	f001 fd16 	bl	800742a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f001 fbee 	bl	80071e0 <USBH_LL_GetSpeed>
 8005a04:	4603      	mov	r3, r0
 8005a06:	461a      	mov	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2205      	movs	r2, #5
 8005a12:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005a14:	2100      	movs	r1, #0
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f001 fa07 	bl	8006e2a <USBH_AllocPipe>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	461a      	mov	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005a24:	2180      	movs	r1, #128	; 0x80
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f001 f9ff 	bl	8006e2a <USBH_AllocPipe>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	461a      	mov	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	7919      	ldrb	r1, [r3, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005a48:	b292      	uxth	r2, r2
 8005a4a:	9202      	str	r2, [sp, #8]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	9201      	str	r2, [sp, #4]
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	4603      	mov	r3, r0
 8005a54:	2280      	movs	r2, #128	; 0x80
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f001 f9b8 	bl	8006dcc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	7959      	ldrb	r1, [r3, #5]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005a70:	b292      	uxth	r2, r2
 8005a72:	9202      	str	r2, [sp, #8]
 8005a74:	2200      	movs	r2, #0
 8005a76:	9201      	str	r2, [sp, #4]
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f001 f9a4 	bl	8006dcc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005a84:	e114      	b.n	8005cb0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f918 	bl	8005cbc <USBH_HandleEnum>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005a90:	7bbb      	ldrb	r3, [r7, #14]
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f040 80fe 	bne.w	8005c96 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d103      	bne.n	8005ab4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2208      	movs	r2, #8
 8005ab0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005ab2:	e0f0      	b.n	8005c96 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2207      	movs	r2, #7
 8005ab8:	701a      	strb	r2, [r3, #0]
      break;
 8005aba:	e0ec      	b.n	8005c96 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f000 80e9 	beq.w	8005c9a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ace:	2101      	movs	r1, #1
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2208      	movs	r2, #8
 8005ad8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8005ada:	e0de      	b.n	8005c9a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fc2c 	bl	8006344 <USBH_SetCfg>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f040 80d5 	bne.w	8005c9e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2209      	movs	r2, #9
 8005af8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005afa:	e0d0      	b.n	8005c9e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005b02:	f003 0320 	and.w	r3, r3, #32
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d016      	beq.n	8005b38 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fc3c 	bl	800638a <USBH_SetFeature>
 8005b12:	4603      	mov	r3, r0
 8005b14:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005b16:	7bbb      	ldrb	r3, [r7, #14]
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d103      	bne.n	8005b26 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	220a      	movs	r2, #10
 8005b22:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005b24:	e0bd      	b.n	8005ca2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8005b26:	7bbb      	ldrb	r3, [r7, #14]
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	f040 80b9 	bne.w	8005ca2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	220a      	movs	r2, #10
 8005b34:	701a      	strb	r2, [r3, #0]
      break;
 8005b36:	e0b4      	b.n	8005ca2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	220a      	movs	r2, #10
 8005b3c:	701a      	strb	r2, [r3, #0]
      break;
 8005b3e:	e0b0      	b.n	8005ca2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 80ad 	beq.w	8005ca6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005b54:	2300      	movs	r3, #0
 8005b56:	73fb      	strb	r3, [r7, #15]
 8005b58:	e016      	b.n	8005b88 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005b5a:	7bfa      	ldrb	r2, [r7, #15]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	32de      	adds	r2, #222	; 0xde
 8005b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b64:	791a      	ldrb	r2, [r3, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d108      	bne.n	8005b82 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005b70:	7bfa      	ldrb	r2, [r7, #15]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	32de      	adds	r2, #222	; 0xde
 8005b76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8005b80:	e005      	b.n	8005b8e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
 8005b84:	3301      	adds	r3, #1
 8005b86:	73fb      	strb	r3, [r7, #15]
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0e5      	beq.n	8005b5a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d016      	beq.n	8005bc6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	4798      	blx	r3
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d109      	bne.n	8005bbe <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2206      	movs	r2, #6
 8005bae:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005bb6:	2103      	movs	r1, #3
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005bbc:	e073      	b.n	8005ca6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	220d      	movs	r2, #13
 8005bc2:	701a      	strb	r2, [r3, #0]
      break;
 8005bc4:	e06f      	b.n	8005ca6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	220d      	movs	r2, #13
 8005bca:	701a      	strb	r2, [r3, #0]
      break;
 8005bcc:	e06b      	b.n	8005ca6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d017      	beq.n	8005c08 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	4798      	blx	r3
 8005be4:	4603      	mov	r3, r0
 8005be6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005be8:	7bbb      	ldrb	r3, [r7, #14]
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d103      	bne.n	8005bf8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	220b      	movs	r2, #11
 8005bf4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005bf6:	e058      	b.n	8005caa <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8005bf8:	7bbb      	ldrb	r3, [r7, #14]
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d154      	bne.n	8005caa <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	220d      	movs	r2, #13
 8005c04:	701a      	strb	r2, [r3, #0]
      break;
 8005c06:	e050      	b.n	8005caa <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	220d      	movs	r2, #13
 8005c0c:	701a      	strb	r2, [r3, #0]
      break;
 8005c0e:	e04c      	b.n	8005caa <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d049      	beq.n	8005cae <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	4798      	blx	r3
      }
      break;
 8005c26:	e042      	b.n	8005cae <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7ff fd67 	bl	8005704 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d009      	beq.n	8005c54 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005c64:	2105      	movs	r1, #5
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d107      	bne.n	8005c86 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7ff fe20 	bl	80058c4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005c84:	e014      	b.n	8005cb0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f001 fa74 	bl	8007174 <USBH_LL_Start>
      break;
 8005c8c:	e010      	b.n	8005cb0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8005c8e:	bf00      	nop
 8005c90:	e00e      	b.n	8005cb0 <USBH_Process+0x3cc>
      break;
 8005c92:	bf00      	nop
 8005c94:	e00c      	b.n	8005cb0 <USBH_Process+0x3cc>
      break;
 8005c96:	bf00      	nop
 8005c98:	e00a      	b.n	8005cb0 <USBH_Process+0x3cc>
    break;
 8005c9a:	bf00      	nop
 8005c9c:	e008      	b.n	8005cb0 <USBH_Process+0x3cc>
      break;
 8005c9e:	bf00      	nop
 8005ca0:	e006      	b.n	8005cb0 <USBH_Process+0x3cc>
      break;
 8005ca2:	bf00      	nop
 8005ca4:	e004      	b.n	8005cb0 <USBH_Process+0x3cc>
      break;
 8005ca6:	bf00      	nop
 8005ca8:	e002      	b.n	8005cb0 <USBH_Process+0x3cc>
      break;
 8005caa:	bf00      	nop
 8005cac:	e000      	b.n	8005cb0 <USBH_Process+0x3cc>
      break;
 8005cae:	bf00      	nop
  }
  return USBH_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop

08005cbc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b088      	sub	sp, #32
 8005cc0:	af04      	add	r7, sp, #16
 8005cc2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	785b      	ldrb	r3, [r3, #1]
 8005cd0:	2b07      	cmp	r3, #7
 8005cd2:	f200 81c1 	bhi.w	8006058 <USBH_HandleEnum+0x39c>
 8005cd6:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <USBH_HandleEnum+0x20>)
 8005cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cdc:	08005cfd 	.word	0x08005cfd
 8005ce0:	08005dbb 	.word	0x08005dbb
 8005ce4:	08005e25 	.word	0x08005e25
 8005ce8:	08005eb3 	.word	0x08005eb3
 8005cec:	08005f1d 	.word	0x08005f1d
 8005cf0:	08005f8d 	.word	0x08005f8d
 8005cf4:	08005fd3 	.word	0x08005fd3
 8005cf8:	08006019 	.word	0x08006019
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8005cfc:	2108      	movs	r1, #8
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fa50 	bl	80061a4 <USBH_Get_DevDesc>
 8005d04:	4603      	mov	r3, r0
 8005d06:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005d08:	7bbb      	ldrb	r3, [r7, #14]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d130      	bne.n	8005d70 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	7919      	ldrb	r1, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005d32:	b292      	uxth	r2, r2
 8005d34:	9202      	str	r2, [sp, #8]
 8005d36:	2200      	movs	r2, #0
 8005d38:	9201      	str	r2, [sp, #4]
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2280      	movs	r2, #128	; 0x80
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f001 f843 	bl	8006dcc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	7959      	ldrb	r1, [r3, #5]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005d5a:	b292      	uxth	r2, r2
 8005d5c:	9202      	str	r2, [sp, #8]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	9201      	str	r2, [sp, #4]
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	4603      	mov	r3, r0
 8005d66:	2200      	movs	r2, #0
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f001 f82f 	bl	8006dcc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005d6e:	e175      	b.n	800605c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005d70:	7bbb      	ldrb	r3, [r7, #14]
 8005d72:	2b03      	cmp	r3, #3
 8005d74:	f040 8172 	bne.w	800605c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005d7e:	3301      	adds	r3, #1
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d903      	bls.n	8005d9a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	220d      	movs	r2, #13
 8005d96:	701a      	strb	r2, [r3, #0]
      break;
 8005d98:	e160      	b.n	800605c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	795b      	ldrb	r3, [r3, #5]
 8005d9e:	4619      	mov	r1, r3
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f001 f863 	bl	8006e6c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	791b      	ldrb	r3, [r3, #4]
 8005daa:	4619      	mov	r1, r3
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f001 f85d 	bl	8006e6c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	701a      	strb	r2, [r3, #0]
      break;
 8005db8:	e150      	b.n	800605c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8005dba:	2112      	movs	r1, #18
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f9f1 	bl	80061a4 <USBH_Get_DevDesc>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005dc6:	7bbb      	ldrb	r3, [r7, #14]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d103      	bne.n	8005dd4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005dd2:	e145      	b.n	8006060 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005dd4:	7bbb      	ldrb	r3, [r7, #14]
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	f040 8142 	bne.w	8006060 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005de2:	3301      	adds	r3, #1
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	d903      	bls.n	8005dfe <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	220d      	movs	r2, #13
 8005dfa:	701a      	strb	r2, [r3, #0]
      break;
 8005dfc:	e130      	b.n	8006060 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	795b      	ldrb	r3, [r3, #5]
 8005e02:	4619      	mov	r1, r3
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f001 f831 	bl	8006e6c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	791b      	ldrb	r3, [r3, #4]
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f001 f82b 	bl	8006e6c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	701a      	strb	r2, [r3, #0]
      break;
 8005e22:	e11d      	b.n	8006060 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8005e24:	2101      	movs	r1, #1
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fa68 	bl	80062fc <USBH_SetAddress>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005e30:	7bbb      	ldrb	r3, [r7, #14]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d132      	bne.n	8005e9c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8005e36:	2002      	movs	r0, #2
 8005e38:	f001 faf7 	bl	800742a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2203      	movs	r2, #3
 8005e48:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	7919      	ldrb	r1, [r3, #4]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005e5e:	b292      	uxth	r2, r2
 8005e60:	9202      	str	r2, [sp, #8]
 8005e62:	2200      	movs	r2, #0
 8005e64:	9201      	str	r2, [sp, #4]
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2280      	movs	r2, #128	; 0x80
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 ffad 	bl	8006dcc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	7959      	ldrb	r1, [r3, #5]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005e86:	b292      	uxth	r2, r2
 8005e88:	9202      	str	r2, [sp, #8]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	9201      	str	r2, [sp, #4]
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	4603      	mov	r3, r0
 8005e92:	2200      	movs	r2, #0
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 ff99 	bl	8006dcc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005e9a:	e0e3      	b.n	8006064 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005e9c:	7bbb      	ldrb	r3, [r7, #14]
 8005e9e:	2b03      	cmp	r3, #3
 8005ea0:	f040 80e0 	bne.w	8006064 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	220d      	movs	r2, #13
 8005ea8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	705a      	strb	r2, [r3, #1]
      break;
 8005eb0:	e0d8      	b.n	8006064 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8005eb2:	2109      	movs	r1, #9
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f99d 	bl	80061f4 <USBH_Get_CfgDesc>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005ebe:	7bbb      	ldrb	r3, [r7, #14]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d103      	bne.n	8005ecc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2204      	movs	r2, #4
 8005ec8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005eca:	e0cd      	b.n	8006068 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005ecc:	7bbb      	ldrb	r3, [r7, #14]
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	f040 80ca 	bne.w	8006068 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005eda:	3301      	adds	r3, #1
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005eea:	2b03      	cmp	r3, #3
 8005eec:	d903      	bls.n	8005ef6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	220d      	movs	r2, #13
 8005ef2:	701a      	strb	r2, [r3, #0]
      break;
 8005ef4:	e0b8      	b.n	8006068 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	795b      	ldrb	r3, [r3, #5]
 8005efa:	4619      	mov	r1, r3
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 ffb5 	bl	8006e6c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	791b      	ldrb	r3, [r3, #4]
 8005f06:	4619      	mov	r1, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 ffaf 	bl	8006e6c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	701a      	strb	r2, [r3, #0]
      break;
 8005f1a:	e0a5      	b.n	8006068 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8005f22:	4619      	mov	r1, r3
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f965 	bl	80061f4 <USBH_Get_CfgDesc>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005f2e:	7bbb      	ldrb	r3, [r7, #14]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d103      	bne.n	8005f3c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2205      	movs	r2, #5
 8005f38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005f3a:	e097      	b.n	800606c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005f3c:	7bbb      	ldrb	r3, [r7, #14]
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	f040 8094 	bne.w	800606c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d903      	bls.n	8005f66 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	220d      	movs	r2, #13
 8005f62:	701a      	strb	r2, [r3, #0]
      break;
 8005f64:	e082      	b.n	800606c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	795b      	ldrb	r3, [r3, #5]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 ff7d 	bl	8006e6c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	791b      	ldrb	r3, [r3, #4]
 8005f76:	4619      	mov	r1, r3
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 ff77 	bl	8006e6c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	701a      	strb	r2, [r3, #0]
      break;
 8005f8a:	e06f      	b.n	800606c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d019      	beq.n	8005fca <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005fa2:	23ff      	movs	r3, #255	; 0xff
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f949 	bl	800623c <USBH_Get_StringDesc>
 8005faa:	4603      	mov	r3, r0
 8005fac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005fae:	7bbb      	ldrb	r3, [r7, #14]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d103      	bne.n	8005fbc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2206      	movs	r2, #6
 8005fb8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005fba:	e059      	b.n	8006070 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005fbc:	7bbb      	ldrb	r3, [r7, #14]
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d156      	bne.n	8006070 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2206      	movs	r2, #6
 8005fc6:	705a      	strb	r2, [r3, #1]
      break;
 8005fc8:	e052      	b.n	8006070 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2206      	movs	r2, #6
 8005fce:	705a      	strb	r2, [r3, #1]
      break;
 8005fd0:	e04e      	b.n	8006070 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d019      	beq.n	8006010 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005fe8:	23ff      	movs	r3, #255	; 0xff
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f926 	bl	800623c <USBH_Get_StringDesc>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005ff4:	7bbb      	ldrb	r3, [r7, #14]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d103      	bne.n	8006002 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2207      	movs	r2, #7
 8005ffe:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006000:	e038      	b.n	8006074 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006002:	7bbb      	ldrb	r3, [r7, #14]
 8006004:	2b03      	cmp	r3, #3
 8006006:	d135      	bne.n	8006074 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2207      	movs	r2, #7
 800600c:	705a      	strb	r2, [r3, #1]
      break;
 800600e:	e031      	b.n	8006074 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2207      	movs	r2, #7
 8006014:	705a      	strb	r2, [r3, #1]
      break;
 8006016:	e02d      	b.n	8006074 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800601e:	2b00      	cmp	r3, #0
 8006020:	d017      	beq.n	8006052 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800602e:	23ff      	movs	r3, #255	; 0xff
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f903 	bl	800623c <USBH_Get_StringDesc>
 8006036:	4603      	mov	r3, r0
 8006038:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800603a:	7bbb      	ldrb	r3, [r7, #14]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d102      	bne.n	8006046 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006040:	2300      	movs	r3, #0
 8006042:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006044:	e018      	b.n	8006078 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006046:	7bbb      	ldrb	r3, [r7, #14]
 8006048:	2b03      	cmp	r3, #3
 800604a:	d115      	bne.n	8006078 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800604c:	2300      	movs	r3, #0
 800604e:	73fb      	strb	r3, [r7, #15]
      break;
 8006050:	e012      	b.n	8006078 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	73fb      	strb	r3, [r7, #15]
      break;
 8006056:	e00f      	b.n	8006078 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006058:	bf00      	nop
 800605a:	e00e      	b.n	800607a <USBH_HandleEnum+0x3be>
      break;
 800605c:	bf00      	nop
 800605e:	e00c      	b.n	800607a <USBH_HandleEnum+0x3be>
      break;
 8006060:	bf00      	nop
 8006062:	e00a      	b.n	800607a <USBH_HandleEnum+0x3be>
      break;
 8006064:	bf00      	nop
 8006066:	e008      	b.n	800607a <USBH_HandleEnum+0x3be>
      break;
 8006068:	bf00      	nop
 800606a:	e006      	b.n	800607a <USBH_HandleEnum+0x3be>
      break;
 800606c:	bf00      	nop
 800606e:	e004      	b.n	800607a <USBH_HandleEnum+0x3be>
      break;
 8006070:	bf00      	nop
 8006072:	e002      	b.n	800607a <USBH_HandleEnum+0x3be>
      break;
 8006074:	bf00      	nop
 8006076:	e000      	b.n	800607a <USBH_HandleEnum+0x3be>
      break;
 8006078:	bf00      	nop
  }
  return Status;
 800607a:	7bfb      	ldrb	r3, [r7, #15]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006096:	bf00      	nop
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b082      	sub	sp, #8
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f804 	bl	80060c6 <USBH_HandleSof>
}
 80060be:	bf00      	nop
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b082      	sub	sp, #8
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b0b      	cmp	r3, #11
 80060d6:	d10a      	bne.n	80060ee <USBH_HandleSof+0x28>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d005      	beq.n	80060ee <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	4798      	blx	r3
  }
}
 80060ee:	bf00      	nop
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006106:	bf00      	nop
}
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006112:	b480      	push	{r7}
 8006114:	b083      	sub	sp, #12
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006122:	bf00      	nop
}
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f001 f814 	bl	80071aa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	791b      	ldrb	r3, [r3, #4]
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fe6f 	bl	8006e6c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	795b      	ldrb	r3, [r3, #5]
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fe69 	bl	8006e6c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3708      	adds	r7, #8
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af02      	add	r7, sp, #8
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	460b      	mov	r3, r1
 80061ae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80061b6:	78fb      	ldrb	r3, [r7, #3]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	4613      	mov	r3, r2
 80061be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061c2:	2100      	movs	r1, #0
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f864 	bl	8006292 <USBH_GetDescriptor>
 80061ca:	4603      	mov	r3, r0
 80061cc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10a      	bne.n	80061ea <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80061e0:	78fa      	ldrb	r2, [r7, #3]
 80061e2:	b292      	uxth	r2, r2
 80061e4:	4619      	mov	r1, r3
 80061e6:	f000 f919 	bl	800641c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af02      	add	r7, sp, #8
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	460b      	mov	r3, r1
 80061fe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	331c      	adds	r3, #28
 8006204:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006206:	887b      	ldrh	r3, [r7, #2]
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006210:	2100      	movs	r1, #0
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f83d 	bl	8006292 <USBH_GetDescriptor>
 8006218:	4603      	mov	r3, r0
 800621a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800621c:	7bfb      	ldrb	r3, [r7, #15]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d107      	bne.n	8006232 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006222:	887b      	ldrh	r3, [r7, #2]
 8006224:	461a      	mov	r2, r3
 8006226:	68b9      	ldr	r1, [r7, #8]
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f989 	bl	8006540 <USBH_ParseCfgDesc>
 800622e:	4603      	mov	r3, r0
 8006230:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006232:	7bfb      	ldrb	r3, [r7, #15]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b088      	sub	sp, #32
 8006240:	af02      	add	r7, sp, #8
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	607a      	str	r2, [r7, #4]
 8006246:	461a      	mov	r2, r3
 8006248:	460b      	mov	r3, r1
 800624a:	72fb      	strb	r3, [r7, #11]
 800624c:	4613      	mov	r3, r2
 800624e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006250:	7afb      	ldrb	r3, [r7, #11]
 8006252:	b29b      	uxth	r3, r3
 8006254:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006258:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006260:	893b      	ldrh	r3, [r7, #8]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	460b      	mov	r3, r1
 8006266:	2100      	movs	r1, #0
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 f812 	bl	8006292 <USBH_GetDescriptor>
 800626e:	4603      	mov	r3, r0
 8006270:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006272:	7dfb      	ldrb	r3, [r7, #23]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d107      	bne.n	8006288 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800627e:	893a      	ldrh	r2, [r7, #8]
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	4618      	mov	r0, r3
 8006284:	f000 fb26 	bl	80068d4 <USBH_ParseStringDesc>
  }

  return status;
 8006288:	7dfb      	ldrb	r3, [r7, #23]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	60f8      	str	r0, [r7, #12]
 800629a:	607b      	str	r3, [r7, #4]
 800629c:	460b      	mov	r3, r1
 800629e:	72fb      	strb	r3, [r7, #11]
 80062a0:	4613      	mov	r3, r2
 80062a2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	789b      	ldrb	r3, [r3, #2]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d11c      	bne.n	80062e6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80062ac:	7afb      	ldrb	r3, [r7, #11]
 80062ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2206      	movs	r2, #6
 80062bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	893a      	ldrh	r2, [r7, #8]
 80062c2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80062c4:	893b      	ldrh	r3, [r7, #8]
 80062c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80062ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ce:	d104      	bne.n	80062da <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f240 4209 	movw	r2, #1033	; 0x409
 80062d6:	829a      	strh	r2, [r3, #20]
 80062d8:	e002      	b.n	80062e0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8b3a      	ldrh	r2, [r7, #24]
 80062e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80062e6:	8b3b      	ldrh	r3, [r7, #24]
 80062e8:	461a      	mov	r2, r3
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 fb3f 	bl	8006970 <USBH_CtlReq>
 80062f2:	4603      	mov	r3, r0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	460b      	mov	r3, r1
 8006306:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	789b      	ldrb	r3, [r3, #2]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d10f      	bne.n	8006330 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2205      	movs	r2, #5
 800631a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800631c:	78fb      	ldrb	r3, [r7, #3]
 800631e:	b29a      	uxth	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006330:	2200      	movs	r2, #0
 8006332:	2100      	movs	r1, #0
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fb1b 	bl	8006970 <USBH_CtlReq>
 800633a:	4603      	mov	r3, r0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	460b      	mov	r3, r1
 800634e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	789b      	ldrb	r3, [r3, #2]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d10e      	bne.n	8006376 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2209      	movs	r2, #9
 8006362:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	887a      	ldrh	r2, [r7, #2]
 8006368:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006376:	2200      	movs	r2, #0
 8006378:	2100      	movs	r1, #0
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 faf8 	bl	8006970 <USBH_CtlReq>
 8006380:	4603      	mov	r3, r0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b082      	sub	sp, #8
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	460b      	mov	r3, r1
 8006394:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	789b      	ldrb	r3, [r3, #2]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d10f      	bne.n	80063be <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2203      	movs	r2, #3
 80063a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80063aa:	78fb      	ldrb	r3, [r7, #3]
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80063be:	2200      	movs	r2, #0
 80063c0:	2100      	movs	r1, #0
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fad4 	bl	8006970 <USBH_CtlReq>
 80063c8:	4603      	mov	r3, r0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b082      	sub	sp, #8
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	460b      	mov	r3, r1
 80063dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	789b      	ldrb	r3, [r3, #2]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d10f      	bne.n	8006406 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2202      	movs	r2, #2
 80063ea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80063f8:	78fb      	ldrb	r3, [r7, #3]
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006406:	2200      	movs	r2, #0
 8006408:	2100      	movs	r1, #0
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fab0 	bl	8006970 <USBH_CtlReq>
 8006410:	4603      	mov	r3, r0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
	...

0800641c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	4613      	mov	r3, r2
 8006428:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	781a      	ldrb	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	785a      	ldrb	r2, [r3, #1]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	3302      	adds	r3, #2
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	b29a      	uxth	r2, r3
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	3303      	adds	r3, #3
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	b29b      	uxth	r3, r3
 800644a:	021b      	lsls	r3, r3, #8
 800644c:	b29b      	uxth	r3, r3
 800644e:	4313      	orrs	r3, r2
 8006450:	b29a      	uxth	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	791a      	ldrb	r2, [r3, #4]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	795a      	ldrb	r2, [r3, #5]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	799a      	ldrb	r2, [r3, #6]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	79da      	ldrb	r2, [r3, #7]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	79db      	ldrb	r3, [r3, #7]
 800647a:	2b20      	cmp	r3, #32
 800647c:	dc0f      	bgt.n	800649e <USBH_ParseDevDesc+0x82>
 800647e:	2b08      	cmp	r3, #8
 8006480:	db14      	blt.n	80064ac <USBH_ParseDevDesc+0x90>
 8006482:	3b08      	subs	r3, #8
 8006484:	4a2d      	ldr	r2, [pc, #180]	; (800653c <USBH_ParseDevDesc+0x120>)
 8006486:	fa22 f303 	lsr.w	r3, r2, r3
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b00      	cmp	r3, #0
 8006490:	bf14      	ite	ne
 8006492:	2301      	movne	r3, #1
 8006494:	2300      	moveq	r3, #0
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	d102      	bne.n	80064a2 <USBH_ParseDevDesc+0x86>
 800649c:	e006      	b.n	80064ac <USBH_ParseDevDesc+0x90>
 800649e:	2b40      	cmp	r3, #64	; 0x40
 80064a0:	d104      	bne.n	80064ac <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	79da      	ldrb	r2, [r3, #7]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	71da      	strb	r2, [r3, #7]
      break;
 80064aa:	e003      	b.n	80064b4 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2240      	movs	r2, #64	; 0x40
 80064b0:	71da      	strb	r2, [r3, #7]
      break;
 80064b2:	bf00      	nop
  }

  if (length > 8U)
 80064b4:	88fb      	ldrh	r3, [r7, #6]
 80064b6:	2b08      	cmp	r3, #8
 80064b8:	d939      	bls.n	800652e <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	3308      	adds	r3, #8
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	3309      	adds	r3, #9
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	021b      	lsls	r3, r3, #8
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	4313      	orrs	r3, r2
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	330a      	adds	r3, #10
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	b29a      	uxth	r2, r3
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	330b      	adds	r3, #11
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	021b      	lsls	r3, r3, #8
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	4313      	orrs	r3, r2
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	330c      	adds	r3, #12
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	330d      	adds	r3, #13
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	b29b      	uxth	r3, r3
 8006502:	021b      	lsls	r3, r3, #8
 8006504:	b29b      	uxth	r3, r3
 8006506:	4313      	orrs	r3, r2
 8006508:	b29a      	uxth	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	7b9a      	ldrb	r2, [r3, #14]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	7bda      	ldrb	r2, [r3, #15]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	7c1a      	ldrb	r2, [r3, #16]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	7c5a      	ldrb	r2, [r3, #17]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	745a      	strb	r2, [r3, #17]
  }
}
 800652e:	bf00      	nop
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	01000101 	.word	0x01000101

08006540 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b08c      	sub	sp, #48	; 0x30
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	4613      	mov	r3, r2
 800654c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006554:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	781a      	ldrb	r2, [r3, #0]
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	785a      	ldrb	r2, [r3, #1]
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	3302      	adds	r3, #2
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	b29a      	uxth	r2, r3
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	3303      	adds	r3, #3
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	b29b      	uxth	r3, r3
 8006590:	021b      	lsls	r3, r3, #8
 8006592:	b29b      	uxth	r3, r3
 8006594:	4313      	orrs	r3, r2
 8006596:	b29b      	uxth	r3, r3
 8006598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800659c:	bf28      	it	cs
 800659e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	791a      	ldrb	r2, [r3, #4]
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	795a      	ldrb	r2, [r3, #5]
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	799a      	ldrb	r2, [r3, #6]
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	79da      	ldrb	r2, [r3, #7]
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	7a1a      	ldrb	r2, [r3, #8]
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	2b09      	cmp	r3, #9
 80065d6:	d002      	beq.n	80065de <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	2209      	movs	r2, #9
 80065dc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80065de:	88fb      	ldrh	r3, [r7, #6]
 80065e0:	2b09      	cmp	r3, #9
 80065e2:	f240 809d 	bls.w	8006720 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80065e6:	2309      	movs	r3, #9
 80065e8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80065ee:	e081      	b.n	80066f4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80065f0:	f107 0316 	add.w	r3, r7, #22
 80065f4:	4619      	mov	r1, r3
 80065f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065f8:	f000 f99f 	bl	800693a <USBH_GetNextDesc>
 80065fc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	785b      	ldrb	r3, [r3, #1]
 8006602:	2b04      	cmp	r3, #4
 8006604:	d176      	bne.n	80066f4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	2b09      	cmp	r3, #9
 800660c:	d002      	beq.n	8006614 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006610:	2209      	movs	r2, #9
 8006612:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006618:	221a      	movs	r2, #26
 800661a:	fb02 f303 	mul.w	r3, r2, r3
 800661e:	3308      	adds	r3, #8
 8006620:	6a3a      	ldr	r2, [r7, #32]
 8006622:	4413      	add	r3, r2
 8006624:	3302      	adds	r3, #2
 8006626:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006628:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800662a:	69f8      	ldr	r0, [r7, #28]
 800662c:	f000 f87e 	bl	800672c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006636:	2300      	movs	r3, #0
 8006638:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800663a:	e043      	b.n	80066c4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800663c:	f107 0316 	add.w	r3, r7, #22
 8006640:	4619      	mov	r1, r3
 8006642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006644:	f000 f979 	bl	800693a <USBH_GetNextDesc>
 8006648:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	785b      	ldrb	r3, [r3, #1]
 800664e:	2b05      	cmp	r3, #5
 8006650:	d138      	bne.n	80066c4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	795b      	ldrb	r3, [r3, #5]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d10f      	bne.n	800667a <USBH_ParseCfgDesc+0x13a>
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	799b      	ldrb	r3, [r3, #6]
 800665e:	2b02      	cmp	r3, #2
 8006660:	d10b      	bne.n	800667a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	79db      	ldrb	r3, [r3, #7]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10f      	bne.n	800668a <USBH_ParseCfgDesc+0x14a>
 800666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	2b09      	cmp	r3, #9
 8006670:	d00b      	beq.n	800668a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8006672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006674:	2209      	movs	r2, #9
 8006676:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006678:	e007      	b.n	800668a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	2b07      	cmp	r3, #7
 8006680:	d004      	beq.n	800668c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006684:	2207      	movs	r2, #7
 8006686:	701a      	strb	r2, [r3, #0]
 8006688:	e000      	b.n	800668c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800668a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800668c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006690:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006694:	3201      	adds	r2, #1
 8006696:	00d2      	lsls	r2, r2, #3
 8006698:	211a      	movs	r1, #26
 800669a:	fb01 f303 	mul.w	r3, r1, r3
 800669e:	4413      	add	r3, r2
 80066a0:	3308      	adds	r3, #8
 80066a2:	6a3a      	ldr	r2, [r7, #32]
 80066a4:	4413      	add	r3, r2
 80066a6:	3304      	adds	r3, #4
 80066a8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80066aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066ac:	69b9      	ldr	r1, [r7, #24]
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 f86b 	bl	800678a <USBH_ParseEPDesc>
 80066b4:	4603      	mov	r3, r0
 80066b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80066ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80066be:	3301      	adds	r3, #1
 80066c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	791b      	ldrb	r3, [r3, #4]
 80066c8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d204      	bcs.n	80066da <USBH_ParseCfgDesc+0x19a>
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	885a      	ldrh	r2, [r3, #2]
 80066d4:	8afb      	ldrh	r3, [r7, #22]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d8b0      	bhi.n	800663c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	791b      	ldrb	r3, [r3, #4]
 80066de:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d201      	bcs.n	80066ea <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e01c      	b.n	8006724 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80066ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066ee:	3301      	adds	r3, #1
 80066f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80066f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d805      	bhi.n	8006708 <USBH_ParseCfgDesc+0x1c8>
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	885a      	ldrh	r2, [r3, #2]
 8006700:	8afb      	ldrh	r3, [r7, #22]
 8006702:	429a      	cmp	r2, r3
 8006704:	f63f af74 	bhi.w	80065f0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	791b      	ldrb	r3, [r3, #4]
 800670c:	2b02      	cmp	r3, #2
 800670e:	bf28      	it	cs
 8006710:	2302      	movcs	r3, #2
 8006712:	b2db      	uxtb	r3, r3
 8006714:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006718:	429a      	cmp	r2, r3
 800671a:	d201      	bcs.n	8006720 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800671c:	2303      	movs	r3, #3
 800671e:	e001      	b.n	8006724 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006720:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006724:	4618      	mov	r0, r3
 8006726:	3730      	adds	r7, #48	; 0x30
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781a      	ldrb	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	785a      	ldrb	r2, [r3, #1]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	789a      	ldrb	r2, [r3, #2]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	78da      	ldrb	r2, [r3, #3]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	791a      	ldrb	r2, [r3, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	795a      	ldrb	r2, [r3, #5]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	799a      	ldrb	r2, [r3, #6]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	79da      	ldrb	r2, [r3, #7]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	7a1a      	ldrb	r2, [r3, #8]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	721a      	strb	r2, [r3, #8]
}
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800678a:	b480      	push	{r7}
 800678c:	b087      	sub	sp, #28
 800678e:	af00      	add	r7, sp, #0
 8006790:	60f8      	str	r0, [r7, #12]
 8006792:	60b9      	str	r1, [r7, #8]
 8006794:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	781a      	ldrb	r2, [r3, #0]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	785a      	ldrb	r2, [r3, #1]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	789a      	ldrb	r2, [r3, #2]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	78da      	ldrb	r2, [r3, #3]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	3304      	adds	r3, #4
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	3305      	adds	r3, #5
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	021b      	lsls	r3, r3, #8
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	4313      	orrs	r3, r2
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	799a      	ldrb	r2, [r3, #6]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	889b      	ldrh	r3, [r3, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d102      	bne.n	80067ec <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80067e6:	2303      	movs	r3, #3
 80067e8:	75fb      	strb	r3, [r7, #23]
 80067ea:	e033      	b.n	8006854 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	889b      	ldrh	r3, [r3, #4]
 80067f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80067f4:	f023 0307 	bic.w	r3, r3, #7
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	889b      	ldrh	r3, [r3, #4]
 8006802:	b21a      	sxth	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3304      	adds	r3, #4
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	b299      	uxth	r1, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	3305      	adds	r3, #5
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	b29b      	uxth	r3, r3
 8006814:	021b      	lsls	r3, r3, #8
 8006816:	b29b      	uxth	r3, r3
 8006818:	430b      	orrs	r3, r1
 800681a:	b29b      	uxth	r3, r3
 800681c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006820:	2b00      	cmp	r3, #0
 8006822:	d110      	bne.n	8006846 <USBH_ParseEPDesc+0xbc>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3304      	adds	r3, #4
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	b299      	uxth	r1, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3305      	adds	r3, #5
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	b29b      	uxth	r3, r3
 8006834:	021b      	lsls	r3, r3, #8
 8006836:	b29b      	uxth	r3, r3
 8006838:	430b      	orrs	r3, r1
 800683a:	b29b      	uxth	r3, r3
 800683c:	b21b      	sxth	r3, r3
 800683e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006842:	b21b      	sxth	r3, r3
 8006844:	e001      	b.n	800684a <USBH_ParseEPDesc+0xc0>
 8006846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800684a:	4313      	orrs	r3, r2
 800684c:	b21b      	sxth	r3, r3
 800684e:	b29a      	uxth	r2, r3
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800685a:	2b00      	cmp	r3, #0
 800685c:	d116      	bne.n	800688c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	78db      	ldrb	r3, [r3, #3]
 8006862:	f003 0303 	and.w	r3, r3, #3
 8006866:	2b01      	cmp	r3, #1
 8006868:	d005      	beq.n	8006876 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	78db      	ldrb	r3, [r3, #3]
 800686e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006872:	2b03      	cmp	r3, #3
 8006874:	d127      	bne.n	80068c6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	799b      	ldrb	r3, [r3, #6]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <USBH_ParseEPDesc+0xfc>
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	799b      	ldrb	r3, [r3, #6]
 8006882:	2b10      	cmp	r3, #16
 8006884:	d91f      	bls.n	80068c6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006886:	2303      	movs	r3, #3
 8006888:	75fb      	strb	r3, [r7, #23]
 800688a:	e01c      	b.n	80068c6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	78db      	ldrb	r3, [r3, #3]
 8006890:	f003 0303 	and.w	r3, r3, #3
 8006894:	2b01      	cmp	r3, #1
 8006896:	d10a      	bne.n	80068ae <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	799b      	ldrb	r3, [r3, #6]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <USBH_ParseEPDesc+0x11e>
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	799b      	ldrb	r3, [r3, #6]
 80068a4:	2b10      	cmp	r3, #16
 80068a6:	d90e      	bls.n	80068c6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80068a8:	2303      	movs	r3, #3
 80068aa:	75fb      	strb	r3, [r7, #23]
 80068ac:	e00b      	b.n	80068c6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	78db      	ldrb	r3, [r3, #3]
 80068b2:	f003 0303 	and.w	r3, r3, #3
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d105      	bne.n	80068c6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	799b      	ldrb	r3, [r3, #6]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80068c2:	2303      	movs	r3, #3
 80068c4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80068c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	371c      	adds	r7, #28
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b087      	sub	sp, #28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	4613      	mov	r3, r2
 80068e0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3301      	adds	r3, #1
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	2b03      	cmp	r3, #3
 80068ea:	d120      	bne.n	800692e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	1e9a      	subs	r2, r3, #2
 80068f2:	88fb      	ldrh	r3, [r7, #6]
 80068f4:	4293      	cmp	r3, r2
 80068f6:	bf28      	it	cs
 80068f8:	4613      	movcs	r3, r2
 80068fa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	3302      	adds	r3, #2
 8006900:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006902:	2300      	movs	r3, #0
 8006904:	82fb      	strh	r3, [r7, #22]
 8006906:	e00b      	b.n	8006920 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006908:	8afb      	ldrh	r3, [r7, #22]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	4413      	add	r3, r2
 800690e:	781a      	ldrb	r2, [r3, #0]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	3301      	adds	r3, #1
 8006918:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800691a:	8afb      	ldrh	r3, [r7, #22]
 800691c:	3302      	adds	r3, #2
 800691e:	82fb      	strh	r3, [r7, #22]
 8006920:	8afa      	ldrh	r2, [r7, #22]
 8006922:	8abb      	ldrh	r3, [r7, #20]
 8006924:	429a      	cmp	r2, r3
 8006926:	d3ef      	bcc.n	8006908 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2200      	movs	r2, #0
 800692c:	701a      	strb	r2, [r3, #0]
  }
}
 800692e:	bf00      	nop
 8006930:	371c      	adds	r7, #28
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800693a:	b480      	push	{r7}
 800693c:	b085      	sub	sp, #20
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	881a      	ldrh	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	b29b      	uxth	r3, r3
 800694e:	4413      	add	r3, r2
 8006950:	b29a      	uxth	r2, r3
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4413      	add	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006962:	68fb      	ldr	r3, [r7, #12]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	4613      	mov	r3, r2
 800697c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800697e:	2301      	movs	r3, #1
 8006980:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	789b      	ldrb	r3, [r3, #2]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d002      	beq.n	8006990 <USBH_CtlReq+0x20>
 800698a:	2b02      	cmp	r3, #2
 800698c:	d00f      	beq.n	80069ae <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800698e:	e027      	b.n	80069e0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	88fa      	ldrh	r2, [r7, #6]
 800699a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2201      	movs	r2, #1
 80069a0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2202      	movs	r2, #2
 80069a6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80069a8:	2301      	movs	r3, #1
 80069aa:	75fb      	strb	r3, [r7, #23]
      break;
 80069ac:	e018      	b.n	80069e0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 f81c 	bl	80069ec <USBH_HandleControl>
 80069b4:	4603      	mov	r3, r0
 80069b6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80069b8:	7dfb      	ldrb	r3, [r7, #23]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d002      	beq.n	80069c4 <USBH_CtlReq+0x54>
 80069be:	7dfb      	ldrb	r3, [r7, #23]
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	d106      	bne.n	80069d2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2201      	movs	r2, #1
 80069c8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	761a      	strb	r2, [r3, #24]
      break;
 80069d0:	e005      	b.n	80069de <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80069d2:	7dfb      	ldrb	r3, [r7, #23]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d102      	bne.n	80069de <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2201      	movs	r2, #1
 80069dc:	709a      	strb	r2, [r3, #2]
      break;
 80069de:	bf00      	nop
  }
  return status;
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
	...

080069ec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af02      	add	r7, sp, #8
 80069f2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80069f4:	2301      	movs	r3, #1
 80069f6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80069f8:	2300      	movs	r3, #0
 80069fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	7e1b      	ldrb	r3, [r3, #24]
 8006a00:	3b01      	subs	r3, #1
 8006a02:	2b0a      	cmp	r3, #10
 8006a04:	f200 8156 	bhi.w	8006cb4 <USBH_HandleControl+0x2c8>
 8006a08:	a201      	add	r2, pc, #4	; (adr r2, 8006a10 <USBH_HandleControl+0x24>)
 8006a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0e:	bf00      	nop
 8006a10:	08006a3d 	.word	0x08006a3d
 8006a14:	08006a57 	.word	0x08006a57
 8006a18:	08006ac1 	.word	0x08006ac1
 8006a1c:	08006ae7 	.word	0x08006ae7
 8006a20:	08006b1f 	.word	0x08006b1f
 8006a24:	08006b49 	.word	0x08006b49
 8006a28:	08006b9b 	.word	0x08006b9b
 8006a2c:	08006bbd 	.word	0x08006bbd
 8006a30:	08006bf9 	.word	0x08006bf9
 8006a34:	08006c1f 	.word	0x08006c1f
 8006a38:	08006c5d 	.word	0x08006c5d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f103 0110 	add.w	r1, r3, #16
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	795b      	ldrb	r3, [r3, #5]
 8006a46:	461a      	mov	r2, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f943 	bl	8006cd4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2202      	movs	r2, #2
 8006a52:	761a      	strb	r2, [r3, #24]
      break;
 8006a54:	e139      	b.n	8006cca <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	795b      	ldrb	r3, [r3, #5]
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fc93 	bl	8007388 <USBH_LL_GetURBState>
 8006a62:	4603      	mov	r3, r0
 8006a64:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006a66:	7bbb      	ldrb	r3, [r7, #14]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d11e      	bne.n	8006aaa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	7c1b      	ldrb	r3, [r3, #16]
 8006a70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a74:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	8adb      	ldrh	r3, [r3, #22]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00a      	beq.n	8006a94 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006a7e:	7b7b      	ldrb	r3, [r7, #13]
 8006a80:	2b80      	cmp	r3, #128	; 0x80
 8006a82:	d103      	bne.n	8006a8c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2203      	movs	r2, #3
 8006a88:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006a8a:	e115      	b.n	8006cb8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2205      	movs	r2, #5
 8006a90:	761a      	strb	r2, [r3, #24]
      break;
 8006a92:	e111      	b.n	8006cb8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006a94:	7b7b      	ldrb	r3, [r7, #13]
 8006a96:	2b80      	cmp	r3, #128	; 0x80
 8006a98:	d103      	bne.n	8006aa2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2209      	movs	r2, #9
 8006a9e:	761a      	strb	r2, [r3, #24]
      break;
 8006aa0:	e10a      	b.n	8006cb8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2207      	movs	r2, #7
 8006aa6:	761a      	strb	r2, [r3, #24]
      break;
 8006aa8:	e106      	b.n	8006cb8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006aaa:	7bbb      	ldrb	r3, [r7, #14]
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d003      	beq.n	8006ab8 <USBH_HandleControl+0xcc>
 8006ab0:	7bbb      	ldrb	r3, [r7, #14]
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	f040 8100 	bne.w	8006cb8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	220b      	movs	r2, #11
 8006abc:	761a      	strb	r2, [r3, #24]
      break;
 8006abe:	e0fb      	b.n	8006cb8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6899      	ldr	r1, [r3, #8]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	899a      	ldrh	r2, [r3, #12]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	791b      	ldrb	r3, [r3, #4]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f93a 	bl	8006d52 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2204      	movs	r2, #4
 8006ae2:	761a      	strb	r2, [r3, #24]
      break;
 8006ae4:	e0f1      	b.n	8006cca <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	791b      	ldrb	r3, [r3, #4]
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fc4b 	bl	8007388 <USBH_LL_GetURBState>
 8006af2:	4603      	mov	r3, r0
 8006af4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006af6:	7bbb      	ldrb	r3, [r7, #14]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d102      	bne.n	8006b02 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2209      	movs	r2, #9
 8006b00:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006b02:	7bbb      	ldrb	r3, [r7, #14]
 8006b04:	2b05      	cmp	r3, #5
 8006b06:	d102      	bne.n	8006b0e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006b0c:	e0d6      	b.n	8006cbc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006b0e:	7bbb      	ldrb	r3, [r7, #14]
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	f040 80d3 	bne.w	8006cbc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	220b      	movs	r2, #11
 8006b1a:	761a      	strb	r2, [r3, #24]
      break;
 8006b1c:	e0ce      	b.n	8006cbc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6899      	ldr	r1, [r3, #8]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	899a      	ldrh	r2, [r3, #12]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	795b      	ldrb	r3, [r3, #5]
 8006b2a:	2001      	movs	r0, #1
 8006b2c:	9000      	str	r0, [sp, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f8ea 	bl	8006d08 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2206      	movs	r2, #6
 8006b44:	761a      	strb	r2, [r3, #24]
      break;
 8006b46:	e0c0      	b.n	8006cca <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	795b      	ldrb	r3, [r3, #5]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fc1a 	bl	8007388 <USBH_LL_GetURBState>
 8006b54:	4603      	mov	r3, r0
 8006b56:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006b58:	7bbb      	ldrb	r3, [r7, #14]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d103      	bne.n	8006b66 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2207      	movs	r2, #7
 8006b62:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006b64:	e0ac      	b.n	8006cc0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006b66:	7bbb      	ldrb	r3, [r7, #14]
 8006b68:	2b05      	cmp	r3, #5
 8006b6a:	d105      	bne.n	8006b78 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	220c      	movs	r2, #12
 8006b70:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006b72:	2303      	movs	r3, #3
 8006b74:	73fb      	strb	r3, [r7, #15]
      break;
 8006b76:	e0a3      	b.n	8006cc0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006b78:	7bbb      	ldrb	r3, [r7, #14]
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d103      	bne.n	8006b86 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2205      	movs	r2, #5
 8006b82:	761a      	strb	r2, [r3, #24]
      break;
 8006b84:	e09c      	b.n	8006cc0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006b86:	7bbb      	ldrb	r3, [r7, #14]
 8006b88:	2b04      	cmp	r3, #4
 8006b8a:	f040 8099 	bne.w	8006cc0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	220b      	movs	r2, #11
 8006b92:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006b94:	2302      	movs	r3, #2
 8006b96:	73fb      	strb	r3, [r7, #15]
      break;
 8006b98:	e092      	b.n	8006cc0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	791b      	ldrb	r3, [r3, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f8d5 	bl	8006d52 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2208      	movs	r2, #8
 8006bb8:	761a      	strb	r2, [r3, #24]

      break;
 8006bba:	e086      	b.n	8006cca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	791b      	ldrb	r3, [r3, #4]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fbe0 	bl	8007388 <USBH_LL_GetURBState>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006bcc:	7bbb      	ldrb	r3, [r7, #14]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d105      	bne.n	8006bde <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	220d      	movs	r2, #13
 8006bd6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006bdc:	e072      	b.n	8006cc4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006bde:	7bbb      	ldrb	r3, [r7, #14]
 8006be0:	2b04      	cmp	r3, #4
 8006be2:	d103      	bne.n	8006bec <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	220b      	movs	r2, #11
 8006be8:	761a      	strb	r2, [r3, #24]
      break;
 8006bea:	e06b      	b.n	8006cc4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006bec:	7bbb      	ldrb	r3, [r7, #14]
 8006bee:	2b05      	cmp	r3, #5
 8006bf0:	d168      	bne.n	8006cc4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf6:	e065      	b.n	8006cc4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	795b      	ldrb	r3, [r3, #5]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	9200      	str	r2, [sp, #0]
 8006c00:	2200      	movs	r2, #0
 8006c02:	2100      	movs	r1, #0
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f87f 	bl	8006d08 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	220a      	movs	r2, #10
 8006c1a:	761a      	strb	r2, [r3, #24]
      break;
 8006c1c:	e055      	b.n	8006cca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	795b      	ldrb	r3, [r3, #5]
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fbaf 	bl	8007388 <USBH_LL_GetURBState>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006c2e:	7bbb      	ldrb	r3, [r7, #14]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d105      	bne.n	8006c40 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006c34:	2300      	movs	r3, #0
 8006c36:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	220d      	movs	r2, #13
 8006c3c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006c3e:	e043      	b.n	8006cc8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006c40:	7bbb      	ldrb	r3, [r7, #14]
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d103      	bne.n	8006c4e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2209      	movs	r2, #9
 8006c4a:	761a      	strb	r2, [r3, #24]
      break;
 8006c4c:	e03c      	b.n	8006cc8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006c4e:	7bbb      	ldrb	r3, [r7, #14]
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	d139      	bne.n	8006cc8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	220b      	movs	r2, #11
 8006c58:	761a      	strb	r2, [r3, #24]
      break;
 8006c5a:	e035      	b.n	8006cc8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	7e5b      	ldrb	r3, [r3, #25]
 8006c60:	3301      	adds	r3, #1
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	765a      	strb	r2, [r3, #25]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	7e5b      	ldrb	r3, [r3, #25]
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d806      	bhi.n	8006c7e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006c7c:	e025      	b.n	8006cca <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c84:	2106      	movs	r1, #6
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	795b      	ldrb	r3, [r3, #5]
 8006c94:	4619      	mov	r1, r3
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f8e8 	bl	8006e6c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	791b      	ldrb	r3, [r3, #4]
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f8e2 	bl	8006e6c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006cae:	2302      	movs	r3, #2
 8006cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8006cb2:	e00a      	b.n	8006cca <USBH_HandleControl+0x2de>

    default:
      break;
 8006cb4:	bf00      	nop
 8006cb6:	e008      	b.n	8006cca <USBH_HandleControl+0x2de>
      break;
 8006cb8:	bf00      	nop
 8006cba:	e006      	b.n	8006cca <USBH_HandleControl+0x2de>
      break;
 8006cbc:	bf00      	nop
 8006cbe:	e004      	b.n	8006cca <USBH_HandleControl+0x2de>
      break;
 8006cc0:	bf00      	nop
 8006cc2:	e002      	b.n	8006cca <USBH_HandleControl+0x2de>
      break;
 8006cc4:	bf00      	nop
 8006cc6:	e000      	b.n	8006cca <USBH_HandleControl+0x2de>
      break;
 8006cc8:	bf00      	nop
  }

  return status;
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b088      	sub	sp, #32
 8006cd8:	af04      	add	r7, sp, #16
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006ce2:	79f9      	ldrb	r1, [r7, #7]
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	9303      	str	r3, [sp, #12]
 8006ce8:	2308      	movs	r3, #8
 8006cea:	9302      	str	r3, [sp, #8]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	9301      	str	r3, [sp, #4]
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 fb14 	bl	8007326 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af04      	add	r7, sp, #16
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	4611      	mov	r1, r2
 8006d14:	461a      	mov	r2, r3
 8006d16:	460b      	mov	r3, r1
 8006d18:	80fb      	strh	r3, [r7, #6]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006d2c:	7979      	ldrb	r1, [r7, #5]
 8006d2e:	7e3b      	ldrb	r3, [r7, #24]
 8006d30:	9303      	str	r3, [sp, #12]
 8006d32:	88fb      	ldrh	r3, [r7, #6]
 8006d34:	9302      	str	r3, [sp, #8]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	9301      	str	r3, [sp, #4]
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	2300      	movs	r3, #0
 8006d40:	2200      	movs	r2, #0
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 faef 	bl	8007326 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b088      	sub	sp, #32
 8006d56:	af04      	add	r7, sp, #16
 8006d58:	60f8      	str	r0, [r7, #12]
 8006d5a:	60b9      	str	r1, [r7, #8]
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	461a      	mov	r2, r3
 8006d60:	460b      	mov	r3, r1
 8006d62:	80fb      	strh	r3, [r7, #6]
 8006d64:	4613      	mov	r3, r2
 8006d66:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006d68:	7979      	ldrb	r1, [r7, #5]
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	9303      	str	r3, [sp, #12]
 8006d6e:	88fb      	ldrh	r3, [r7, #6]
 8006d70:	9302      	str	r3, [sp, #8]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	9301      	str	r3, [sp, #4]
 8006d76:	2301      	movs	r3, #1
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f000 fad1 	bl	8007326 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006d84:	2300      	movs	r3, #0

}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b088      	sub	sp, #32
 8006d92:	af04      	add	r7, sp, #16
 8006d94:	60f8      	str	r0, [r7, #12]
 8006d96:	60b9      	str	r1, [r7, #8]
 8006d98:	4611      	mov	r1, r2
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	71fb      	strb	r3, [r7, #7]
 8006da0:	4613      	mov	r3, r2
 8006da2:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006da4:	79fb      	ldrb	r3, [r7, #7]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	79b9      	ldrb	r1, [r7, #6]
 8006daa:	2200      	movs	r2, #0
 8006dac:	9203      	str	r2, [sp, #12]
 8006dae:	9302      	str	r3, [sp, #8]
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	9301      	str	r3, [sp, #4]
 8006db4:	2301      	movs	r3, #1
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	2303      	movs	r3, #3
 8006dba:	2201      	movs	r2, #1
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f000 fab2 	bl	8007326 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af04      	add	r7, sp, #16
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	4608      	mov	r0, r1
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	461a      	mov	r2, r3
 8006dda:	4603      	mov	r3, r0
 8006ddc:	70fb      	strb	r3, [r7, #3]
 8006dde:	460b      	mov	r3, r1
 8006de0:	70bb      	strb	r3, [r7, #2]
 8006de2:	4613      	mov	r3, r2
 8006de4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006de6:	7878      	ldrb	r0, [r7, #1]
 8006de8:	78ba      	ldrb	r2, [r7, #2]
 8006dea:	78f9      	ldrb	r1, [r7, #3]
 8006dec:	8b3b      	ldrh	r3, [r7, #24]
 8006dee:	9302      	str	r3, [sp, #8]
 8006df0:	7d3b      	ldrb	r3, [r7, #20]
 8006df2:	9301      	str	r3, [sp, #4]
 8006df4:	7c3b      	ldrb	r3, [r7, #16]
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	4603      	mov	r3, r0
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fa45 	bl	800728a <USBH_LL_OpenPipe>

  return USBH_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b082      	sub	sp, #8
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	460b      	mov	r3, r1
 8006e14:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8006e16:	78fb      	ldrb	r3, [r7, #3]
 8006e18:	4619      	mov	r1, r3
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fa64 	bl	80072e8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
 8006e32:	460b      	mov	r3, r1
 8006e34:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f836 	bl	8006ea8 <USBH_GetFreePipe>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006e40:	89fb      	ldrh	r3, [r7, #14]
 8006e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d00a      	beq.n	8006e60 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8006e4a:	78fa      	ldrb	r2, [r7, #3]
 8006e4c:	89fb      	ldrh	r3, [r7, #14]
 8006e4e:	f003 030f 	and.w	r3, r3, #15
 8006e52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e56:	6879      	ldr	r1, [r7, #4]
 8006e58:	33e0      	adds	r3, #224	; 0xe0
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	440b      	add	r3, r1
 8006e5e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006e60:	89fb      	ldrh	r3, [r7, #14]
 8006e62:	b2db      	uxtb	r3, r3
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	460b      	mov	r3, r1
 8006e76:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006e78:	78fb      	ldrb	r3, [r7, #3]
 8006e7a:	2b0f      	cmp	r3, #15
 8006e7c:	d80d      	bhi.n	8006e9a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006e7e:	78fb      	ldrb	r3, [r7, #3]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	33e0      	adds	r3, #224	; 0xe0
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	685a      	ldr	r2, [r3, #4]
 8006e8a:	78fb      	ldrb	r3, [r7, #3]
 8006e8c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006e90:	6879      	ldr	r1, [r7, #4]
 8006e92:	33e0      	adds	r3, #224	; 0xe0
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	440b      	add	r3, r1
 8006e98:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	73fb      	strb	r3, [r7, #15]
 8006eb8:	e00f      	b.n	8006eda <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	33e0      	adds	r3, #224	; 0xe0
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d102      	bne.n	8006ed4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	e007      	b.n	8006ee4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	73fb      	strb	r3, [r7, #15]
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
 8006edc:	2b0f      	cmp	r3, #15
 8006ede:	d9ec      	bls.n	8006eba <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	490e      	ldr	r1, [pc, #56]	; (8006f30 <MX_USB_HOST_Init+0x40>)
 8006ef8:	480e      	ldr	r0, [pc, #56]	; (8006f34 <MX_USB_HOST_Init+0x44>)
 8006efa:	f7fe fbc9 	bl	8005690 <USBH_Init>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006f04:	f7f9 fc10 	bl	8000728 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 8006f08:	490b      	ldr	r1, [pc, #44]	; (8006f38 <MX_USB_HOST_Init+0x48>)
 8006f0a:	480a      	ldr	r0, [pc, #40]	; (8006f34 <MX_USB_HOST_Init+0x44>)
 8006f0c:	f7fe fc4e 	bl	80057ac <USBH_RegisterClass>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006f16:	f7f9 fc07 	bl	8000728 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006f1a:	4806      	ldr	r0, [pc, #24]	; (8006f34 <MX_USB_HOST_Init+0x44>)
 8006f1c:	f7fe fcd2 	bl	80058c4 <USBH_Start>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006f26:	f7f9 fbff 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006f2a:	bf00      	nop
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	08006f51 	.word	0x08006f51
 8006f34:	20000180 	.word	0x20000180
 8006f38:	2000000c 	.word	0x2000000c

08006f3c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006f40:	4802      	ldr	r0, [pc, #8]	; (8006f4c <MX_USB_HOST_Process+0x10>)
 8006f42:	f7fe fccf 	bl	80058e4 <USBH_Process>
}
 8006f46:	bf00      	nop
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	20000180 	.word	0x20000180

08006f50 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006f5c:	78fb      	ldrb	r3, [r7, #3]
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	2b04      	cmp	r3, #4
 8006f62:	d819      	bhi.n	8006f98 <USBH_UserProcess+0x48>
 8006f64:	a201      	add	r2, pc, #4	; (adr r2, 8006f6c <USBH_UserProcess+0x1c>)
 8006f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6a:	bf00      	nop
 8006f6c:	08006f99 	.word	0x08006f99
 8006f70:	08006f89 	.word	0x08006f89
 8006f74:	08006f99 	.word	0x08006f99
 8006f78:	08006f91 	.word	0x08006f91
 8006f7c:	08006f81 	.word	0x08006f81
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006f80:	4b09      	ldr	r3, [pc, #36]	; (8006fa8 <USBH_UserProcess+0x58>)
 8006f82:	2203      	movs	r2, #3
 8006f84:	701a      	strb	r2, [r3, #0]
  break;
 8006f86:	e008      	b.n	8006f9a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006f88:	4b07      	ldr	r3, [pc, #28]	; (8006fa8 <USBH_UserProcess+0x58>)
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	701a      	strb	r2, [r3, #0]
  break;
 8006f8e:	e004      	b.n	8006f9a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006f90:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <USBH_UserProcess+0x58>)
 8006f92:	2201      	movs	r2, #1
 8006f94:	701a      	strb	r2, [r3, #0]
  break;
 8006f96:	e000      	b.n	8006f9a <USBH_UserProcess+0x4a>

  default:
  break;
 8006f98:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006f9a:	bf00      	nop
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	20000558 	.word	0x20000558

08006fac <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08a      	sub	sp, #40	; 0x28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fb4:	f107 0314 	add.w	r3, r7, #20
 8006fb8:	2200      	movs	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	605a      	str	r2, [r3, #4]
 8006fbe:	609a      	str	r2, [r3, #8]
 8006fc0:	60da      	str	r2, [r3, #12]
 8006fc2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fcc:	d13a      	bne.n	8007044 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fce:	2300      	movs	r3, #0
 8006fd0:	613b      	str	r3, [r7, #16]
 8006fd2:	4b1e      	ldr	r3, [pc, #120]	; (800704c <HAL_HCD_MspInit+0xa0>)
 8006fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd6:	4a1d      	ldr	r2, [pc, #116]	; (800704c <HAL_HCD_MspInit+0xa0>)
 8006fd8:	f043 0301 	orr.w	r3, r3, #1
 8006fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8006fde:	4b1b      	ldr	r3, [pc, #108]	; (800704c <HAL_HCD_MspInit+0xa0>)
 8006fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	613b      	str	r3, [r7, #16]
 8006fe8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006fea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006ffc:	230a      	movs	r3, #10
 8006ffe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007000:	f107 0314 	add.w	r3, r7, #20
 8007004:	4619      	mov	r1, r3
 8007006:	4812      	ldr	r0, [pc, #72]	; (8007050 <HAL_HCD_MspInit+0xa4>)
 8007008:	f7f9 ff5a 	bl	8000ec0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800700c:	4b0f      	ldr	r3, [pc, #60]	; (800704c <HAL_HCD_MspInit+0xa0>)
 800700e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007010:	4a0e      	ldr	r2, [pc, #56]	; (800704c <HAL_HCD_MspInit+0xa0>)
 8007012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007016:	6353      	str	r3, [r2, #52]	; 0x34
 8007018:	2300      	movs	r3, #0
 800701a:	60fb      	str	r3, [r7, #12]
 800701c:	4b0b      	ldr	r3, [pc, #44]	; (800704c <HAL_HCD_MspInit+0xa0>)
 800701e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007020:	4a0a      	ldr	r2, [pc, #40]	; (800704c <HAL_HCD_MspInit+0xa0>)
 8007022:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007026:	6453      	str	r3, [r2, #68]	; 0x44
 8007028:	4b08      	ldr	r3, [pc, #32]	; (800704c <HAL_HCD_MspInit+0xa0>)
 800702a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800702c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007030:	60fb      	str	r3, [r7, #12]
 8007032:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007034:	2200      	movs	r2, #0
 8007036:	2100      	movs	r1, #0
 8007038:	2043      	movs	r0, #67	; 0x43
 800703a:	f7f9 ff0a 	bl	8000e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800703e:	2043      	movs	r0, #67	; 0x43
 8007040:	f7f9 ff23 	bl	8000e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007044:	bf00      	nop
 8007046:	3728      	adds	r7, #40	; 0x28
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	40023800 	.word	0x40023800
 8007050:	40020000 	.word	0x40020000

08007054 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007062:	4618      	mov	r0, r3
 8007064:	f7ff f81d 	bl	80060a2 <USBH_LL_IncTimer>
}
 8007068:	bf00      	nop
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800707e:	4618      	mov	r0, r3
 8007080:	f7ff f855 	bl	800612e <USBH_LL_Connect>
}
 8007084:	bf00      	nop
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800709a:	4618      	mov	r0, r3
 800709c:	f7ff f85e 	bl	800615c <USBH_LL_Disconnect>
}
 80070a0:	bf00      	nop
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	460b      	mov	r3, r1
 80070b2:	70fb      	strb	r3, [r7, #3]
 80070b4:	4613      	mov	r3, r2
 80070b6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7ff f80f 	bl	80060f6 <USBH_LL_PortEnabled>
}
 80070d8:	bf00      	nop
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7ff f80f 	bl	8006112 <USBH_LL_PortDisabled>
}
 80070f4:	bf00      	nop
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800710a:	2b01      	cmp	r3, #1
 800710c:	d12a      	bne.n	8007164 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800710e:	4a18      	ldr	r2, [pc, #96]	; (8007170 <USBH_LL_Init+0x74>)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a15      	ldr	r2, [pc, #84]	; (8007170 <USBH_LL_Init+0x74>)
 800711a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800711e:	4b14      	ldr	r3, [pc, #80]	; (8007170 <USBH_LL_Init+0x74>)
 8007120:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007124:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007126:	4b12      	ldr	r3, [pc, #72]	; (8007170 <USBH_LL_Init+0x74>)
 8007128:	2208      	movs	r2, #8
 800712a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800712c:	4b10      	ldr	r3, [pc, #64]	; (8007170 <USBH_LL_Init+0x74>)
 800712e:	2201      	movs	r2, #1
 8007130:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007132:	4b0f      	ldr	r3, [pc, #60]	; (8007170 <USBH_LL_Init+0x74>)
 8007134:	2200      	movs	r2, #0
 8007136:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007138:	4b0d      	ldr	r3, [pc, #52]	; (8007170 <USBH_LL_Init+0x74>)
 800713a:	2202      	movs	r2, #2
 800713c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800713e:	4b0c      	ldr	r3, [pc, #48]	; (8007170 <USBH_LL_Init+0x74>)
 8007140:	2200      	movs	r2, #0
 8007142:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007144:	480a      	ldr	r0, [pc, #40]	; (8007170 <USBH_LL_Init+0x74>)
 8007146:	f7fa f83f 	bl	80011c8 <HAL_HCD_Init>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d001      	beq.n	8007154 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007150:	f7f9 faea 	bl	8000728 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007154:	4806      	ldr	r0, [pc, #24]	; (8007170 <USBH_LL_Init+0x74>)
 8007156:	f7fa fc22 	bl	800199e <HAL_HCD_GetCurrentFrame>
 800715a:	4603      	mov	r3, r0
 800715c:	4619      	mov	r1, r3
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7fe ff90 	bl	8006084 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	2000055c 	.word	0x2000055c

08007174 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007180:	2300      	movs	r3, #0
 8007182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800718a:	4618      	mov	r0, r3
 800718c:	f7fa fb91 	bl	80018b2 <HAL_HCD_Start>
 8007190:	4603      	mov	r3, r0
 8007192:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007194:	7bfb      	ldrb	r3, [r7, #15]
 8007196:	4618      	mov	r0, r3
 8007198:	f000 f952 	bl	8007440 <USBH_Get_USB_Status>
 800719c:	4603      	mov	r3, r0
 800719e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b084      	sub	sp, #16
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fa fb99 	bl	80018f8 <HAL_HCD_Stop>
 80071c6:	4603      	mov	r3, r0
 80071c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 f937 	bl	8007440 <USBH_Get_USB_Status>
 80071d2:	4603      	mov	r3, r0
 80071d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80071e8:	2301      	movs	r3, #1
 80071ea:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7fa fbe1 	bl	80019ba <HAL_HCD_GetCurrentSpeed>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d00c      	beq.n	8007218 <USBH_LL_GetSpeed+0x38>
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d80d      	bhi.n	800721e <USBH_LL_GetSpeed+0x3e>
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <USBH_LL_GetSpeed+0x2c>
 8007206:	2b01      	cmp	r3, #1
 8007208:	d003      	beq.n	8007212 <USBH_LL_GetSpeed+0x32>
 800720a:	e008      	b.n	800721e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800720c:	2300      	movs	r3, #0
 800720e:	73fb      	strb	r3, [r7, #15]
    break;
 8007210:	e008      	b.n	8007224 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007212:	2301      	movs	r3, #1
 8007214:	73fb      	strb	r3, [r7, #15]
    break;
 8007216:	e005      	b.n	8007224 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007218:	2302      	movs	r3, #2
 800721a:	73fb      	strb	r3, [r7, #15]
    break;
 800721c:	e002      	b.n	8007224 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800721e:	2301      	movs	r3, #1
 8007220:	73fb      	strb	r3, [r7, #15]
    break;
 8007222:	bf00      	nop
  }
  return  speed;
 8007224:	7bfb      	ldrb	r3, [r7, #15]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b084      	sub	sp, #16
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800723a:	2300      	movs	r3, #0
 800723c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007244:	4618      	mov	r0, r3
 8007246:	f7fa fb74 	bl	8001932 <HAL_HCD_ResetPort>
 800724a:	4603      	mov	r3, r0
 800724c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800724e:	7bfb      	ldrb	r3, [r7, #15]
 8007250:	4618      	mov	r0, r3
 8007252:	f000 f8f5 	bl	8007440 <USBH_Get_USB_Status>
 8007256:	4603      	mov	r3, r0
 8007258:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800725a:	7bbb      	ldrb	r3, [r7, #14]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	460b      	mov	r3, r1
 800726e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007276:	78fa      	ldrb	r2, [r7, #3]
 8007278:	4611      	mov	r1, r2
 800727a:	4618      	mov	r0, r3
 800727c:	f7fa fb7b 	bl	8001976 <HAL_HCD_HC_GetXferCount>
 8007280:	4603      	mov	r3, r0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800728a:	b590      	push	{r4, r7, lr}
 800728c:	b089      	sub	sp, #36	; 0x24
 800728e:	af04      	add	r7, sp, #16
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	4608      	mov	r0, r1
 8007294:	4611      	mov	r1, r2
 8007296:	461a      	mov	r2, r3
 8007298:	4603      	mov	r3, r0
 800729a:	70fb      	strb	r3, [r7, #3]
 800729c:	460b      	mov	r3, r1
 800729e:	70bb      	strb	r3, [r7, #2]
 80072a0:	4613      	mov	r3, r2
 80072a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80072b2:	787c      	ldrb	r4, [r7, #1]
 80072b4:	78ba      	ldrb	r2, [r7, #2]
 80072b6:	78f9      	ldrb	r1, [r7, #3]
 80072b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80072ba:	9302      	str	r3, [sp, #8]
 80072bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80072c0:	9301      	str	r3, [sp, #4]
 80072c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	4623      	mov	r3, r4
 80072ca:	f7f9 ffdf 	bl	800128c <HAL_HCD_HC_Init>
 80072ce:	4603      	mov	r3, r0
 80072d0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 f8b3 	bl	8007440 <USBH_Get_USB_Status>
 80072da:	4603      	mov	r3, r0
 80072dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072de:	7bbb      	ldrb	r3, [r7, #14]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd90      	pop	{r4, r7, pc}

080072e8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	460b      	mov	r3, r1
 80072f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007302:	78fa      	ldrb	r2, [r7, #3]
 8007304:	4611      	mov	r1, r2
 8007306:	4618      	mov	r0, r3
 8007308:	f7fa f84f 	bl	80013aa <HAL_HCD_HC_Halt>
 800730c:	4603      	mov	r3, r0
 800730e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007310:	7bfb      	ldrb	r3, [r7, #15]
 8007312:	4618      	mov	r0, r3
 8007314:	f000 f894 	bl	8007440 <USBH_Get_USB_Status>
 8007318:	4603      	mov	r3, r0
 800731a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800731c:	7bbb      	ldrb	r3, [r7, #14]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007326:	b590      	push	{r4, r7, lr}
 8007328:	b089      	sub	sp, #36	; 0x24
 800732a:	af04      	add	r7, sp, #16
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	4608      	mov	r0, r1
 8007330:	4611      	mov	r1, r2
 8007332:	461a      	mov	r2, r3
 8007334:	4603      	mov	r3, r0
 8007336:	70fb      	strb	r3, [r7, #3]
 8007338:	460b      	mov	r3, r1
 800733a:	70bb      	strb	r3, [r7, #2]
 800733c:	4613      	mov	r3, r2
 800733e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007340:	2300      	movs	r3, #0
 8007342:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007344:	2300      	movs	r3, #0
 8007346:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800734e:	787c      	ldrb	r4, [r7, #1]
 8007350:	78ba      	ldrb	r2, [r7, #2]
 8007352:	78f9      	ldrb	r1, [r7, #3]
 8007354:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007358:	9303      	str	r3, [sp, #12]
 800735a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800735c:	9302      	str	r3, [sp, #8]
 800735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007360:	9301      	str	r3, [sp, #4]
 8007362:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	4623      	mov	r3, r4
 800736a:	f7fa f841 	bl	80013f0 <HAL_HCD_HC_SubmitRequest>
 800736e:	4603      	mov	r3, r0
 8007370:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007372:	7bfb      	ldrb	r3, [r7, #15]
 8007374:	4618      	mov	r0, r3
 8007376:	f000 f863 	bl	8007440 <USBH_Get_USB_Status>
 800737a:	4603      	mov	r3, r0
 800737c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800737e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007380:	4618      	mov	r0, r3
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	bd90      	pop	{r4, r7, pc}

08007388 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	460b      	mov	r3, r1
 8007392:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800739a:	78fa      	ldrb	r2, [r7, #3]
 800739c:	4611      	mov	r1, r2
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fa fad5 	bl	800194e <HAL_HCD_HC_GetURBState>
 80073a4:	4603      	mov	r3, r0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b082      	sub	sp, #8
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	460b      	mov	r3, r1
 80073b8:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 80073ba:	20c8      	movs	r0, #200	; 0xc8
 80073bc:	f7f9 fc4a 	bl	8000c54 <HAL_Delay>
  return USBH_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b085      	sub	sp, #20
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	460b      	mov	r3, r1
 80073d4:	70fb      	strb	r3, [r7, #3]
 80073d6:	4613      	mov	r3, r2
 80073d8:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80073e0:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80073e2:	78fb      	ldrb	r3, [r7, #3]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	212c      	movs	r1, #44	; 0x2c
 80073e8:	fb01 f303 	mul.w	r3, r1, r3
 80073ec:	4413      	add	r3, r2
 80073ee:	333b      	adds	r3, #59	; 0x3b
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d009      	beq.n	800740a <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80073f6:	78fb      	ldrb	r3, [r7, #3]
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	212c      	movs	r1, #44	; 0x2c
 80073fc:	fb01 f303 	mul.w	r3, r1, r3
 8007400:	4413      	add	r3, r2
 8007402:	3354      	adds	r3, #84	; 0x54
 8007404:	78ba      	ldrb	r2, [r7, #2]
 8007406:	701a      	strb	r2, [r3, #0]
 8007408:	e008      	b.n	800741c <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	212c      	movs	r1, #44	; 0x2c
 8007410:	fb01 f303 	mul.w	r3, r1, r3
 8007414:	4413      	add	r3, r2
 8007416:	3355      	adds	r3, #85	; 0x55
 8007418:	78ba      	ldrb	r2, [r7, #2]
 800741a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b082      	sub	sp, #8
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7f9 fc0e 	bl	8000c54 <HAL_Delay>
}
 8007438:	bf00      	nop
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	4603      	mov	r3, r0
 8007448:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800744e:	79fb      	ldrb	r3, [r7, #7]
 8007450:	2b03      	cmp	r3, #3
 8007452:	d817      	bhi.n	8007484 <USBH_Get_USB_Status+0x44>
 8007454:	a201      	add	r2, pc, #4	; (adr r2, 800745c <USBH_Get_USB_Status+0x1c>)
 8007456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745a:	bf00      	nop
 800745c:	0800746d 	.word	0x0800746d
 8007460:	08007473 	.word	0x08007473
 8007464:	08007479 	.word	0x08007479
 8007468:	0800747f 	.word	0x0800747f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	73fb      	strb	r3, [r7, #15]
    break;
 8007470:	e00b      	b.n	800748a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007472:	2302      	movs	r3, #2
 8007474:	73fb      	strb	r3, [r7, #15]
    break;
 8007476:	e008      	b.n	800748a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007478:	2301      	movs	r3, #1
 800747a:	73fb      	strb	r3, [r7, #15]
    break;
 800747c:	e005      	b.n	800748a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800747e:	2302      	movs	r3, #2
 8007480:	73fb      	strb	r3, [r7, #15]
    break;
 8007482:	e002      	b.n	800748a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007484:	2302      	movs	r3, #2
 8007486:	73fb      	strb	r3, [r7, #15]
    break;
 8007488:	bf00      	nop
  }
  return usb_status;
 800748a:	7bfb      	ldrb	r3, [r7, #15]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <malloc>:
 8007498:	4b02      	ldr	r3, [pc, #8]	; (80074a4 <malloc+0xc>)
 800749a:	4601      	mov	r1, r0
 800749c:	6818      	ldr	r0, [r3, #0]
 800749e:	f000 b82b 	b.w	80074f8 <_malloc_r>
 80074a2:	bf00      	nop
 80074a4:	20000084 	.word	0x20000084

080074a8 <free>:
 80074a8:	4b02      	ldr	r3, [pc, #8]	; (80074b4 <free+0xc>)
 80074aa:	4601      	mov	r1, r0
 80074ac:	6818      	ldr	r0, [r3, #0]
 80074ae:	f000 ba53 	b.w	8007958 <_free_r>
 80074b2:	bf00      	nop
 80074b4:	20000084 	.word	0x20000084

080074b8 <sbrk_aligned>:
 80074b8:	b570      	push	{r4, r5, r6, lr}
 80074ba:	4e0e      	ldr	r6, [pc, #56]	; (80074f4 <sbrk_aligned+0x3c>)
 80074bc:	460c      	mov	r4, r1
 80074be:	6831      	ldr	r1, [r6, #0]
 80074c0:	4605      	mov	r5, r0
 80074c2:	b911      	cbnz	r1, 80074ca <sbrk_aligned+0x12>
 80074c4:	f000 f9f8 	bl	80078b8 <_sbrk_r>
 80074c8:	6030      	str	r0, [r6, #0]
 80074ca:	4621      	mov	r1, r4
 80074cc:	4628      	mov	r0, r5
 80074ce:	f000 f9f3 	bl	80078b8 <_sbrk_r>
 80074d2:	1c43      	adds	r3, r0, #1
 80074d4:	d00a      	beq.n	80074ec <sbrk_aligned+0x34>
 80074d6:	1cc4      	adds	r4, r0, #3
 80074d8:	f024 0403 	bic.w	r4, r4, #3
 80074dc:	42a0      	cmp	r0, r4
 80074de:	d007      	beq.n	80074f0 <sbrk_aligned+0x38>
 80074e0:	1a21      	subs	r1, r4, r0
 80074e2:	4628      	mov	r0, r5
 80074e4:	f000 f9e8 	bl	80078b8 <_sbrk_r>
 80074e8:	3001      	adds	r0, #1
 80074ea:	d101      	bne.n	80074f0 <sbrk_aligned+0x38>
 80074ec:	f04f 34ff 	mov.w	r4, #4294967295
 80074f0:	4620      	mov	r0, r4
 80074f2:	bd70      	pop	{r4, r5, r6, pc}
 80074f4:	20000864 	.word	0x20000864

080074f8 <_malloc_r>:
 80074f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074fc:	1ccd      	adds	r5, r1, #3
 80074fe:	f025 0503 	bic.w	r5, r5, #3
 8007502:	3508      	adds	r5, #8
 8007504:	2d0c      	cmp	r5, #12
 8007506:	bf38      	it	cc
 8007508:	250c      	movcc	r5, #12
 800750a:	2d00      	cmp	r5, #0
 800750c:	4607      	mov	r7, r0
 800750e:	db01      	blt.n	8007514 <_malloc_r+0x1c>
 8007510:	42a9      	cmp	r1, r5
 8007512:	d905      	bls.n	8007520 <_malloc_r+0x28>
 8007514:	230c      	movs	r3, #12
 8007516:	603b      	str	r3, [r7, #0]
 8007518:	2600      	movs	r6, #0
 800751a:	4630      	mov	r0, r6
 800751c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007520:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80075f4 <_malloc_r+0xfc>
 8007524:	f000 f868 	bl	80075f8 <__malloc_lock>
 8007528:	f8d8 3000 	ldr.w	r3, [r8]
 800752c:	461c      	mov	r4, r3
 800752e:	bb5c      	cbnz	r4, 8007588 <_malloc_r+0x90>
 8007530:	4629      	mov	r1, r5
 8007532:	4638      	mov	r0, r7
 8007534:	f7ff ffc0 	bl	80074b8 <sbrk_aligned>
 8007538:	1c43      	adds	r3, r0, #1
 800753a:	4604      	mov	r4, r0
 800753c:	d155      	bne.n	80075ea <_malloc_r+0xf2>
 800753e:	f8d8 4000 	ldr.w	r4, [r8]
 8007542:	4626      	mov	r6, r4
 8007544:	2e00      	cmp	r6, #0
 8007546:	d145      	bne.n	80075d4 <_malloc_r+0xdc>
 8007548:	2c00      	cmp	r4, #0
 800754a:	d048      	beq.n	80075de <_malloc_r+0xe6>
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	4631      	mov	r1, r6
 8007550:	4638      	mov	r0, r7
 8007552:	eb04 0903 	add.w	r9, r4, r3
 8007556:	f000 f9af 	bl	80078b8 <_sbrk_r>
 800755a:	4581      	cmp	r9, r0
 800755c:	d13f      	bne.n	80075de <_malloc_r+0xe6>
 800755e:	6821      	ldr	r1, [r4, #0]
 8007560:	1a6d      	subs	r5, r5, r1
 8007562:	4629      	mov	r1, r5
 8007564:	4638      	mov	r0, r7
 8007566:	f7ff ffa7 	bl	80074b8 <sbrk_aligned>
 800756a:	3001      	adds	r0, #1
 800756c:	d037      	beq.n	80075de <_malloc_r+0xe6>
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	442b      	add	r3, r5
 8007572:	6023      	str	r3, [r4, #0]
 8007574:	f8d8 3000 	ldr.w	r3, [r8]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d038      	beq.n	80075ee <_malloc_r+0xf6>
 800757c:	685a      	ldr	r2, [r3, #4]
 800757e:	42a2      	cmp	r2, r4
 8007580:	d12b      	bne.n	80075da <_malloc_r+0xe2>
 8007582:	2200      	movs	r2, #0
 8007584:	605a      	str	r2, [r3, #4]
 8007586:	e00f      	b.n	80075a8 <_malloc_r+0xb0>
 8007588:	6822      	ldr	r2, [r4, #0]
 800758a:	1b52      	subs	r2, r2, r5
 800758c:	d41f      	bmi.n	80075ce <_malloc_r+0xd6>
 800758e:	2a0b      	cmp	r2, #11
 8007590:	d917      	bls.n	80075c2 <_malloc_r+0xca>
 8007592:	1961      	adds	r1, r4, r5
 8007594:	42a3      	cmp	r3, r4
 8007596:	6025      	str	r5, [r4, #0]
 8007598:	bf18      	it	ne
 800759a:	6059      	strne	r1, [r3, #4]
 800759c:	6863      	ldr	r3, [r4, #4]
 800759e:	bf08      	it	eq
 80075a0:	f8c8 1000 	streq.w	r1, [r8]
 80075a4:	5162      	str	r2, [r4, r5]
 80075a6:	604b      	str	r3, [r1, #4]
 80075a8:	4638      	mov	r0, r7
 80075aa:	f104 060b 	add.w	r6, r4, #11
 80075ae:	f000 f829 	bl	8007604 <__malloc_unlock>
 80075b2:	f026 0607 	bic.w	r6, r6, #7
 80075b6:	1d23      	adds	r3, r4, #4
 80075b8:	1af2      	subs	r2, r6, r3
 80075ba:	d0ae      	beq.n	800751a <_malloc_r+0x22>
 80075bc:	1b9b      	subs	r3, r3, r6
 80075be:	50a3      	str	r3, [r4, r2]
 80075c0:	e7ab      	b.n	800751a <_malloc_r+0x22>
 80075c2:	42a3      	cmp	r3, r4
 80075c4:	6862      	ldr	r2, [r4, #4]
 80075c6:	d1dd      	bne.n	8007584 <_malloc_r+0x8c>
 80075c8:	f8c8 2000 	str.w	r2, [r8]
 80075cc:	e7ec      	b.n	80075a8 <_malloc_r+0xb0>
 80075ce:	4623      	mov	r3, r4
 80075d0:	6864      	ldr	r4, [r4, #4]
 80075d2:	e7ac      	b.n	800752e <_malloc_r+0x36>
 80075d4:	4634      	mov	r4, r6
 80075d6:	6876      	ldr	r6, [r6, #4]
 80075d8:	e7b4      	b.n	8007544 <_malloc_r+0x4c>
 80075da:	4613      	mov	r3, r2
 80075dc:	e7cc      	b.n	8007578 <_malloc_r+0x80>
 80075de:	230c      	movs	r3, #12
 80075e0:	603b      	str	r3, [r7, #0]
 80075e2:	4638      	mov	r0, r7
 80075e4:	f000 f80e 	bl	8007604 <__malloc_unlock>
 80075e8:	e797      	b.n	800751a <_malloc_r+0x22>
 80075ea:	6025      	str	r5, [r4, #0]
 80075ec:	e7dc      	b.n	80075a8 <_malloc_r+0xb0>
 80075ee:	605b      	str	r3, [r3, #4]
 80075f0:	deff      	udf	#255	; 0xff
 80075f2:	bf00      	nop
 80075f4:	20000860 	.word	0x20000860

080075f8 <__malloc_lock>:
 80075f8:	4801      	ldr	r0, [pc, #4]	; (8007600 <__malloc_lock+0x8>)
 80075fa:	f000 b9aa 	b.w	8007952 <__retarget_lock_acquire_recursive>
 80075fe:	bf00      	nop
 8007600:	200009a8 	.word	0x200009a8

08007604 <__malloc_unlock>:
 8007604:	4801      	ldr	r0, [pc, #4]	; (800760c <__malloc_unlock+0x8>)
 8007606:	f000 b9a5 	b.w	8007954 <__retarget_lock_release_recursive>
 800760a:	bf00      	nop
 800760c:	200009a8 	.word	0x200009a8

08007610 <std>:
 8007610:	2300      	movs	r3, #0
 8007612:	b510      	push	{r4, lr}
 8007614:	4604      	mov	r4, r0
 8007616:	e9c0 3300 	strd	r3, r3, [r0]
 800761a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800761e:	6083      	str	r3, [r0, #8]
 8007620:	8181      	strh	r1, [r0, #12]
 8007622:	6643      	str	r3, [r0, #100]	; 0x64
 8007624:	81c2      	strh	r2, [r0, #14]
 8007626:	6183      	str	r3, [r0, #24]
 8007628:	4619      	mov	r1, r3
 800762a:	2208      	movs	r2, #8
 800762c:	305c      	adds	r0, #92	; 0x5c
 800762e:	f000 f906 	bl	800783e <memset>
 8007632:	4b0d      	ldr	r3, [pc, #52]	; (8007668 <std+0x58>)
 8007634:	6263      	str	r3, [r4, #36]	; 0x24
 8007636:	4b0d      	ldr	r3, [pc, #52]	; (800766c <std+0x5c>)
 8007638:	62a3      	str	r3, [r4, #40]	; 0x28
 800763a:	4b0d      	ldr	r3, [pc, #52]	; (8007670 <std+0x60>)
 800763c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800763e:	4b0d      	ldr	r3, [pc, #52]	; (8007674 <std+0x64>)
 8007640:	6323      	str	r3, [r4, #48]	; 0x30
 8007642:	4b0d      	ldr	r3, [pc, #52]	; (8007678 <std+0x68>)
 8007644:	6224      	str	r4, [r4, #32]
 8007646:	429c      	cmp	r4, r3
 8007648:	d006      	beq.n	8007658 <std+0x48>
 800764a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800764e:	4294      	cmp	r4, r2
 8007650:	d002      	beq.n	8007658 <std+0x48>
 8007652:	33d0      	adds	r3, #208	; 0xd0
 8007654:	429c      	cmp	r4, r3
 8007656:	d105      	bne.n	8007664 <std+0x54>
 8007658:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800765c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007660:	f000 b976 	b.w	8007950 <__retarget_lock_init_recursive>
 8007664:	bd10      	pop	{r4, pc}
 8007666:	bf00      	nop
 8007668:	080077b9 	.word	0x080077b9
 800766c:	080077db 	.word	0x080077db
 8007670:	08007813 	.word	0x08007813
 8007674:	08007837 	.word	0x08007837
 8007678:	20000868 	.word	0x20000868

0800767c <stdio_exit_handler>:
 800767c:	4a02      	ldr	r2, [pc, #8]	; (8007688 <stdio_exit_handler+0xc>)
 800767e:	4903      	ldr	r1, [pc, #12]	; (800768c <stdio_exit_handler+0x10>)
 8007680:	4803      	ldr	r0, [pc, #12]	; (8007690 <stdio_exit_handler+0x14>)
 8007682:	f000 b869 	b.w	8007758 <_fwalk_sglue>
 8007686:	bf00      	nop
 8007688:	2000002c 	.word	0x2000002c
 800768c:	080080a5 	.word	0x080080a5
 8007690:	20000038 	.word	0x20000038

08007694 <cleanup_stdio>:
 8007694:	6841      	ldr	r1, [r0, #4]
 8007696:	4b0c      	ldr	r3, [pc, #48]	; (80076c8 <cleanup_stdio+0x34>)
 8007698:	4299      	cmp	r1, r3
 800769a:	b510      	push	{r4, lr}
 800769c:	4604      	mov	r4, r0
 800769e:	d001      	beq.n	80076a4 <cleanup_stdio+0x10>
 80076a0:	f000 fd00 	bl	80080a4 <_fflush_r>
 80076a4:	68a1      	ldr	r1, [r4, #8]
 80076a6:	4b09      	ldr	r3, [pc, #36]	; (80076cc <cleanup_stdio+0x38>)
 80076a8:	4299      	cmp	r1, r3
 80076aa:	d002      	beq.n	80076b2 <cleanup_stdio+0x1e>
 80076ac:	4620      	mov	r0, r4
 80076ae:	f000 fcf9 	bl	80080a4 <_fflush_r>
 80076b2:	68e1      	ldr	r1, [r4, #12]
 80076b4:	4b06      	ldr	r3, [pc, #24]	; (80076d0 <cleanup_stdio+0x3c>)
 80076b6:	4299      	cmp	r1, r3
 80076b8:	d004      	beq.n	80076c4 <cleanup_stdio+0x30>
 80076ba:	4620      	mov	r0, r4
 80076bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076c0:	f000 bcf0 	b.w	80080a4 <_fflush_r>
 80076c4:	bd10      	pop	{r4, pc}
 80076c6:	bf00      	nop
 80076c8:	20000868 	.word	0x20000868
 80076cc:	200008d0 	.word	0x200008d0
 80076d0:	20000938 	.word	0x20000938

080076d4 <global_stdio_init.part.0>:
 80076d4:	b510      	push	{r4, lr}
 80076d6:	4b0b      	ldr	r3, [pc, #44]	; (8007704 <global_stdio_init.part.0+0x30>)
 80076d8:	4c0b      	ldr	r4, [pc, #44]	; (8007708 <global_stdio_init.part.0+0x34>)
 80076da:	4a0c      	ldr	r2, [pc, #48]	; (800770c <global_stdio_init.part.0+0x38>)
 80076dc:	601a      	str	r2, [r3, #0]
 80076de:	4620      	mov	r0, r4
 80076e0:	2200      	movs	r2, #0
 80076e2:	2104      	movs	r1, #4
 80076e4:	f7ff ff94 	bl	8007610 <std>
 80076e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80076ec:	2201      	movs	r2, #1
 80076ee:	2109      	movs	r1, #9
 80076f0:	f7ff ff8e 	bl	8007610 <std>
 80076f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80076f8:	2202      	movs	r2, #2
 80076fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076fe:	2112      	movs	r1, #18
 8007700:	f7ff bf86 	b.w	8007610 <std>
 8007704:	200009a0 	.word	0x200009a0
 8007708:	20000868 	.word	0x20000868
 800770c:	0800767d 	.word	0x0800767d

08007710 <__sfp_lock_acquire>:
 8007710:	4801      	ldr	r0, [pc, #4]	; (8007718 <__sfp_lock_acquire+0x8>)
 8007712:	f000 b91e 	b.w	8007952 <__retarget_lock_acquire_recursive>
 8007716:	bf00      	nop
 8007718:	200009a9 	.word	0x200009a9

0800771c <__sfp_lock_release>:
 800771c:	4801      	ldr	r0, [pc, #4]	; (8007724 <__sfp_lock_release+0x8>)
 800771e:	f000 b919 	b.w	8007954 <__retarget_lock_release_recursive>
 8007722:	bf00      	nop
 8007724:	200009a9 	.word	0x200009a9

08007728 <__sinit>:
 8007728:	b510      	push	{r4, lr}
 800772a:	4604      	mov	r4, r0
 800772c:	f7ff fff0 	bl	8007710 <__sfp_lock_acquire>
 8007730:	6a23      	ldr	r3, [r4, #32]
 8007732:	b11b      	cbz	r3, 800773c <__sinit+0x14>
 8007734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007738:	f7ff bff0 	b.w	800771c <__sfp_lock_release>
 800773c:	4b04      	ldr	r3, [pc, #16]	; (8007750 <__sinit+0x28>)
 800773e:	6223      	str	r3, [r4, #32]
 8007740:	4b04      	ldr	r3, [pc, #16]	; (8007754 <__sinit+0x2c>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1f5      	bne.n	8007734 <__sinit+0xc>
 8007748:	f7ff ffc4 	bl	80076d4 <global_stdio_init.part.0>
 800774c:	e7f2      	b.n	8007734 <__sinit+0xc>
 800774e:	bf00      	nop
 8007750:	08007695 	.word	0x08007695
 8007754:	200009a0 	.word	0x200009a0

08007758 <_fwalk_sglue>:
 8007758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800775c:	4607      	mov	r7, r0
 800775e:	4688      	mov	r8, r1
 8007760:	4614      	mov	r4, r2
 8007762:	2600      	movs	r6, #0
 8007764:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007768:	f1b9 0901 	subs.w	r9, r9, #1
 800776c:	d505      	bpl.n	800777a <_fwalk_sglue+0x22>
 800776e:	6824      	ldr	r4, [r4, #0]
 8007770:	2c00      	cmp	r4, #0
 8007772:	d1f7      	bne.n	8007764 <_fwalk_sglue+0xc>
 8007774:	4630      	mov	r0, r6
 8007776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800777a:	89ab      	ldrh	r3, [r5, #12]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d907      	bls.n	8007790 <_fwalk_sglue+0x38>
 8007780:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007784:	3301      	adds	r3, #1
 8007786:	d003      	beq.n	8007790 <_fwalk_sglue+0x38>
 8007788:	4629      	mov	r1, r5
 800778a:	4638      	mov	r0, r7
 800778c:	47c0      	blx	r8
 800778e:	4306      	orrs	r6, r0
 8007790:	3568      	adds	r5, #104	; 0x68
 8007792:	e7e9      	b.n	8007768 <_fwalk_sglue+0x10>

08007794 <iprintf>:
 8007794:	b40f      	push	{r0, r1, r2, r3}
 8007796:	b507      	push	{r0, r1, r2, lr}
 8007798:	4906      	ldr	r1, [pc, #24]	; (80077b4 <iprintf+0x20>)
 800779a:	ab04      	add	r3, sp, #16
 800779c:	6808      	ldr	r0, [r1, #0]
 800779e:	f853 2b04 	ldr.w	r2, [r3], #4
 80077a2:	6881      	ldr	r1, [r0, #8]
 80077a4:	9301      	str	r3, [sp, #4]
 80077a6:	f000 f94d 	bl	8007a44 <_vfiprintf_r>
 80077aa:	b003      	add	sp, #12
 80077ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80077b0:	b004      	add	sp, #16
 80077b2:	4770      	bx	lr
 80077b4:	20000084 	.word	0x20000084

080077b8 <__sread>:
 80077b8:	b510      	push	{r4, lr}
 80077ba:	460c      	mov	r4, r1
 80077bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077c0:	f000 f868 	bl	8007894 <_read_r>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	bfab      	itete	ge
 80077c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077ca:	89a3      	ldrhlt	r3, [r4, #12]
 80077cc:	181b      	addge	r3, r3, r0
 80077ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077d2:	bfac      	ite	ge
 80077d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80077d6:	81a3      	strhlt	r3, [r4, #12]
 80077d8:	bd10      	pop	{r4, pc}

080077da <__swrite>:
 80077da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077de:	461f      	mov	r7, r3
 80077e0:	898b      	ldrh	r3, [r1, #12]
 80077e2:	05db      	lsls	r3, r3, #23
 80077e4:	4605      	mov	r5, r0
 80077e6:	460c      	mov	r4, r1
 80077e8:	4616      	mov	r6, r2
 80077ea:	d505      	bpl.n	80077f8 <__swrite+0x1e>
 80077ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077f0:	2302      	movs	r3, #2
 80077f2:	2200      	movs	r2, #0
 80077f4:	f000 f83c 	bl	8007870 <_lseek_r>
 80077f8:	89a3      	ldrh	r3, [r4, #12]
 80077fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007802:	81a3      	strh	r3, [r4, #12]
 8007804:	4632      	mov	r2, r6
 8007806:	463b      	mov	r3, r7
 8007808:	4628      	mov	r0, r5
 800780a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800780e:	f000 b863 	b.w	80078d8 <_write_r>

08007812 <__sseek>:
 8007812:	b510      	push	{r4, lr}
 8007814:	460c      	mov	r4, r1
 8007816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800781a:	f000 f829 	bl	8007870 <_lseek_r>
 800781e:	1c43      	adds	r3, r0, #1
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	bf15      	itete	ne
 8007824:	6560      	strne	r0, [r4, #84]	; 0x54
 8007826:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800782a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800782e:	81a3      	strheq	r3, [r4, #12]
 8007830:	bf18      	it	ne
 8007832:	81a3      	strhne	r3, [r4, #12]
 8007834:	bd10      	pop	{r4, pc}

08007836 <__sclose>:
 8007836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800783a:	f000 b809 	b.w	8007850 <_close_r>

0800783e <memset>:
 800783e:	4402      	add	r2, r0
 8007840:	4603      	mov	r3, r0
 8007842:	4293      	cmp	r3, r2
 8007844:	d100      	bne.n	8007848 <memset+0xa>
 8007846:	4770      	bx	lr
 8007848:	f803 1b01 	strb.w	r1, [r3], #1
 800784c:	e7f9      	b.n	8007842 <memset+0x4>
	...

08007850 <_close_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	4d06      	ldr	r5, [pc, #24]	; (800786c <_close_r+0x1c>)
 8007854:	2300      	movs	r3, #0
 8007856:	4604      	mov	r4, r0
 8007858:	4608      	mov	r0, r1
 800785a:	602b      	str	r3, [r5, #0]
 800785c:	f7f8 ffff 	bl	800085e <_close>
 8007860:	1c43      	adds	r3, r0, #1
 8007862:	d102      	bne.n	800786a <_close_r+0x1a>
 8007864:	682b      	ldr	r3, [r5, #0]
 8007866:	b103      	cbz	r3, 800786a <_close_r+0x1a>
 8007868:	6023      	str	r3, [r4, #0]
 800786a:	bd38      	pop	{r3, r4, r5, pc}
 800786c:	200009a4 	.word	0x200009a4

08007870 <_lseek_r>:
 8007870:	b538      	push	{r3, r4, r5, lr}
 8007872:	4d07      	ldr	r5, [pc, #28]	; (8007890 <_lseek_r+0x20>)
 8007874:	4604      	mov	r4, r0
 8007876:	4608      	mov	r0, r1
 8007878:	4611      	mov	r1, r2
 800787a:	2200      	movs	r2, #0
 800787c:	602a      	str	r2, [r5, #0]
 800787e:	461a      	mov	r2, r3
 8007880:	f7f9 f814 	bl	80008ac <_lseek>
 8007884:	1c43      	adds	r3, r0, #1
 8007886:	d102      	bne.n	800788e <_lseek_r+0x1e>
 8007888:	682b      	ldr	r3, [r5, #0]
 800788a:	b103      	cbz	r3, 800788e <_lseek_r+0x1e>
 800788c:	6023      	str	r3, [r4, #0]
 800788e:	bd38      	pop	{r3, r4, r5, pc}
 8007890:	200009a4 	.word	0x200009a4

08007894 <_read_r>:
 8007894:	b538      	push	{r3, r4, r5, lr}
 8007896:	4d07      	ldr	r5, [pc, #28]	; (80078b4 <_read_r+0x20>)
 8007898:	4604      	mov	r4, r0
 800789a:	4608      	mov	r0, r1
 800789c:	4611      	mov	r1, r2
 800789e:	2200      	movs	r2, #0
 80078a0:	602a      	str	r2, [r5, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	f7f8 ffa2 	bl	80007ec <_read>
 80078a8:	1c43      	adds	r3, r0, #1
 80078aa:	d102      	bne.n	80078b2 <_read_r+0x1e>
 80078ac:	682b      	ldr	r3, [r5, #0]
 80078ae:	b103      	cbz	r3, 80078b2 <_read_r+0x1e>
 80078b0:	6023      	str	r3, [r4, #0]
 80078b2:	bd38      	pop	{r3, r4, r5, pc}
 80078b4:	200009a4 	.word	0x200009a4

080078b8 <_sbrk_r>:
 80078b8:	b538      	push	{r3, r4, r5, lr}
 80078ba:	4d06      	ldr	r5, [pc, #24]	; (80078d4 <_sbrk_r+0x1c>)
 80078bc:	2300      	movs	r3, #0
 80078be:	4604      	mov	r4, r0
 80078c0:	4608      	mov	r0, r1
 80078c2:	602b      	str	r3, [r5, #0]
 80078c4:	f7f9 f800 	bl	80008c8 <_sbrk>
 80078c8:	1c43      	adds	r3, r0, #1
 80078ca:	d102      	bne.n	80078d2 <_sbrk_r+0x1a>
 80078cc:	682b      	ldr	r3, [r5, #0]
 80078ce:	b103      	cbz	r3, 80078d2 <_sbrk_r+0x1a>
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	bd38      	pop	{r3, r4, r5, pc}
 80078d4:	200009a4 	.word	0x200009a4

080078d8 <_write_r>:
 80078d8:	b538      	push	{r3, r4, r5, lr}
 80078da:	4d07      	ldr	r5, [pc, #28]	; (80078f8 <_write_r+0x20>)
 80078dc:	4604      	mov	r4, r0
 80078de:	4608      	mov	r0, r1
 80078e0:	4611      	mov	r1, r2
 80078e2:	2200      	movs	r2, #0
 80078e4:	602a      	str	r2, [r5, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	f7f8 ff9d 	bl	8000826 <_write>
 80078ec:	1c43      	adds	r3, r0, #1
 80078ee:	d102      	bne.n	80078f6 <_write_r+0x1e>
 80078f0:	682b      	ldr	r3, [r5, #0]
 80078f2:	b103      	cbz	r3, 80078f6 <_write_r+0x1e>
 80078f4:	6023      	str	r3, [r4, #0]
 80078f6:	bd38      	pop	{r3, r4, r5, pc}
 80078f8:	200009a4 	.word	0x200009a4

080078fc <__errno>:
 80078fc:	4b01      	ldr	r3, [pc, #4]	; (8007904 <__errno+0x8>)
 80078fe:	6818      	ldr	r0, [r3, #0]
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	20000084 	.word	0x20000084

08007908 <__libc_init_array>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	4d0d      	ldr	r5, [pc, #52]	; (8007940 <__libc_init_array+0x38>)
 800790c:	4c0d      	ldr	r4, [pc, #52]	; (8007944 <__libc_init_array+0x3c>)
 800790e:	1b64      	subs	r4, r4, r5
 8007910:	10a4      	asrs	r4, r4, #2
 8007912:	2600      	movs	r6, #0
 8007914:	42a6      	cmp	r6, r4
 8007916:	d109      	bne.n	800792c <__libc_init_array+0x24>
 8007918:	4d0b      	ldr	r5, [pc, #44]	; (8007948 <__libc_init_array+0x40>)
 800791a:	4c0c      	ldr	r4, [pc, #48]	; (800794c <__libc_init_array+0x44>)
 800791c:	f000 fd04 	bl	8008328 <_init>
 8007920:	1b64      	subs	r4, r4, r5
 8007922:	10a4      	asrs	r4, r4, #2
 8007924:	2600      	movs	r6, #0
 8007926:	42a6      	cmp	r6, r4
 8007928:	d105      	bne.n	8007936 <__libc_init_array+0x2e>
 800792a:	bd70      	pop	{r4, r5, r6, pc}
 800792c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007930:	4798      	blx	r3
 8007932:	3601      	adds	r6, #1
 8007934:	e7ee      	b.n	8007914 <__libc_init_array+0xc>
 8007936:	f855 3b04 	ldr.w	r3, [r5], #4
 800793a:	4798      	blx	r3
 800793c:	3601      	adds	r6, #1
 800793e:	e7f2      	b.n	8007926 <__libc_init_array+0x1e>
 8007940:	080084c4 	.word	0x080084c4
 8007944:	080084c4 	.word	0x080084c4
 8007948:	080084c4 	.word	0x080084c4
 800794c:	080084c8 	.word	0x080084c8

08007950 <__retarget_lock_init_recursive>:
 8007950:	4770      	bx	lr

08007952 <__retarget_lock_acquire_recursive>:
 8007952:	4770      	bx	lr

08007954 <__retarget_lock_release_recursive>:
 8007954:	4770      	bx	lr
	...

08007958 <_free_r>:
 8007958:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800795a:	2900      	cmp	r1, #0
 800795c:	d044      	beq.n	80079e8 <_free_r+0x90>
 800795e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007962:	9001      	str	r0, [sp, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	f1a1 0404 	sub.w	r4, r1, #4
 800796a:	bfb8      	it	lt
 800796c:	18e4      	addlt	r4, r4, r3
 800796e:	f7ff fe43 	bl	80075f8 <__malloc_lock>
 8007972:	4a1e      	ldr	r2, [pc, #120]	; (80079ec <_free_r+0x94>)
 8007974:	9801      	ldr	r0, [sp, #4]
 8007976:	6813      	ldr	r3, [r2, #0]
 8007978:	b933      	cbnz	r3, 8007988 <_free_r+0x30>
 800797a:	6063      	str	r3, [r4, #4]
 800797c:	6014      	str	r4, [r2, #0]
 800797e:	b003      	add	sp, #12
 8007980:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007984:	f7ff be3e 	b.w	8007604 <__malloc_unlock>
 8007988:	42a3      	cmp	r3, r4
 800798a:	d908      	bls.n	800799e <_free_r+0x46>
 800798c:	6825      	ldr	r5, [r4, #0]
 800798e:	1961      	adds	r1, r4, r5
 8007990:	428b      	cmp	r3, r1
 8007992:	bf01      	itttt	eq
 8007994:	6819      	ldreq	r1, [r3, #0]
 8007996:	685b      	ldreq	r3, [r3, #4]
 8007998:	1949      	addeq	r1, r1, r5
 800799a:	6021      	streq	r1, [r4, #0]
 800799c:	e7ed      	b.n	800797a <_free_r+0x22>
 800799e:	461a      	mov	r2, r3
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	b10b      	cbz	r3, 80079a8 <_free_r+0x50>
 80079a4:	42a3      	cmp	r3, r4
 80079a6:	d9fa      	bls.n	800799e <_free_r+0x46>
 80079a8:	6811      	ldr	r1, [r2, #0]
 80079aa:	1855      	adds	r5, r2, r1
 80079ac:	42a5      	cmp	r5, r4
 80079ae:	d10b      	bne.n	80079c8 <_free_r+0x70>
 80079b0:	6824      	ldr	r4, [r4, #0]
 80079b2:	4421      	add	r1, r4
 80079b4:	1854      	adds	r4, r2, r1
 80079b6:	42a3      	cmp	r3, r4
 80079b8:	6011      	str	r1, [r2, #0]
 80079ba:	d1e0      	bne.n	800797e <_free_r+0x26>
 80079bc:	681c      	ldr	r4, [r3, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	6053      	str	r3, [r2, #4]
 80079c2:	440c      	add	r4, r1
 80079c4:	6014      	str	r4, [r2, #0]
 80079c6:	e7da      	b.n	800797e <_free_r+0x26>
 80079c8:	d902      	bls.n	80079d0 <_free_r+0x78>
 80079ca:	230c      	movs	r3, #12
 80079cc:	6003      	str	r3, [r0, #0]
 80079ce:	e7d6      	b.n	800797e <_free_r+0x26>
 80079d0:	6825      	ldr	r5, [r4, #0]
 80079d2:	1961      	adds	r1, r4, r5
 80079d4:	428b      	cmp	r3, r1
 80079d6:	bf04      	itt	eq
 80079d8:	6819      	ldreq	r1, [r3, #0]
 80079da:	685b      	ldreq	r3, [r3, #4]
 80079dc:	6063      	str	r3, [r4, #4]
 80079de:	bf04      	itt	eq
 80079e0:	1949      	addeq	r1, r1, r5
 80079e2:	6021      	streq	r1, [r4, #0]
 80079e4:	6054      	str	r4, [r2, #4]
 80079e6:	e7ca      	b.n	800797e <_free_r+0x26>
 80079e8:	b003      	add	sp, #12
 80079ea:	bd30      	pop	{r4, r5, pc}
 80079ec:	20000860 	.word	0x20000860

080079f0 <__sfputc_r>:
 80079f0:	6893      	ldr	r3, [r2, #8]
 80079f2:	3b01      	subs	r3, #1
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	b410      	push	{r4}
 80079f8:	6093      	str	r3, [r2, #8]
 80079fa:	da08      	bge.n	8007a0e <__sfputc_r+0x1e>
 80079fc:	6994      	ldr	r4, [r2, #24]
 80079fe:	42a3      	cmp	r3, r4
 8007a00:	db01      	blt.n	8007a06 <__sfputc_r+0x16>
 8007a02:	290a      	cmp	r1, #10
 8007a04:	d103      	bne.n	8007a0e <__sfputc_r+0x1e>
 8007a06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a0a:	f000 bb73 	b.w	80080f4 <__swbuf_r>
 8007a0e:	6813      	ldr	r3, [r2, #0]
 8007a10:	1c58      	adds	r0, r3, #1
 8007a12:	6010      	str	r0, [r2, #0]
 8007a14:	7019      	strb	r1, [r3, #0]
 8007a16:	4608      	mov	r0, r1
 8007a18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <__sfputs_r>:
 8007a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a20:	4606      	mov	r6, r0
 8007a22:	460f      	mov	r7, r1
 8007a24:	4614      	mov	r4, r2
 8007a26:	18d5      	adds	r5, r2, r3
 8007a28:	42ac      	cmp	r4, r5
 8007a2a:	d101      	bne.n	8007a30 <__sfputs_r+0x12>
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	e007      	b.n	8007a40 <__sfputs_r+0x22>
 8007a30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a34:	463a      	mov	r2, r7
 8007a36:	4630      	mov	r0, r6
 8007a38:	f7ff ffda 	bl	80079f0 <__sfputc_r>
 8007a3c:	1c43      	adds	r3, r0, #1
 8007a3e:	d1f3      	bne.n	8007a28 <__sfputs_r+0xa>
 8007a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a44 <_vfiprintf_r>:
 8007a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a48:	460d      	mov	r5, r1
 8007a4a:	b09d      	sub	sp, #116	; 0x74
 8007a4c:	4614      	mov	r4, r2
 8007a4e:	4698      	mov	r8, r3
 8007a50:	4606      	mov	r6, r0
 8007a52:	b118      	cbz	r0, 8007a5c <_vfiprintf_r+0x18>
 8007a54:	6a03      	ldr	r3, [r0, #32]
 8007a56:	b90b      	cbnz	r3, 8007a5c <_vfiprintf_r+0x18>
 8007a58:	f7ff fe66 	bl	8007728 <__sinit>
 8007a5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a5e:	07d9      	lsls	r1, r3, #31
 8007a60:	d405      	bmi.n	8007a6e <_vfiprintf_r+0x2a>
 8007a62:	89ab      	ldrh	r3, [r5, #12]
 8007a64:	059a      	lsls	r2, r3, #22
 8007a66:	d402      	bmi.n	8007a6e <_vfiprintf_r+0x2a>
 8007a68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a6a:	f7ff ff72 	bl	8007952 <__retarget_lock_acquire_recursive>
 8007a6e:	89ab      	ldrh	r3, [r5, #12]
 8007a70:	071b      	lsls	r3, r3, #28
 8007a72:	d501      	bpl.n	8007a78 <_vfiprintf_r+0x34>
 8007a74:	692b      	ldr	r3, [r5, #16]
 8007a76:	b99b      	cbnz	r3, 8007aa0 <_vfiprintf_r+0x5c>
 8007a78:	4629      	mov	r1, r5
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f000 fb78 	bl	8008170 <__swsetup_r>
 8007a80:	b170      	cbz	r0, 8007aa0 <_vfiprintf_r+0x5c>
 8007a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a84:	07dc      	lsls	r4, r3, #31
 8007a86:	d504      	bpl.n	8007a92 <_vfiprintf_r+0x4e>
 8007a88:	f04f 30ff 	mov.w	r0, #4294967295
 8007a8c:	b01d      	add	sp, #116	; 0x74
 8007a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a92:	89ab      	ldrh	r3, [r5, #12]
 8007a94:	0598      	lsls	r0, r3, #22
 8007a96:	d4f7      	bmi.n	8007a88 <_vfiprintf_r+0x44>
 8007a98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a9a:	f7ff ff5b 	bl	8007954 <__retarget_lock_release_recursive>
 8007a9e:	e7f3      	b.n	8007a88 <_vfiprintf_r+0x44>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8007aa4:	2320      	movs	r3, #32
 8007aa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007aaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8007aae:	2330      	movs	r3, #48	; 0x30
 8007ab0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007c64 <_vfiprintf_r+0x220>
 8007ab4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ab8:	f04f 0901 	mov.w	r9, #1
 8007abc:	4623      	mov	r3, r4
 8007abe:	469a      	mov	sl, r3
 8007ac0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ac4:	b10a      	cbz	r2, 8007aca <_vfiprintf_r+0x86>
 8007ac6:	2a25      	cmp	r2, #37	; 0x25
 8007ac8:	d1f9      	bne.n	8007abe <_vfiprintf_r+0x7a>
 8007aca:	ebba 0b04 	subs.w	fp, sl, r4
 8007ace:	d00b      	beq.n	8007ae8 <_vfiprintf_r+0xa4>
 8007ad0:	465b      	mov	r3, fp
 8007ad2:	4622      	mov	r2, r4
 8007ad4:	4629      	mov	r1, r5
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	f7ff ffa1 	bl	8007a1e <__sfputs_r>
 8007adc:	3001      	adds	r0, #1
 8007ade:	f000 80a9 	beq.w	8007c34 <_vfiprintf_r+0x1f0>
 8007ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ae4:	445a      	add	r2, fp
 8007ae6:	9209      	str	r2, [sp, #36]	; 0x24
 8007ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 80a1 	beq.w	8007c34 <_vfiprintf_r+0x1f0>
 8007af2:	2300      	movs	r3, #0
 8007af4:	f04f 32ff 	mov.w	r2, #4294967295
 8007af8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007afc:	f10a 0a01 	add.w	sl, sl, #1
 8007b00:	9304      	str	r3, [sp, #16]
 8007b02:	9307      	str	r3, [sp, #28]
 8007b04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b08:	931a      	str	r3, [sp, #104]	; 0x68
 8007b0a:	4654      	mov	r4, sl
 8007b0c:	2205      	movs	r2, #5
 8007b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b12:	4854      	ldr	r0, [pc, #336]	; (8007c64 <_vfiprintf_r+0x220>)
 8007b14:	f7f8 fb64 	bl	80001e0 <memchr>
 8007b18:	9a04      	ldr	r2, [sp, #16]
 8007b1a:	b9d8      	cbnz	r0, 8007b54 <_vfiprintf_r+0x110>
 8007b1c:	06d1      	lsls	r1, r2, #27
 8007b1e:	bf44      	itt	mi
 8007b20:	2320      	movmi	r3, #32
 8007b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b26:	0713      	lsls	r3, r2, #28
 8007b28:	bf44      	itt	mi
 8007b2a:	232b      	movmi	r3, #43	; 0x2b
 8007b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b30:	f89a 3000 	ldrb.w	r3, [sl]
 8007b34:	2b2a      	cmp	r3, #42	; 0x2a
 8007b36:	d015      	beq.n	8007b64 <_vfiprintf_r+0x120>
 8007b38:	9a07      	ldr	r2, [sp, #28]
 8007b3a:	4654      	mov	r4, sl
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	f04f 0c0a 	mov.w	ip, #10
 8007b42:	4621      	mov	r1, r4
 8007b44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b48:	3b30      	subs	r3, #48	; 0x30
 8007b4a:	2b09      	cmp	r3, #9
 8007b4c:	d94d      	bls.n	8007bea <_vfiprintf_r+0x1a6>
 8007b4e:	b1b0      	cbz	r0, 8007b7e <_vfiprintf_r+0x13a>
 8007b50:	9207      	str	r2, [sp, #28]
 8007b52:	e014      	b.n	8007b7e <_vfiprintf_r+0x13a>
 8007b54:	eba0 0308 	sub.w	r3, r0, r8
 8007b58:	fa09 f303 	lsl.w	r3, r9, r3
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	9304      	str	r3, [sp, #16]
 8007b60:	46a2      	mov	sl, r4
 8007b62:	e7d2      	b.n	8007b0a <_vfiprintf_r+0xc6>
 8007b64:	9b03      	ldr	r3, [sp, #12]
 8007b66:	1d19      	adds	r1, r3, #4
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	9103      	str	r1, [sp, #12]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	bfbb      	ittet	lt
 8007b70:	425b      	neglt	r3, r3
 8007b72:	f042 0202 	orrlt.w	r2, r2, #2
 8007b76:	9307      	strge	r3, [sp, #28]
 8007b78:	9307      	strlt	r3, [sp, #28]
 8007b7a:	bfb8      	it	lt
 8007b7c:	9204      	strlt	r2, [sp, #16]
 8007b7e:	7823      	ldrb	r3, [r4, #0]
 8007b80:	2b2e      	cmp	r3, #46	; 0x2e
 8007b82:	d10c      	bne.n	8007b9e <_vfiprintf_r+0x15a>
 8007b84:	7863      	ldrb	r3, [r4, #1]
 8007b86:	2b2a      	cmp	r3, #42	; 0x2a
 8007b88:	d134      	bne.n	8007bf4 <_vfiprintf_r+0x1b0>
 8007b8a:	9b03      	ldr	r3, [sp, #12]
 8007b8c:	1d1a      	adds	r2, r3, #4
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	9203      	str	r2, [sp, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	bfb8      	it	lt
 8007b96:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b9a:	3402      	adds	r4, #2
 8007b9c:	9305      	str	r3, [sp, #20]
 8007b9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007c74 <_vfiprintf_r+0x230>
 8007ba2:	7821      	ldrb	r1, [r4, #0]
 8007ba4:	2203      	movs	r2, #3
 8007ba6:	4650      	mov	r0, sl
 8007ba8:	f7f8 fb1a 	bl	80001e0 <memchr>
 8007bac:	b138      	cbz	r0, 8007bbe <_vfiprintf_r+0x17a>
 8007bae:	9b04      	ldr	r3, [sp, #16]
 8007bb0:	eba0 000a 	sub.w	r0, r0, sl
 8007bb4:	2240      	movs	r2, #64	; 0x40
 8007bb6:	4082      	lsls	r2, r0
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	3401      	adds	r4, #1
 8007bbc:	9304      	str	r3, [sp, #16]
 8007bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bc2:	4829      	ldr	r0, [pc, #164]	; (8007c68 <_vfiprintf_r+0x224>)
 8007bc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bc8:	2206      	movs	r2, #6
 8007bca:	f7f8 fb09 	bl	80001e0 <memchr>
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	d03f      	beq.n	8007c52 <_vfiprintf_r+0x20e>
 8007bd2:	4b26      	ldr	r3, [pc, #152]	; (8007c6c <_vfiprintf_r+0x228>)
 8007bd4:	bb1b      	cbnz	r3, 8007c1e <_vfiprintf_r+0x1da>
 8007bd6:	9b03      	ldr	r3, [sp, #12]
 8007bd8:	3307      	adds	r3, #7
 8007bda:	f023 0307 	bic.w	r3, r3, #7
 8007bde:	3308      	adds	r3, #8
 8007be0:	9303      	str	r3, [sp, #12]
 8007be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007be4:	443b      	add	r3, r7
 8007be6:	9309      	str	r3, [sp, #36]	; 0x24
 8007be8:	e768      	b.n	8007abc <_vfiprintf_r+0x78>
 8007bea:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bee:	460c      	mov	r4, r1
 8007bf0:	2001      	movs	r0, #1
 8007bf2:	e7a6      	b.n	8007b42 <_vfiprintf_r+0xfe>
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	3401      	adds	r4, #1
 8007bf8:	9305      	str	r3, [sp, #20]
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	f04f 0c0a 	mov.w	ip, #10
 8007c00:	4620      	mov	r0, r4
 8007c02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c06:	3a30      	subs	r2, #48	; 0x30
 8007c08:	2a09      	cmp	r2, #9
 8007c0a:	d903      	bls.n	8007c14 <_vfiprintf_r+0x1d0>
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d0c6      	beq.n	8007b9e <_vfiprintf_r+0x15a>
 8007c10:	9105      	str	r1, [sp, #20]
 8007c12:	e7c4      	b.n	8007b9e <_vfiprintf_r+0x15a>
 8007c14:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c18:	4604      	mov	r4, r0
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e7f0      	b.n	8007c00 <_vfiprintf_r+0x1bc>
 8007c1e:	ab03      	add	r3, sp, #12
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	462a      	mov	r2, r5
 8007c24:	4b12      	ldr	r3, [pc, #72]	; (8007c70 <_vfiprintf_r+0x22c>)
 8007c26:	a904      	add	r1, sp, #16
 8007c28:	4630      	mov	r0, r6
 8007c2a:	f3af 8000 	nop.w
 8007c2e:	4607      	mov	r7, r0
 8007c30:	1c78      	adds	r0, r7, #1
 8007c32:	d1d6      	bne.n	8007be2 <_vfiprintf_r+0x19e>
 8007c34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c36:	07d9      	lsls	r1, r3, #31
 8007c38:	d405      	bmi.n	8007c46 <_vfiprintf_r+0x202>
 8007c3a:	89ab      	ldrh	r3, [r5, #12]
 8007c3c:	059a      	lsls	r2, r3, #22
 8007c3e:	d402      	bmi.n	8007c46 <_vfiprintf_r+0x202>
 8007c40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c42:	f7ff fe87 	bl	8007954 <__retarget_lock_release_recursive>
 8007c46:	89ab      	ldrh	r3, [r5, #12]
 8007c48:	065b      	lsls	r3, r3, #25
 8007c4a:	f53f af1d 	bmi.w	8007a88 <_vfiprintf_r+0x44>
 8007c4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c50:	e71c      	b.n	8007a8c <_vfiprintf_r+0x48>
 8007c52:	ab03      	add	r3, sp, #12
 8007c54:	9300      	str	r3, [sp, #0]
 8007c56:	462a      	mov	r2, r5
 8007c58:	4b05      	ldr	r3, [pc, #20]	; (8007c70 <_vfiprintf_r+0x22c>)
 8007c5a:	a904      	add	r1, sp, #16
 8007c5c:	4630      	mov	r0, r6
 8007c5e:	f000 f879 	bl	8007d54 <_printf_i>
 8007c62:	e7e4      	b.n	8007c2e <_vfiprintf_r+0x1ea>
 8007c64:	08008488 	.word	0x08008488
 8007c68:	08008492 	.word	0x08008492
 8007c6c:	00000000 	.word	0x00000000
 8007c70:	08007a1f 	.word	0x08007a1f
 8007c74:	0800848e 	.word	0x0800848e

08007c78 <_printf_common>:
 8007c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c7c:	4616      	mov	r6, r2
 8007c7e:	4699      	mov	r9, r3
 8007c80:	688a      	ldr	r2, [r1, #8]
 8007c82:	690b      	ldr	r3, [r1, #16]
 8007c84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	bfb8      	it	lt
 8007c8c:	4613      	movlt	r3, r2
 8007c8e:	6033      	str	r3, [r6, #0]
 8007c90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c94:	4607      	mov	r7, r0
 8007c96:	460c      	mov	r4, r1
 8007c98:	b10a      	cbz	r2, 8007c9e <_printf_common+0x26>
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	6033      	str	r3, [r6, #0]
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	0699      	lsls	r1, r3, #26
 8007ca2:	bf42      	ittt	mi
 8007ca4:	6833      	ldrmi	r3, [r6, #0]
 8007ca6:	3302      	addmi	r3, #2
 8007ca8:	6033      	strmi	r3, [r6, #0]
 8007caa:	6825      	ldr	r5, [r4, #0]
 8007cac:	f015 0506 	ands.w	r5, r5, #6
 8007cb0:	d106      	bne.n	8007cc0 <_printf_common+0x48>
 8007cb2:	f104 0a19 	add.w	sl, r4, #25
 8007cb6:	68e3      	ldr	r3, [r4, #12]
 8007cb8:	6832      	ldr	r2, [r6, #0]
 8007cba:	1a9b      	subs	r3, r3, r2
 8007cbc:	42ab      	cmp	r3, r5
 8007cbe:	dc26      	bgt.n	8007d0e <_printf_common+0x96>
 8007cc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cc4:	1e13      	subs	r3, r2, #0
 8007cc6:	6822      	ldr	r2, [r4, #0]
 8007cc8:	bf18      	it	ne
 8007cca:	2301      	movne	r3, #1
 8007ccc:	0692      	lsls	r2, r2, #26
 8007cce:	d42b      	bmi.n	8007d28 <_printf_common+0xb0>
 8007cd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cd4:	4649      	mov	r1, r9
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	47c0      	blx	r8
 8007cda:	3001      	adds	r0, #1
 8007cdc:	d01e      	beq.n	8007d1c <_printf_common+0xa4>
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	6922      	ldr	r2, [r4, #16]
 8007ce2:	f003 0306 	and.w	r3, r3, #6
 8007ce6:	2b04      	cmp	r3, #4
 8007ce8:	bf02      	ittt	eq
 8007cea:	68e5      	ldreq	r5, [r4, #12]
 8007cec:	6833      	ldreq	r3, [r6, #0]
 8007cee:	1aed      	subeq	r5, r5, r3
 8007cf0:	68a3      	ldr	r3, [r4, #8]
 8007cf2:	bf0c      	ite	eq
 8007cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cf8:	2500      	movne	r5, #0
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	bfc4      	itt	gt
 8007cfe:	1a9b      	subgt	r3, r3, r2
 8007d00:	18ed      	addgt	r5, r5, r3
 8007d02:	2600      	movs	r6, #0
 8007d04:	341a      	adds	r4, #26
 8007d06:	42b5      	cmp	r5, r6
 8007d08:	d11a      	bne.n	8007d40 <_printf_common+0xc8>
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	e008      	b.n	8007d20 <_printf_common+0xa8>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	4652      	mov	r2, sl
 8007d12:	4649      	mov	r1, r9
 8007d14:	4638      	mov	r0, r7
 8007d16:	47c0      	blx	r8
 8007d18:	3001      	adds	r0, #1
 8007d1a:	d103      	bne.n	8007d24 <_printf_common+0xac>
 8007d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d24:	3501      	adds	r5, #1
 8007d26:	e7c6      	b.n	8007cb6 <_printf_common+0x3e>
 8007d28:	18e1      	adds	r1, r4, r3
 8007d2a:	1c5a      	adds	r2, r3, #1
 8007d2c:	2030      	movs	r0, #48	; 0x30
 8007d2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d32:	4422      	add	r2, r4
 8007d34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d3c:	3302      	adds	r3, #2
 8007d3e:	e7c7      	b.n	8007cd0 <_printf_common+0x58>
 8007d40:	2301      	movs	r3, #1
 8007d42:	4622      	mov	r2, r4
 8007d44:	4649      	mov	r1, r9
 8007d46:	4638      	mov	r0, r7
 8007d48:	47c0      	blx	r8
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	d0e6      	beq.n	8007d1c <_printf_common+0xa4>
 8007d4e:	3601      	adds	r6, #1
 8007d50:	e7d9      	b.n	8007d06 <_printf_common+0x8e>
	...

08007d54 <_printf_i>:
 8007d54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d58:	7e0f      	ldrb	r7, [r1, #24]
 8007d5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d5c:	2f78      	cmp	r7, #120	; 0x78
 8007d5e:	4691      	mov	r9, r2
 8007d60:	4680      	mov	r8, r0
 8007d62:	460c      	mov	r4, r1
 8007d64:	469a      	mov	sl, r3
 8007d66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d6a:	d807      	bhi.n	8007d7c <_printf_i+0x28>
 8007d6c:	2f62      	cmp	r7, #98	; 0x62
 8007d6e:	d80a      	bhi.n	8007d86 <_printf_i+0x32>
 8007d70:	2f00      	cmp	r7, #0
 8007d72:	f000 80d4 	beq.w	8007f1e <_printf_i+0x1ca>
 8007d76:	2f58      	cmp	r7, #88	; 0x58
 8007d78:	f000 80c0 	beq.w	8007efc <_printf_i+0x1a8>
 8007d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d84:	e03a      	b.n	8007dfc <_printf_i+0xa8>
 8007d86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d8a:	2b15      	cmp	r3, #21
 8007d8c:	d8f6      	bhi.n	8007d7c <_printf_i+0x28>
 8007d8e:	a101      	add	r1, pc, #4	; (adr r1, 8007d94 <_printf_i+0x40>)
 8007d90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d94:	08007ded 	.word	0x08007ded
 8007d98:	08007e01 	.word	0x08007e01
 8007d9c:	08007d7d 	.word	0x08007d7d
 8007da0:	08007d7d 	.word	0x08007d7d
 8007da4:	08007d7d 	.word	0x08007d7d
 8007da8:	08007d7d 	.word	0x08007d7d
 8007dac:	08007e01 	.word	0x08007e01
 8007db0:	08007d7d 	.word	0x08007d7d
 8007db4:	08007d7d 	.word	0x08007d7d
 8007db8:	08007d7d 	.word	0x08007d7d
 8007dbc:	08007d7d 	.word	0x08007d7d
 8007dc0:	08007f05 	.word	0x08007f05
 8007dc4:	08007e2d 	.word	0x08007e2d
 8007dc8:	08007ebf 	.word	0x08007ebf
 8007dcc:	08007d7d 	.word	0x08007d7d
 8007dd0:	08007d7d 	.word	0x08007d7d
 8007dd4:	08007f27 	.word	0x08007f27
 8007dd8:	08007d7d 	.word	0x08007d7d
 8007ddc:	08007e2d 	.word	0x08007e2d
 8007de0:	08007d7d 	.word	0x08007d7d
 8007de4:	08007d7d 	.word	0x08007d7d
 8007de8:	08007ec7 	.word	0x08007ec7
 8007dec:	682b      	ldr	r3, [r5, #0]
 8007dee:	1d1a      	adds	r2, r3, #4
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	602a      	str	r2, [r5, #0]
 8007df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007df8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e09f      	b.n	8007f40 <_printf_i+0x1ec>
 8007e00:	6820      	ldr	r0, [r4, #0]
 8007e02:	682b      	ldr	r3, [r5, #0]
 8007e04:	0607      	lsls	r7, r0, #24
 8007e06:	f103 0104 	add.w	r1, r3, #4
 8007e0a:	6029      	str	r1, [r5, #0]
 8007e0c:	d501      	bpl.n	8007e12 <_printf_i+0xbe>
 8007e0e:	681e      	ldr	r6, [r3, #0]
 8007e10:	e003      	b.n	8007e1a <_printf_i+0xc6>
 8007e12:	0646      	lsls	r6, r0, #25
 8007e14:	d5fb      	bpl.n	8007e0e <_printf_i+0xba>
 8007e16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007e1a:	2e00      	cmp	r6, #0
 8007e1c:	da03      	bge.n	8007e26 <_printf_i+0xd2>
 8007e1e:	232d      	movs	r3, #45	; 0x2d
 8007e20:	4276      	negs	r6, r6
 8007e22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e26:	485a      	ldr	r0, [pc, #360]	; (8007f90 <_printf_i+0x23c>)
 8007e28:	230a      	movs	r3, #10
 8007e2a:	e012      	b.n	8007e52 <_printf_i+0xfe>
 8007e2c:	682b      	ldr	r3, [r5, #0]
 8007e2e:	6820      	ldr	r0, [r4, #0]
 8007e30:	1d19      	adds	r1, r3, #4
 8007e32:	6029      	str	r1, [r5, #0]
 8007e34:	0605      	lsls	r5, r0, #24
 8007e36:	d501      	bpl.n	8007e3c <_printf_i+0xe8>
 8007e38:	681e      	ldr	r6, [r3, #0]
 8007e3a:	e002      	b.n	8007e42 <_printf_i+0xee>
 8007e3c:	0641      	lsls	r1, r0, #25
 8007e3e:	d5fb      	bpl.n	8007e38 <_printf_i+0xe4>
 8007e40:	881e      	ldrh	r6, [r3, #0]
 8007e42:	4853      	ldr	r0, [pc, #332]	; (8007f90 <_printf_i+0x23c>)
 8007e44:	2f6f      	cmp	r7, #111	; 0x6f
 8007e46:	bf0c      	ite	eq
 8007e48:	2308      	moveq	r3, #8
 8007e4a:	230a      	movne	r3, #10
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e52:	6865      	ldr	r5, [r4, #4]
 8007e54:	60a5      	str	r5, [r4, #8]
 8007e56:	2d00      	cmp	r5, #0
 8007e58:	bfa2      	ittt	ge
 8007e5a:	6821      	ldrge	r1, [r4, #0]
 8007e5c:	f021 0104 	bicge.w	r1, r1, #4
 8007e60:	6021      	strge	r1, [r4, #0]
 8007e62:	b90e      	cbnz	r6, 8007e68 <_printf_i+0x114>
 8007e64:	2d00      	cmp	r5, #0
 8007e66:	d04b      	beq.n	8007f00 <_printf_i+0x1ac>
 8007e68:	4615      	mov	r5, r2
 8007e6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e6e:	fb03 6711 	mls	r7, r3, r1, r6
 8007e72:	5dc7      	ldrb	r7, [r0, r7]
 8007e74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e78:	4637      	mov	r7, r6
 8007e7a:	42bb      	cmp	r3, r7
 8007e7c:	460e      	mov	r6, r1
 8007e7e:	d9f4      	bls.n	8007e6a <_printf_i+0x116>
 8007e80:	2b08      	cmp	r3, #8
 8007e82:	d10b      	bne.n	8007e9c <_printf_i+0x148>
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	07de      	lsls	r6, r3, #31
 8007e88:	d508      	bpl.n	8007e9c <_printf_i+0x148>
 8007e8a:	6923      	ldr	r3, [r4, #16]
 8007e8c:	6861      	ldr	r1, [r4, #4]
 8007e8e:	4299      	cmp	r1, r3
 8007e90:	bfde      	ittt	le
 8007e92:	2330      	movle	r3, #48	; 0x30
 8007e94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e9c:	1b52      	subs	r2, r2, r5
 8007e9e:	6122      	str	r2, [r4, #16]
 8007ea0:	f8cd a000 	str.w	sl, [sp]
 8007ea4:	464b      	mov	r3, r9
 8007ea6:	aa03      	add	r2, sp, #12
 8007ea8:	4621      	mov	r1, r4
 8007eaa:	4640      	mov	r0, r8
 8007eac:	f7ff fee4 	bl	8007c78 <_printf_common>
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	d14a      	bne.n	8007f4a <_printf_i+0x1f6>
 8007eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb8:	b004      	add	sp, #16
 8007eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ebe:	6823      	ldr	r3, [r4, #0]
 8007ec0:	f043 0320 	orr.w	r3, r3, #32
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	4833      	ldr	r0, [pc, #204]	; (8007f94 <_printf_i+0x240>)
 8007ec8:	2778      	movs	r7, #120	; 0x78
 8007eca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	6829      	ldr	r1, [r5, #0]
 8007ed2:	061f      	lsls	r7, r3, #24
 8007ed4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ed8:	d402      	bmi.n	8007ee0 <_printf_i+0x18c>
 8007eda:	065f      	lsls	r7, r3, #25
 8007edc:	bf48      	it	mi
 8007ede:	b2b6      	uxthmi	r6, r6
 8007ee0:	07df      	lsls	r7, r3, #31
 8007ee2:	bf48      	it	mi
 8007ee4:	f043 0320 	orrmi.w	r3, r3, #32
 8007ee8:	6029      	str	r1, [r5, #0]
 8007eea:	bf48      	it	mi
 8007eec:	6023      	strmi	r3, [r4, #0]
 8007eee:	b91e      	cbnz	r6, 8007ef8 <_printf_i+0x1a4>
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	f023 0320 	bic.w	r3, r3, #32
 8007ef6:	6023      	str	r3, [r4, #0]
 8007ef8:	2310      	movs	r3, #16
 8007efa:	e7a7      	b.n	8007e4c <_printf_i+0xf8>
 8007efc:	4824      	ldr	r0, [pc, #144]	; (8007f90 <_printf_i+0x23c>)
 8007efe:	e7e4      	b.n	8007eca <_printf_i+0x176>
 8007f00:	4615      	mov	r5, r2
 8007f02:	e7bd      	b.n	8007e80 <_printf_i+0x12c>
 8007f04:	682b      	ldr	r3, [r5, #0]
 8007f06:	6826      	ldr	r6, [r4, #0]
 8007f08:	6961      	ldr	r1, [r4, #20]
 8007f0a:	1d18      	adds	r0, r3, #4
 8007f0c:	6028      	str	r0, [r5, #0]
 8007f0e:	0635      	lsls	r5, r6, #24
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	d501      	bpl.n	8007f18 <_printf_i+0x1c4>
 8007f14:	6019      	str	r1, [r3, #0]
 8007f16:	e002      	b.n	8007f1e <_printf_i+0x1ca>
 8007f18:	0670      	lsls	r0, r6, #25
 8007f1a:	d5fb      	bpl.n	8007f14 <_printf_i+0x1c0>
 8007f1c:	8019      	strh	r1, [r3, #0]
 8007f1e:	2300      	movs	r3, #0
 8007f20:	6123      	str	r3, [r4, #16]
 8007f22:	4615      	mov	r5, r2
 8007f24:	e7bc      	b.n	8007ea0 <_printf_i+0x14c>
 8007f26:	682b      	ldr	r3, [r5, #0]
 8007f28:	1d1a      	adds	r2, r3, #4
 8007f2a:	602a      	str	r2, [r5, #0]
 8007f2c:	681d      	ldr	r5, [r3, #0]
 8007f2e:	6862      	ldr	r2, [r4, #4]
 8007f30:	2100      	movs	r1, #0
 8007f32:	4628      	mov	r0, r5
 8007f34:	f7f8 f954 	bl	80001e0 <memchr>
 8007f38:	b108      	cbz	r0, 8007f3e <_printf_i+0x1ea>
 8007f3a:	1b40      	subs	r0, r0, r5
 8007f3c:	6060      	str	r0, [r4, #4]
 8007f3e:	6863      	ldr	r3, [r4, #4]
 8007f40:	6123      	str	r3, [r4, #16]
 8007f42:	2300      	movs	r3, #0
 8007f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f48:	e7aa      	b.n	8007ea0 <_printf_i+0x14c>
 8007f4a:	6923      	ldr	r3, [r4, #16]
 8007f4c:	462a      	mov	r2, r5
 8007f4e:	4649      	mov	r1, r9
 8007f50:	4640      	mov	r0, r8
 8007f52:	47d0      	blx	sl
 8007f54:	3001      	adds	r0, #1
 8007f56:	d0ad      	beq.n	8007eb4 <_printf_i+0x160>
 8007f58:	6823      	ldr	r3, [r4, #0]
 8007f5a:	079b      	lsls	r3, r3, #30
 8007f5c:	d413      	bmi.n	8007f86 <_printf_i+0x232>
 8007f5e:	68e0      	ldr	r0, [r4, #12]
 8007f60:	9b03      	ldr	r3, [sp, #12]
 8007f62:	4298      	cmp	r0, r3
 8007f64:	bfb8      	it	lt
 8007f66:	4618      	movlt	r0, r3
 8007f68:	e7a6      	b.n	8007eb8 <_printf_i+0x164>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	4632      	mov	r2, r6
 8007f6e:	4649      	mov	r1, r9
 8007f70:	4640      	mov	r0, r8
 8007f72:	47d0      	blx	sl
 8007f74:	3001      	adds	r0, #1
 8007f76:	d09d      	beq.n	8007eb4 <_printf_i+0x160>
 8007f78:	3501      	adds	r5, #1
 8007f7a:	68e3      	ldr	r3, [r4, #12]
 8007f7c:	9903      	ldr	r1, [sp, #12]
 8007f7e:	1a5b      	subs	r3, r3, r1
 8007f80:	42ab      	cmp	r3, r5
 8007f82:	dcf2      	bgt.n	8007f6a <_printf_i+0x216>
 8007f84:	e7eb      	b.n	8007f5e <_printf_i+0x20a>
 8007f86:	2500      	movs	r5, #0
 8007f88:	f104 0619 	add.w	r6, r4, #25
 8007f8c:	e7f5      	b.n	8007f7a <_printf_i+0x226>
 8007f8e:	bf00      	nop
 8007f90:	08008499 	.word	0x08008499
 8007f94:	080084aa 	.word	0x080084aa

08007f98 <__sflush_r>:
 8007f98:	898a      	ldrh	r2, [r1, #12]
 8007f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f9e:	4605      	mov	r5, r0
 8007fa0:	0710      	lsls	r0, r2, #28
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	d458      	bmi.n	8008058 <__sflush_r+0xc0>
 8007fa6:	684b      	ldr	r3, [r1, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	dc05      	bgt.n	8007fb8 <__sflush_r+0x20>
 8007fac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	dc02      	bgt.n	8007fb8 <__sflush_r+0x20>
 8007fb2:	2000      	movs	r0, #0
 8007fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fba:	2e00      	cmp	r6, #0
 8007fbc:	d0f9      	beq.n	8007fb2 <__sflush_r+0x1a>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fc4:	682f      	ldr	r7, [r5, #0]
 8007fc6:	6a21      	ldr	r1, [r4, #32]
 8007fc8:	602b      	str	r3, [r5, #0]
 8007fca:	d032      	beq.n	8008032 <__sflush_r+0x9a>
 8007fcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fce:	89a3      	ldrh	r3, [r4, #12]
 8007fd0:	075a      	lsls	r2, r3, #29
 8007fd2:	d505      	bpl.n	8007fe0 <__sflush_r+0x48>
 8007fd4:	6863      	ldr	r3, [r4, #4]
 8007fd6:	1ac0      	subs	r0, r0, r3
 8007fd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fda:	b10b      	cbz	r3, 8007fe0 <__sflush_r+0x48>
 8007fdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fde:	1ac0      	subs	r0, r0, r3
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fe6:	6a21      	ldr	r1, [r4, #32]
 8007fe8:	4628      	mov	r0, r5
 8007fea:	47b0      	blx	r6
 8007fec:	1c43      	adds	r3, r0, #1
 8007fee:	89a3      	ldrh	r3, [r4, #12]
 8007ff0:	d106      	bne.n	8008000 <__sflush_r+0x68>
 8007ff2:	6829      	ldr	r1, [r5, #0]
 8007ff4:	291d      	cmp	r1, #29
 8007ff6:	d82b      	bhi.n	8008050 <__sflush_r+0xb8>
 8007ff8:	4a29      	ldr	r2, [pc, #164]	; (80080a0 <__sflush_r+0x108>)
 8007ffa:	410a      	asrs	r2, r1
 8007ffc:	07d6      	lsls	r6, r2, #31
 8007ffe:	d427      	bmi.n	8008050 <__sflush_r+0xb8>
 8008000:	2200      	movs	r2, #0
 8008002:	6062      	str	r2, [r4, #4]
 8008004:	04d9      	lsls	r1, r3, #19
 8008006:	6922      	ldr	r2, [r4, #16]
 8008008:	6022      	str	r2, [r4, #0]
 800800a:	d504      	bpl.n	8008016 <__sflush_r+0x7e>
 800800c:	1c42      	adds	r2, r0, #1
 800800e:	d101      	bne.n	8008014 <__sflush_r+0x7c>
 8008010:	682b      	ldr	r3, [r5, #0]
 8008012:	b903      	cbnz	r3, 8008016 <__sflush_r+0x7e>
 8008014:	6560      	str	r0, [r4, #84]	; 0x54
 8008016:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008018:	602f      	str	r7, [r5, #0]
 800801a:	2900      	cmp	r1, #0
 800801c:	d0c9      	beq.n	8007fb2 <__sflush_r+0x1a>
 800801e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008022:	4299      	cmp	r1, r3
 8008024:	d002      	beq.n	800802c <__sflush_r+0x94>
 8008026:	4628      	mov	r0, r5
 8008028:	f7ff fc96 	bl	8007958 <_free_r>
 800802c:	2000      	movs	r0, #0
 800802e:	6360      	str	r0, [r4, #52]	; 0x34
 8008030:	e7c0      	b.n	8007fb4 <__sflush_r+0x1c>
 8008032:	2301      	movs	r3, #1
 8008034:	4628      	mov	r0, r5
 8008036:	47b0      	blx	r6
 8008038:	1c41      	adds	r1, r0, #1
 800803a:	d1c8      	bne.n	8007fce <__sflush_r+0x36>
 800803c:	682b      	ldr	r3, [r5, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d0c5      	beq.n	8007fce <__sflush_r+0x36>
 8008042:	2b1d      	cmp	r3, #29
 8008044:	d001      	beq.n	800804a <__sflush_r+0xb2>
 8008046:	2b16      	cmp	r3, #22
 8008048:	d101      	bne.n	800804e <__sflush_r+0xb6>
 800804a:	602f      	str	r7, [r5, #0]
 800804c:	e7b1      	b.n	8007fb2 <__sflush_r+0x1a>
 800804e:	89a3      	ldrh	r3, [r4, #12]
 8008050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008054:	81a3      	strh	r3, [r4, #12]
 8008056:	e7ad      	b.n	8007fb4 <__sflush_r+0x1c>
 8008058:	690f      	ldr	r7, [r1, #16]
 800805a:	2f00      	cmp	r7, #0
 800805c:	d0a9      	beq.n	8007fb2 <__sflush_r+0x1a>
 800805e:	0793      	lsls	r3, r2, #30
 8008060:	680e      	ldr	r6, [r1, #0]
 8008062:	bf08      	it	eq
 8008064:	694b      	ldreq	r3, [r1, #20]
 8008066:	600f      	str	r7, [r1, #0]
 8008068:	bf18      	it	ne
 800806a:	2300      	movne	r3, #0
 800806c:	eba6 0807 	sub.w	r8, r6, r7
 8008070:	608b      	str	r3, [r1, #8]
 8008072:	f1b8 0f00 	cmp.w	r8, #0
 8008076:	dd9c      	ble.n	8007fb2 <__sflush_r+0x1a>
 8008078:	6a21      	ldr	r1, [r4, #32]
 800807a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800807c:	4643      	mov	r3, r8
 800807e:	463a      	mov	r2, r7
 8008080:	4628      	mov	r0, r5
 8008082:	47b0      	blx	r6
 8008084:	2800      	cmp	r0, #0
 8008086:	dc06      	bgt.n	8008096 <__sflush_r+0xfe>
 8008088:	89a3      	ldrh	r3, [r4, #12]
 800808a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800808e:	81a3      	strh	r3, [r4, #12]
 8008090:	f04f 30ff 	mov.w	r0, #4294967295
 8008094:	e78e      	b.n	8007fb4 <__sflush_r+0x1c>
 8008096:	4407      	add	r7, r0
 8008098:	eba8 0800 	sub.w	r8, r8, r0
 800809c:	e7e9      	b.n	8008072 <__sflush_r+0xda>
 800809e:	bf00      	nop
 80080a0:	dfbffffe 	.word	0xdfbffffe

080080a4 <_fflush_r>:
 80080a4:	b538      	push	{r3, r4, r5, lr}
 80080a6:	690b      	ldr	r3, [r1, #16]
 80080a8:	4605      	mov	r5, r0
 80080aa:	460c      	mov	r4, r1
 80080ac:	b913      	cbnz	r3, 80080b4 <_fflush_r+0x10>
 80080ae:	2500      	movs	r5, #0
 80080b0:	4628      	mov	r0, r5
 80080b2:	bd38      	pop	{r3, r4, r5, pc}
 80080b4:	b118      	cbz	r0, 80080be <_fflush_r+0x1a>
 80080b6:	6a03      	ldr	r3, [r0, #32]
 80080b8:	b90b      	cbnz	r3, 80080be <_fflush_r+0x1a>
 80080ba:	f7ff fb35 	bl	8007728 <__sinit>
 80080be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d0f3      	beq.n	80080ae <_fflush_r+0xa>
 80080c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080c8:	07d0      	lsls	r0, r2, #31
 80080ca:	d404      	bmi.n	80080d6 <_fflush_r+0x32>
 80080cc:	0599      	lsls	r1, r3, #22
 80080ce:	d402      	bmi.n	80080d6 <_fflush_r+0x32>
 80080d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080d2:	f7ff fc3e 	bl	8007952 <__retarget_lock_acquire_recursive>
 80080d6:	4628      	mov	r0, r5
 80080d8:	4621      	mov	r1, r4
 80080da:	f7ff ff5d 	bl	8007f98 <__sflush_r>
 80080de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080e0:	07da      	lsls	r2, r3, #31
 80080e2:	4605      	mov	r5, r0
 80080e4:	d4e4      	bmi.n	80080b0 <_fflush_r+0xc>
 80080e6:	89a3      	ldrh	r3, [r4, #12]
 80080e8:	059b      	lsls	r3, r3, #22
 80080ea:	d4e1      	bmi.n	80080b0 <_fflush_r+0xc>
 80080ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080ee:	f7ff fc31 	bl	8007954 <__retarget_lock_release_recursive>
 80080f2:	e7dd      	b.n	80080b0 <_fflush_r+0xc>

080080f4 <__swbuf_r>:
 80080f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f6:	460e      	mov	r6, r1
 80080f8:	4614      	mov	r4, r2
 80080fa:	4605      	mov	r5, r0
 80080fc:	b118      	cbz	r0, 8008106 <__swbuf_r+0x12>
 80080fe:	6a03      	ldr	r3, [r0, #32]
 8008100:	b90b      	cbnz	r3, 8008106 <__swbuf_r+0x12>
 8008102:	f7ff fb11 	bl	8007728 <__sinit>
 8008106:	69a3      	ldr	r3, [r4, #24]
 8008108:	60a3      	str	r3, [r4, #8]
 800810a:	89a3      	ldrh	r3, [r4, #12]
 800810c:	071a      	lsls	r2, r3, #28
 800810e:	d525      	bpl.n	800815c <__swbuf_r+0x68>
 8008110:	6923      	ldr	r3, [r4, #16]
 8008112:	b31b      	cbz	r3, 800815c <__swbuf_r+0x68>
 8008114:	6823      	ldr	r3, [r4, #0]
 8008116:	6922      	ldr	r2, [r4, #16]
 8008118:	1a98      	subs	r0, r3, r2
 800811a:	6963      	ldr	r3, [r4, #20]
 800811c:	b2f6      	uxtb	r6, r6
 800811e:	4283      	cmp	r3, r0
 8008120:	4637      	mov	r7, r6
 8008122:	dc04      	bgt.n	800812e <__swbuf_r+0x3a>
 8008124:	4621      	mov	r1, r4
 8008126:	4628      	mov	r0, r5
 8008128:	f7ff ffbc 	bl	80080a4 <_fflush_r>
 800812c:	b9e0      	cbnz	r0, 8008168 <__swbuf_r+0x74>
 800812e:	68a3      	ldr	r3, [r4, #8]
 8008130:	3b01      	subs	r3, #1
 8008132:	60a3      	str	r3, [r4, #8]
 8008134:	6823      	ldr	r3, [r4, #0]
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	6022      	str	r2, [r4, #0]
 800813a:	701e      	strb	r6, [r3, #0]
 800813c:	6962      	ldr	r2, [r4, #20]
 800813e:	1c43      	adds	r3, r0, #1
 8008140:	429a      	cmp	r2, r3
 8008142:	d004      	beq.n	800814e <__swbuf_r+0x5a>
 8008144:	89a3      	ldrh	r3, [r4, #12]
 8008146:	07db      	lsls	r3, r3, #31
 8008148:	d506      	bpl.n	8008158 <__swbuf_r+0x64>
 800814a:	2e0a      	cmp	r6, #10
 800814c:	d104      	bne.n	8008158 <__swbuf_r+0x64>
 800814e:	4621      	mov	r1, r4
 8008150:	4628      	mov	r0, r5
 8008152:	f7ff ffa7 	bl	80080a4 <_fflush_r>
 8008156:	b938      	cbnz	r0, 8008168 <__swbuf_r+0x74>
 8008158:	4638      	mov	r0, r7
 800815a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800815c:	4621      	mov	r1, r4
 800815e:	4628      	mov	r0, r5
 8008160:	f000 f806 	bl	8008170 <__swsetup_r>
 8008164:	2800      	cmp	r0, #0
 8008166:	d0d5      	beq.n	8008114 <__swbuf_r+0x20>
 8008168:	f04f 37ff 	mov.w	r7, #4294967295
 800816c:	e7f4      	b.n	8008158 <__swbuf_r+0x64>
	...

08008170 <__swsetup_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4b2a      	ldr	r3, [pc, #168]	; (800821c <__swsetup_r+0xac>)
 8008174:	4605      	mov	r5, r0
 8008176:	6818      	ldr	r0, [r3, #0]
 8008178:	460c      	mov	r4, r1
 800817a:	b118      	cbz	r0, 8008184 <__swsetup_r+0x14>
 800817c:	6a03      	ldr	r3, [r0, #32]
 800817e:	b90b      	cbnz	r3, 8008184 <__swsetup_r+0x14>
 8008180:	f7ff fad2 	bl	8007728 <__sinit>
 8008184:	89a3      	ldrh	r3, [r4, #12]
 8008186:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800818a:	0718      	lsls	r0, r3, #28
 800818c:	d422      	bmi.n	80081d4 <__swsetup_r+0x64>
 800818e:	06d9      	lsls	r1, r3, #27
 8008190:	d407      	bmi.n	80081a2 <__swsetup_r+0x32>
 8008192:	2309      	movs	r3, #9
 8008194:	602b      	str	r3, [r5, #0]
 8008196:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800819a:	81a3      	strh	r3, [r4, #12]
 800819c:	f04f 30ff 	mov.w	r0, #4294967295
 80081a0:	e034      	b.n	800820c <__swsetup_r+0x9c>
 80081a2:	0758      	lsls	r0, r3, #29
 80081a4:	d512      	bpl.n	80081cc <__swsetup_r+0x5c>
 80081a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081a8:	b141      	cbz	r1, 80081bc <__swsetup_r+0x4c>
 80081aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081ae:	4299      	cmp	r1, r3
 80081b0:	d002      	beq.n	80081b8 <__swsetup_r+0x48>
 80081b2:	4628      	mov	r0, r5
 80081b4:	f7ff fbd0 	bl	8007958 <_free_r>
 80081b8:	2300      	movs	r3, #0
 80081ba:	6363      	str	r3, [r4, #52]	; 0x34
 80081bc:	89a3      	ldrh	r3, [r4, #12]
 80081be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081c2:	81a3      	strh	r3, [r4, #12]
 80081c4:	2300      	movs	r3, #0
 80081c6:	6063      	str	r3, [r4, #4]
 80081c8:	6923      	ldr	r3, [r4, #16]
 80081ca:	6023      	str	r3, [r4, #0]
 80081cc:	89a3      	ldrh	r3, [r4, #12]
 80081ce:	f043 0308 	orr.w	r3, r3, #8
 80081d2:	81a3      	strh	r3, [r4, #12]
 80081d4:	6923      	ldr	r3, [r4, #16]
 80081d6:	b94b      	cbnz	r3, 80081ec <__swsetup_r+0x7c>
 80081d8:	89a3      	ldrh	r3, [r4, #12]
 80081da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081e2:	d003      	beq.n	80081ec <__swsetup_r+0x7c>
 80081e4:	4621      	mov	r1, r4
 80081e6:	4628      	mov	r0, r5
 80081e8:	f000 f840 	bl	800826c <__smakebuf_r>
 80081ec:	89a0      	ldrh	r0, [r4, #12]
 80081ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081f2:	f010 0301 	ands.w	r3, r0, #1
 80081f6:	d00a      	beq.n	800820e <__swsetup_r+0x9e>
 80081f8:	2300      	movs	r3, #0
 80081fa:	60a3      	str	r3, [r4, #8]
 80081fc:	6963      	ldr	r3, [r4, #20]
 80081fe:	425b      	negs	r3, r3
 8008200:	61a3      	str	r3, [r4, #24]
 8008202:	6923      	ldr	r3, [r4, #16]
 8008204:	b943      	cbnz	r3, 8008218 <__swsetup_r+0xa8>
 8008206:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800820a:	d1c4      	bne.n	8008196 <__swsetup_r+0x26>
 800820c:	bd38      	pop	{r3, r4, r5, pc}
 800820e:	0781      	lsls	r1, r0, #30
 8008210:	bf58      	it	pl
 8008212:	6963      	ldrpl	r3, [r4, #20]
 8008214:	60a3      	str	r3, [r4, #8]
 8008216:	e7f4      	b.n	8008202 <__swsetup_r+0x92>
 8008218:	2000      	movs	r0, #0
 800821a:	e7f7      	b.n	800820c <__swsetup_r+0x9c>
 800821c:	20000084 	.word	0x20000084

08008220 <__swhatbuf_r>:
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	460c      	mov	r4, r1
 8008224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008228:	2900      	cmp	r1, #0
 800822a:	b096      	sub	sp, #88	; 0x58
 800822c:	4615      	mov	r5, r2
 800822e:	461e      	mov	r6, r3
 8008230:	da0d      	bge.n	800824e <__swhatbuf_r+0x2e>
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008238:	f04f 0100 	mov.w	r1, #0
 800823c:	bf0c      	ite	eq
 800823e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008242:	2340      	movne	r3, #64	; 0x40
 8008244:	2000      	movs	r0, #0
 8008246:	6031      	str	r1, [r6, #0]
 8008248:	602b      	str	r3, [r5, #0]
 800824a:	b016      	add	sp, #88	; 0x58
 800824c:	bd70      	pop	{r4, r5, r6, pc}
 800824e:	466a      	mov	r2, sp
 8008250:	f000 f848 	bl	80082e4 <_fstat_r>
 8008254:	2800      	cmp	r0, #0
 8008256:	dbec      	blt.n	8008232 <__swhatbuf_r+0x12>
 8008258:	9901      	ldr	r1, [sp, #4]
 800825a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800825e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008262:	4259      	negs	r1, r3
 8008264:	4159      	adcs	r1, r3
 8008266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800826a:	e7eb      	b.n	8008244 <__swhatbuf_r+0x24>

0800826c <__smakebuf_r>:
 800826c:	898b      	ldrh	r3, [r1, #12]
 800826e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008270:	079d      	lsls	r5, r3, #30
 8008272:	4606      	mov	r6, r0
 8008274:	460c      	mov	r4, r1
 8008276:	d507      	bpl.n	8008288 <__smakebuf_r+0x1c>
 8008278:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800827c:	6023      	str	r3, [r4, #0]
 800827e:	6123      	str	r3, [r4, #16]
 8008280:	2301      	movs	r3, #1
 8008282:	6163      	str	r3, [r4, #20]
 8008284:	b002      	add	sp, #8
 8008286:	bd70      	pop	{r4, r5, r6, pc}
 8008288:	ab01      	add	r3, sp, #4
 800828a:	466a      	mov	r2, sp
 800828c:	f7ff ffc8 	bl	8008220 <__swhatbuf_r>
 8008290:	9900      	ldr	r1, [sp, #0]
 8008292:	4605      	mov	r5, r0
 8008294:	4630      	mov	r0, r6
 8008296:	f7ff f92f 	bl	80074f8 <_malloc_r>
 800829a:	b948      	cbnz	r0, 80082b0 <__smakebuf_r+0x44>
 800829c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082a0:	059a      	lsls	r2, r3, #22
 80082a2:	d4ef      	bmi.n	8008284 <__smakebuf_r+0x18>
 80082a4:	f023 0303 	bic.w	r3, r3, #3
 80082a8:	f043 0302 	orr.w	r3, r3, #2
 80082ac:	81a3      	strh	r3, [r4, #12]
 80082ae:	e7e3      	b.n	8008278 <__smakebuf_r+0xc>
 80082b0:	89a3      	ldrh	r3, [r4, #12]
 80082b2:	6020      	str	r0, [r4, #0]
 80082b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082b8:	81a3      	strh	r3, [r4, #12]
 80082ba:	9b00      	ldr	r3, [sp, #0]
 80082bc:	6163      	str	r3, [r4, #20]
 80082be:	9b01      	ldr	r3, [sp, #4]
 80082c0:	6120      	str	r0, [r4, #16]
 80082c2:	b15b      	cbz	r3, 80082dc <__smakebuf_r+0x70>
 80082c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082c8:	4630      	mov	r0, r6
 80082ca:	f000 f81d 	bl	8008308 <_isatty_r>
 80082ce:	b128      	cbz	r0, 80082dc <__smakebuf_r+0x70>
 80082d0:	89a3      	ldrh	r3, [r4, #12]
 80082d2:	f023 0303 	bic.w	r3, r3, #3
 80082d6:	f043 0301 	orr.w	r3, r3, #1
 80082da:	81a3      	strh	r3, [r4, #12]
 80082dc:	89a3      	ldrh	r3, [r4, #12]
 80082de:	431d      	orrs	r5, r3
 80082e0:	81a5      	strh	r5, [r4, #12]
 80082e2:	e7cf      	b.n	8008284 <__smakebuf_r+0x18>

080082e4 <_fstat_r>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	4d07      	ldr	r5, [pc, #28]	; (8008304 <_fstat_r+0x20>)
 80082e8:	2300      	movs	r3, #0
 80082ea:	4604      	mov	r4, r0
 80082ec:	4608      	mov	r0, r1
 80082ee:	4611      	mov	r1, r2
 80082f0:	602b      	str	r3, [r5, #0]
 80082f2:	f7f8 fac0 	bl	8000876 <_fstat>
 80082f6:	1c43      	adds	r3, r0, #1
 80082f8:	d102      	bne.n	8008300 <_fstat_r+0x1c>
 80082fa:	682b      	ldr	r3, [r5, #0]
 80082fc:	b103      	cbz	r3, 8008300 <_fstat_r+0x1c>
 80082fe:	6023      	str	r3, [r4, #0]
 8008300:	bd38      	pop	{r3, r4, r5, pc}
 8008302:	bf00      	nop
 8008304:	200009a4 	.word	0x200009a4

08008308 <_isatty_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4d06      	ldr	r5, [pc, #24]	; (8008324 <_isatty_r+0x1c>)
 800830c:	2300      	movs	r3, #0
 800830e:	4604      	mov	r4, r0
 8008310:	4608      	mov	r0, r1
 8008312:	602b      	str	r3, [r5, #0]
 8008314:	f7f8 fabf 	bl	8000896 <_isatty>
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	d102      	bne.n	8008322 <_isatty_r+0x1a>
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	b103      	cbz	r3, 8008322 <_isatty_r+0x1a>
 8008320:	6023      	str	r3, [r4, #0]
 8008322:	bd38      	pop	{r3, r4, r5, pc}
 8008324:	200009a4 	.word	0x200009a4

08008328 <_init>:
 8008328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832a:	bf00      	nop
 800832c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800832e:	bc08      	pop	{r3}
 8008330:	469e      	mov	lr, r3
 8008332:	4770      	bx	lr

08008334 <_fini>:
 8008334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008336:	bf00      	nop
 8008338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800833a:	bc08      	pop	{r3}
 800833c:	469e      	mov	lr, r3
 800833e:	4770      	bx	lr
