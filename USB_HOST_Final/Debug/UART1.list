
UART1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08008280  08008280  00018280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083fc  080083fc  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080083fc  080083fc  000183fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008404  08008404  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008404  08008404  00018404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008408  08008408  00018408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800840c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e0  20000088  08008494  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000968  08008494  00020968  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000142bc  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003999  00000000  00000000  000343b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df0  00000000  00000000  00037d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a6c  00000000  00000000  00038b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019f94  00000000  00000000  000395ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014a91  00000000  00000000  00053540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cd72  00000000  00000000  00067fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ef4  00000000  00000000  000f4d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000f8c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008268 	.word	0x08008268

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08008268 	.word	0x08008268

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <MX_GPIO_Init+0x4c>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a0f      	ldr	r2, [pc, #60]	; (80005c8 <MX_GPIO_Init+0x4c>)
 800058c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <MX_GPIO_Init+0x4c>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	603b      	str	r3, [r7, #0]
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <MX_GPIO_Init+0x4c>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <MX_GPIO_Init+0x4c>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <MX_GPIO_Init+0x4c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]

}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 fa6e 	bl	8000ab0 <HAL_Init>

  /* USER CODE BEGIN Init */
  printf("Started\n\r");
 80005d4:	4806      	ldr	r0, [pc, #24]	; (80005f0 <main+0x24>)
 80005d6:	f007 f87d 	bl	80076d4 <iprintf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f80b 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f7ff ffcd 	bl	800057c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 f9b7 	bl	8000954 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 80005e6:	f006 fc23 	bl	8006e30 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005ea:	f006 fc47 	bl	8006e7c <MX_USB_HOST_Process>
 80005ee:	e7fc      	b.n	80005ea <main+0x1e>
 80005f0:	08008280 	.word	0x08008280

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f007 f8bb 	bl	800777e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b29      	ldr	r3, [pc, #164]	; (80006c4 <SystemClock_Config+0xd0>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a28      	ldr	r2, [pc, #160]	; (80006c4 <SystemClock_Config+0xd0>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <SystemClock_Config+0xd0>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <SystemClock_Config+0xd4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <SystemClock_Config+0xd4>)
 8000642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <SystemClock_Config+0xd4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000668:	2319      	movs	r3, #25
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800066c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000670:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000672:	2304      	movs	r3, #4
 8000674:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000676:	2307      	movs	r3, #7
 8000678:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	4618      	mov	r0, r3
 8000680:	f002 f94c 	bl	800291c <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800068a:	f000 f84b 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2302      	movs	r3, #2
 8000694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2102      	movs	r1, #2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f002 fbae 	bl	8002e0c <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006b6:	f000 f835 	bl	8000724 <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3750      	adds	r7, #80	; 0x50
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <USBH_HID_EventCallback>:
/* USER CODE BEGIN 4 */



void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
    Keyboard_Info = USBH_HID_GetKeybdInfo(phost);
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f004 fdf3 	bl	80052c0 <USBH_HID_GetKeybdInfo>
 80006da:	4603      	mov	r3, r0
 80006dc:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <USBH_HID_EventCallback+0x4c>)
 80006de:	6013      	str	r3, [r2, #0]
    if (Keyboard_Info != NULL) {
 80006e0:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <USBH_HID_EventCallback+0x4c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d013      	beq.n	8000710 <USBH_HID_EventCallback+0x44>
        memcpy(uartBuffer, Keyboard_Info, sizeof(HID_KEYBD_Info_TypeDef));
 80006e8:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <USBH_HID_EventCallback+0x4c>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b0b      	ldr	r3, [pc, #44]	; (800071c <USBH_HID_EventCallback+0x50>)
 80006ee:	4614      	mov	r4, r2
 80006f0:	6820      	ldr	r0, [r4, #0]
 80006f2:	6861      	ldr	r1, [r4, #4]
 80006f4:	68a2      	ldr	r2, [r4, #8]
 80006f6:	c307      	stmia	r3!, {r0, r1, r2}
 80006f8:	89a2      	ldrh	r2, [r4, #12]
 80006fa:	7ba1      	ldrb	r1, [r4, #14]
 80006fc:	801a      	strh	r2, [r3, #0]
 80006fe:	460a      	mov	r2, r1
 8000700:	709a      	strb	r2, [r3, #2]
        HAL_UART_Transmit(&huart2, uartBuffer, sizeof(uartBuffer), HAL_MAX_DELAY);
 8000702:	f04f 33ff 	mov.w	r3, #4294967295
 8000706:	220f      	movs	r2, #15
 8000708:	4904      	ldr	r1, [pc, #16]	; (800071c <USBH_HID_EventCallback+0x50>)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <USBH_HID_EventCallback+0x54>)
 800070c:	f002 fdab 	bl	8003266 <HAL_UART_Transmit>
    }
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	bd90      	pop	{r4, r7, pc}
 8000718:	200000a4 	.word	0x200000a4
 800071c:	200000a8 	.word	0x200000a8
 8000720:	200000bc 	.word	0x200000bc

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	e7fe      	b.n	800072c <Error_Handler+0x8>
	...

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <HAL_MspInit+0x4c>)
 800073c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073e:	4a0f      	ldr	r2, [pc, #60]	; (800077c <HAL_MspInit+0x4c>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000744:	6453      	str	r3, [r2, #68]	; 0x44
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <HAL_MspInit+0x4c>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <HAL_MspInit+0x4c>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075a:	4a08      	ldr	r2, [pc, #32]	; (800077c <HAL_MspInit+0x4c>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000760:	6413      	str	r3, [r2, #64]	; 0x40
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_MspInit+0x4c>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <NMI_Handler+0x4>

08000786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <HardFault_Handler+0x4>

0800078c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <MemManage_Handler+0x4>

08000792 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <BusFault_Handler+0x4>

08000798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <UsageFault_Handler+0x4>

0800079e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007cc:	f000 f9c2 	bl	8000b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <OTG_FS_IRQHandler+0x10>)
 80007da:	f000 feff 	bl	80015dc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000518 	.word	0x20000518

080007e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	e00a      	b.n	8000810 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007fa:	f3af 8000 	nop.w
 80007fe:	4601      	mov	r1, r0
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	60ba      	str	r2, [r7, #8]
 8000806:	b2ca      	uxtb	r2, r1
 8000808:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3301      	adds	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697a      	ldr	r2, [r7, #20]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	429a      	cmp	r2, r3
 8000816:	dbf0      	blt.n	80007fa <_read+0x12>
  }

  return len;
 8000818:	687b      	ldr	r3, [r7, #4]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b086      	sub	sp, #24
 8000826:	af00      	add	r7, sp, #0
 8000828:	60f8      	str	r0, [r7, #12]
 800082a:	60b9      	str	r1, [r7, #8]
 800082c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	e009      	b.n	8000848 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	60ba      	str	r2, [r7, #8]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4618      	mov	r0, r3
 800083e:	f000 f8fb 	bl	8000a38 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	3301      	adds	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697a      	ldr	r2, [r7, #20]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	429a      	cmp	r2, r3
 800084e:	dbf1      	blt.n	8000834 <_write+0x12>
  }
  return len;
 8000850:	687b      	ldr	r3, [r7, #4]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <_close>:

int _close(int file)
{
 800085a:	b480      	push	{r7}
 800085c:	b083      	sub	sp, #12
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000862:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000866:	4618      	mov	r0, r3
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
 800087a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000882:	605a      	str	r2, [r3, #4]
  return 0;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <_isatty>:

int _isatty(int file)
{
 8000892:	b480      	push	{r7}
 8000894:	b083      	sub	sp, #12
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800089a:	2301      	movs	r3, #1
}
 800089c:	4618      	mov	r0, r3
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
	...

080008c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008cc:	4a14      	ldr	r2, [pc, #80]	; (8000920 <_sbrk+0x5c>)
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <_sbrk+0x60>)
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <_sbrk+0x64>)
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <_sbrk+0x68>)
 80008e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d207      	bcs.n	8000904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f4:	f006 ffa2 	bl	800783c <__errno>
 80008f8:	4603      	mov	r3, r0
 80008fa:	220c      	movs	r2, #12
 80008fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000902:	e009      	b.n	8000918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <_sbrk+0x64>)
 8000914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000916:	68fb      	ldr	r3, [r7, #12]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20010000 	.word	0x20010000
 8000924:	00000400 	.word	0x00000400
 8000928:	200000b8 	.word	0x200000b8
 800092c:	20000968 	.word	0x20000968

08000930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <SystemInit+0x20>)
 8000936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093a:	4a05      	ldr	r2, [pc, #20]	; (8000950 <SystemInit+0x20>)
 800093c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 800095a:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <MX_USART2_UART_Init+0x50>)
 800095c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_USART2_UART_Init+0x4c>)
 800098c:	f002 fc1e 	bl	80031cc <HAL_UART_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000996:	f7ff fec5 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200000bc 	.word	0x200000bc
 80009a4:	40004400 	.word	0x40004400

080009a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a19      	ldr	r2, [pc, #100]	; (8000a2c <HAL_UART_MspInit+0x84>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d12b      	bne.n	8000a22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	4a17      	ldr	r2, [pc, #92]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d8:	6413      	str	r3, [r2, #64]	; 0x40
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a10      	ldr	r2, [pc, #64]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a02:	230c      	movs	r3, #12
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a12:	2307      	movs	r3, #7
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <HAL_UART_MspInit+0x8c>)
 8000a1e:	f000 f9ef 	bl	8000e00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	; 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40004400 	.word	0x40004400
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020000 	.word	0x40020000

08000a38 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*)&ch,1,10);
 8000a40:	1d39      	adds	r1, r7, #4
 8000a42:	230a      	movs	r3, #10
 8000a44:	2201      	movs	r2, #1
 8000a46:	4804      	ldr	r0, [pc, #16]	; (8000a58 <__io_putchar+0x20>)
 8000a48:	f002 fc0d 	bl	8003266 <HAL_UART_Transmit>
	return ch;
 8000a4c:	687b      	ldr	r3, [r7, #4]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200000bc 	.word	0x200000bc

08000a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a62:	490e      	ldr	r1, [pc, #56]	; (8000a9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a64:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a68:	e002      	b.n	8000a70 <LoopCopyDataInit>

08000a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6e:	3304      	adds	r3, #4

08000a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a74:	d3f9      	bcc.n	8000a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a76:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a78:	4c0b      	ldr	r4, [pc, #44]	; (8000aa8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a7c:	e001      	b.n	8000a82 <LoopFillZerobss>

08000a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a80:	3204      	adds	r2, #4

08000a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a84:	d3fb      	bcc.n	8000a7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a86:	f7ff ff53 	bl	8000930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a8a:	f006 fedd 	bl	8007848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a8e:	f7ff fd9d 	bl	80005cc <main>
  bx  lr    
 8000a92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a94:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a9c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000aa0:	0800840c 	.word	0x0800840c
  ldr r2, =_sbss
 8000aa4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000aa8:	20000968 	.word	0x20000968

08000aac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC_IRQHandler>
	...

08000ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <HAL_Init+0x40>)
 8000aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <HAL_Init+0x40>)
 8000ac6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <HAL_Init+0x40>)
 8000ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f000 f94f 	bl	8000d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ade:	200f      	movs	r0, #15
 8000ae0:	f000 f808 	bl	8000af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae4:	f7ff fe24 	bl	8000730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023c00 	.word	0x40023c00

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_InitTick+0x54>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_InitTick+0x58>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f967 	bl	8000de6 <HAL_SYSTICK_Config>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00e      	b.n	8000b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	d80a      	bhi.n	8000b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f000 f92f 	bl	8000d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b34:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <HAL_InitTick+0x5c>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e000      	b.n	8000b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	20000004 	.word	0x20000004

08000b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x20>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x24>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <HAL_IncTick+0x24>)
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000100 	.word	0x20000100

08000b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <HAL_GetTick+0x14>)
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000100 	.word	0x20000100

08000b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b9c:	f7ff ffee 	bl	8000b7c <HAL_GetTick>
 8000ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bac:	d005      	beq.n	8000bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <HAL_Delay+0x44>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bba:	bf00      	nop
 8000bbc:	f7ff ffde 	bl	8000b7c <HAL_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d8f7      	bhi.n	8000bbc <HAL_Delay+0x28>
  {
  }
}
 8000bcc:	bf00      	nop
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000008 	.word	0x20000008

08000bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	60d3      	str	r3, [r2, #12]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <__NVIC_GetPriorityGrouping+0x18>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	f003 0307 	and.w	r3, r3, #7
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	db0b      	blt.n	8000c6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f003 021f 	and.w	r2, r3, #31
 8000c58:	4907      	ldr	r1, [pc, #28]	; (8000c78 <__NVIC_EnableIRQ+0x38>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	095b      	lsrs	r3, r3, #5
 8000c60:	2001      	movs	r0, #1
 8000c62:	fa00 f202 	lsl.w	r2, r0, r2
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e100 	.word	0xe000e100

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	; (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d48:	d301      	bcc.n	8000d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00f      	b.n	8000d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <SysTick_Config+0x40>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d56:	210f      	movs	r1, #15
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f7ff ff8e 	bl	8000c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <SysTick_Config+0x40>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <SysTick_Config+0x40>)
 8000d68:	2207      	movs	r2, #7
 8000d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	e000e010 	.word	0xe000e010

08000d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ff29 	bl	8000bdc <__NVIC_SetPriorityGrouping>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b086      	sub	sp, #24
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da4:	f7ff ff3e 	bl	8000c24 <__NVIC_GetPriorityGrouping>
 8000da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	68b9      	ldr	r1, [r7, #8]
 8000dae:	6978      	ldr	r0, [r7, #20]
 8000db0:	f7ff ff8e 	bl	8000cd0 <NVIC_EncodePriority>
 8000db4:	4602      	mov	r2, r0
 8000db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff5d 	bl	8000c7c <__NVIC_SetPriority>
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff31 	bl	8000c40 <__NVIC_EnableIRQ>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ffa2 	bl	8000d38 <SysTick_Config>
 8000df4:	4603      	mov	r3, r0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	; 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
 8000e1a:	e159      	b.n	80010d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	f040 8148 	bne.w	80010ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d005      	beq.n	8000e52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d130      	bne.n	8000eb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	68da      	ldr	r2, [r3, #12]
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e88:	2201      	movs	r2, #1
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	091b      	lsrs	r3, r3, #4
 8000e9e:	f003 0201 	and.w	r2, r3, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	d017      	beq.n	8000ef0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d123      	bne.n	8000f44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	08da      	lsrs	r2, r3, #3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3208      	adds	r2, #8
 8000f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	f003 0307 	and.w	r3, r3, #7
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	220f      	movs	r2, #15
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	691a      	ldr	r2, [r3, #16]
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	08da      	lsrs	r2, r3, #3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3208      	adds	r2, #8
 8000f3e:	69b9      	ldr	r1, [r7, #24]
 8000f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0203 	and.w	r2, r3, #3
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 80a2 	beq.w	80010ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b57      	ldr	r3, [pc, #348]	; (80010e8 <HAL_GPIO_Init+0x2e8>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	4a56      	ldr	r2, [pc, #344]	; (80010e8 <HAL_GPIO_Init+0x2e8>)
 8000f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f94:	6453      	str	r3, [r2, #68]	; 0x44
 8000f96:	4b54      	ldr	r3, [pc, #336]	; (80010e8 <HAL_GPIO_Init+0x2e8>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa2:	4a52      	ldr	r2, [pc, #328]	; (80010ec <HAL_GPIO_Init+0x2ec>)
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	220f      	movs	r2, #15
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a49      	ldr	r2, [pc, #292]	; (80010f0 <HAL_GPIO_Init+0x2f0>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d019      	beq.n	8001002 <HAL_GPIO_Init+0x202>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a48      	ldr	r2, [pc, #288]	; (80010f4 <HAL_GPIO_Init+0x2f4>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d013      	beq.n	8000ffe <HAL_GPIO_Init+0x1fe>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a47      	ldr	r2, [pc, #284]	; (80010f8 <HAL_GPIO_Init+0x2f8>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d00d      	beq.n	8000ffa <HAL_GPIO_Init+0x1fa>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a46      	ldr	r2, [pc, #280]	; (80010fc <HAL_GPIO_Init+0x2fc>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d007      	beq.n	8000ff6 <HAL_GPIO_Init+0x1f6>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a45      	ldr	r2, [pc, #276]	; (8001100 <HAL_GPIO_Init+0x300>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_GPIO_Init+0x1f2>
 8000fee:	2304      	movs	r3, #4
 8000ff0:	e008      	b.n	8001004 <HAL_GPIO_Init+0x204>
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	e006      	b.n	8001004 <HAL_GPIO_Init+0x204>
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e004      	b.n	8001004 <HAL_GPIO_Init+0x204>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e002      	b.n	8001004 <HAL_GPIO_Init+0x204>
 8000ffe:	2301      	movs	r3, #1
 8001000:	e000      	b.n	8001004 <HAL_GPIO_Init+0x204>
 8001002:	2300      	movs	r3, #0
 8001004:	69fa      	ldr	r2, [r7, #28]
 8001006:	f002 0203 	and.w	r2, r2, #3
 800100a:	0092      	lsls	r2, r2, #2
 800100c:	4093      	lsls	r3, r2
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001014:	4935      	ldr	r1, [pc, #212]	; (80010ec <HAL_GPIO_Init+0x2ec>)
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	3302      	adds	r3, #2
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001022:	4b38      	ldr	r3, [pc, #224]	; (8001104 <HAL_GPIO_Init+0x304>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001046:	4a2f      	ldr	r2, [pc, #188]	; (8001104 <HAL_GPIO_Init+0x304>)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800104c:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <HAL_GPIO_Init+0x304>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001070:	4a24      	ldr	r2, [pc, #144]	; (8001104 <HAL_GPIO_Init+0x304>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001076:	4b23      	ldr	r3, [pc, #140]	; (8001104 <HAL_GPIO_Init+0x304>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800109a:	4a1a      	ldr	r2, [pc, #104]	; (8001104 <HAL_GPIO_Init+0x304>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <HAL_GPIO_Init+0x304>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010c4:	4a0f      	ldr	r2, [pc, #60]	; (8001104 <HAL_GPIO_Init+0x304>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3301      	adds	r3, #1
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	2b0f      	cmp	r3, #15
 80010d4:	f67f aea2 	bls.w	8000e1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3724      	adds	r7, #36	; 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40013800 	.word	0x40013800
 80010f0:	40020000 	.word	0x40020000
 80010f4:	40020400 	.word	0x40020400
 80010f8:	40020800 	.word	0x40020800
 80010fc:	40020c00 	.word	0x40020c00
 8001100:	40021000 	.word	0x40021000
 8001104:	40013c00 	.word	0x40013c00

08001108 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110a:	b08f      	sub	sp, #60	; 0x3c
 800110c:	af0a      	add	r7, sp, #40	; 0x28
 800110e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e054      	b.n	80011c4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	d106      	bne.n	800113a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f005 fed9 	bl	8006eec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2203      	movs	r2, #3
 800113e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114a:	2b00      	cmp	r3, #0
 800114c:	d102      	bne.n	8001154 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f002 fc6b 	bl	8003a34 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	687e      	ldr	r6, [r7, #4]
 8001166:	466d      	mov	r5, sp
 8001168:	f106 0410 	add.w	r4, r6, #16
 800116c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001174:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001178:	e885 0003 	stmia.w	r5, {r0, r1}
 800117c:	1d33      	adds	r3, r6, #4
 800117e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001180:	6838      	ldr	r0, [r7, #0]
 8001182:	f002 fbe5 	bl	8003950 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2101      	movs	r1, #1
 800118c:	4618      	mov	r0, r3
 800118e:	f002 fc62 	bl	8003a56 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	687e      	ldr	r6, [r7, #4]
 800119a:	466d      	mov	r5, sp
 800119c:	f106 0410 	add.w	r4, r6, #16
 80011a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80011b0:	1d33      	adds	r3, r6, #4
 80011b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011b4:	6838      	ldr	r0, [r7, #0]
 80011b6:	f002 fdeb 	bl	8003d90 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011cc <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80011cc:	b590      	push	{r4, r7, lr}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af04      	add	r7, sp, #16
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	4608      	mov	r0, r1
 80011d6:	4611      	mov	r1, r2
 80011d8:	461a      	mov	r2, r3
 80011da:	4603      	mov	r3, r0
 80011dc:	70fb      	strb	r3, [r7, #3]
 80011de:	460b      	mov	r3, r1
 80011e0:	70bb      	strb	r3, [r7, #2]
 80011e2:	4613      	mov	r3, r2
 80011e4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d101      	bne.n	80011f4 <HAL_HCD_HC_Init+0x28>
 80011f0:	2302      	movs	r3, #2
 80011f2:	e076      	b.n	80012e2 <HAL_HCD_HC_Init+0x116>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80011fc:	78fb      	ldrb	r3, [r7, #3]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	212c      	movs	r1, #44	; 0x2c
 8001202:	fb01 f303 	mul.w	r3, r1, r3
 8001206:	4413      	add	r3, r2
 8001208:	333d      	adds	r3, #61	; 0x3d
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800120e:	78fb      	ldrb	r3, [r7, #3]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	212c      	movs	r1, #44	; 0x2c
 8001214:	fb01 f303 	mul.w	r3, r1, r3
 8001218:	4413      	add	r3, r2
 800121a:	3338      	adds	r3, #56	; 0x38
 800121c:	787a      	ldrb	r2, [r7, #1]
 800121e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001220:	78fb      	ldrb	r3, [r7, #3]
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	212c      	movs	r1, #44	; 0x2c
 8001226:	fb01 f303 	mul.w	r3, r1, r3
 800122a:	4413      	add	r3, r2
 800122c:	3340      	adds	r3, #64	; 0x40
 800122e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001230:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001232:	78fb      	ldrb	r3, [r7, #3]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	212c      	movs	r1, #44	; 0x2c
 8001238:	fb01 f303 	mul.w	r3, r1, r3
 800123c:	4413      	add	r3, r2
 800123e:	3339      	adds	r3, #57	; 0x39
 8001240:	78fa      	ldrb	r2, [r7, #3]
 8001242:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001244:	78fb      	ldrb	r3, [r7, #3]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	212c      	movs	r1, #44	; 0x2c
 800124a:	fb01 f303 	mul.w	r3, r1, r3
 800124e:	4413      	add	r3, r2
 8001250:	333f      	adds	r3, #63	; 0x3f
 8001252:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001256:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	78ba      	ldrb	r2, [r7, #2]
 800125c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001260:	b2d0      	uxtb	r0, r2
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	212c      	movs	r1, #44	; 0x2c
 8001266:	fb01 f303 	mul.w	r3, r1, r3
 800126a:	4413      	add	r3, r2
 800126c:	333a      	adds	r3, #58	; 0x3a
 800126e:	4602      	mov	r2, r0
 8001270:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001272:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001276:	2b00      	cmp	r3, #0
 8001278:	da09      	bge.n	800128e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	212c      	movs	r1, #44	; 0x2c
 8001280:	fb01 f303 	mul.w	r3, r1, r3
 8001284:	4413      	add	r3, r2
 8001286:	333b      	adds	r3, #59	; 0x3b
 8001288:	2201      	movs	r2, #1
 800128a:	701a      	strb	r2, [r3, #0]
 800128c:	e008      	b.n	80012a0 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800128e:	78fb      	ldrb	r3, [r7, #3]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	212c      	movs	r1, #44	; 0x2c
 8001294:	fb01 f303 	mul.w	r3, r1, r3
 8001298:	4413      	add	r3, r2
 800129a:	333b      	adds	r3, #59	; 0x3b
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	212c      	movs	r1, #44	; 0x2c
 80012a6:	fb01 f303 	mul.w	r3, r1, r3
 80012aa:	4413      	add	r3, r2
 80012ac:	333c      	adds	r3, #60	; 0x3c
 80012ae:	f897 2020 	ldrb.w	r2, [r7, #32]
 80012b2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6818      	ldr	r0, [r3, #0]
 80012b8:	787c      	ldrb	r4, [r7, #1]
 80012ba:	78ba      	ldrb	r2, [r7, #2]
 80012bc:	78f9      	ldrb	r1, [r7, #3]
 80012be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012c0:	9302      	str	r3, [sp, #8]
 80012c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	4623      	mov	r3, r4
 80012d0:	f002 fee4 	bl	800409c <USB_HC_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd90      	pop	{r4, r7, pc}

080012ea <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b084      	sub	sp, #16
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	460b      	mov	r3, r1
 80012f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001300:	2b01      	cmp	r3, #1
 8001302:	d101      	bne.n	8001308 <HAL_HCD_HC_Halt+0x1e>
 8001304:	2302      	movs	r3, #2
 8001306:	e00f      	b.n	8001328 <HAL_HCD_HC_Halt+0x3e>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	78fa      	ldrb	r2, [r7, #3]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f003 f934 	bl	8004586 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	4608      	mov	r0, r1
 800133a:	4611      	mov	r1, r2
 800133c:	461a      	mov	r2, r3
 800133e:	4603      	mov	r3, r0
 8001340:	70fb      	strb	r3, [r7, #3]
 8001342:	460b      	mov	r3, r1
 8001344:	70bb      	strb	r3, [r7, #2]
 8001346:	4613      	mov	r3, r2
 8001348:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800134a:	78fb      	ldrb	r3, [r7, #3]
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	212c      	movs	r1, #44	; 0x2c
 8001350:	fb01 f303 	mul.w	r3, r1, r3
 8001354:	4413      	add	r3, r2
 8001356:	333b      	adds	r3, #59	; 0x3b
 8001358:	78ba      	ldrb	r2, [r7, #2]
 800135a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800135c:	78fb      	ldrb	r3, [r7, #3]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	212c      	movs	r1, #44	; 0x2c
 8001362:	fb01 f303 	mul.w	r3, r1, r3
 8001366:	4413      	add	r3, r2
 8001368:	333f      	adds	r3, #63	; 0x3f
 800136a:	787a      	ldrb	r2, [r7, #1]
 800136c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800136e:	7c3b      	ldrb	r3, [r7, #16]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d112      	bne.n	800139a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001374:	78fb      	ldrb	r3, [r7, #3]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	212c      	movs	r1, #44	; 0x2c
 800137a:	fb01 f303 	mul.w	r3, r1, r3
 800137e:	4413      	add	r3, r2
 8001380:	3342      	adds	r3, #66	; 0x42
 8001382:	2203      	movs	r2, #3
 8001384:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001386:	78fb      	ldrb	r3, [r7, #3]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	212c      	movs	r1, #44	; 0x2c
 800138c:	fb01 f303 	mul.w	r3, r1, r3
 8001390:	4413      	add	r3, r2
 8001392:	333d      	adds	r3, #61	; 0x3d
 8001394:	7f3a      	ldrb	r2, [r7, #28]
 8001396:	701a      	strb	r2, [r3, #0]
 8001398:	e008      	b.n	80013ac <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	212c      	movs	r1, #44	; 0x2c
 80013a0:	fb01 f303 	mul.w	r3, r1, r3
 80013a4:	4413      	add	r3, r2
 80013a6:	3342      	adds	r3, #66	; 0x42
 80013a8:	2202      	movs	r2, #2
 80013aa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80013ac:	787b      	ldrb	r3, [r7, #1]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	f200 80c6 	bhi.w	8001540 <HAL_HCD_HC_SubmitRequest+0x210>
 80013b4:	a201      	add	r2, pc, #4	; (adr r2, 80013bc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80013b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ba:	bf00      	nop
 80013bc:	080013cd 	.word	0x080013cd
 80013c0:	0800152d 	.word	0x0800152d
 80013c4:	08001431 	.word	0x08001431
 80013c8:	080014af 	.word	0x080014af
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80013cc:	7c3b      	ldrb	r3, [r7, #16]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	f040 80b8 	bne.w	8001544 <HAL_HCD_HC_SubmitRequest+0x214>
 80013d4:	78bb      	ldrb	r3, [r7, #2]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f040 80b4 	bne.w	8001544 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80013dc:	8b3b      	ldrh	r3, [r7, #24]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d108      	bne.n	80013f4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	212c      	movs	r1, #44	; 0x2c
 80013e8:	fb01 f303 	mul.w	r3, r1, r3
 80013ec:	4413      	add	r3, r2
 80013ee:	3355      	adds	r3, #85	; 0x55
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	212c      	movs	r1, #44	; 0x2c
 80013fa:	fb01 f303 	mul.w	r3, r1, r3
 80013fe:	4413      	add	r3, r2
 8001400:	3355      	adds	r3, #85	; 0x55
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d109      	bne.n	800141c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	212c      	movs	r1, #44	; 0x2c
 800140e:	fb01 f303 	mul.w	r3, r1, r3
 8001412:	4413      	add	r3, r2
 8001414:	3342      	adds	r3, #66	; 0x42
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800141a:	e093      	b.n	8001544 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800141c:	78fb      	ldrb	r3, [r7, #3]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	212c      	movs	r1, #44	; 0x2c
 8001422:	fb01 f303 	mul.w	r3, r1, r3
 8001426:	4413      	add	r3, r2
 8001428:	3342      	adds	r3, #66	; 0x42
 800142a:	2202      	movs	r2, #2
 800142c:	701a      	strb	r2, [r3, #0]
      break;
 800142e:	e089      	b.n	8001544 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001430:	78bb      	ldrb	r3, [r7, #2]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d11d      	bne.n	8001472 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001436:	78fb      	ldrb	r3, [r7, #3]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	212c      	movs	r1, #44	; 0x2c
 800143c:	fb01 f303 	mul.w	r3, r1, r3
 8001440:	4413      	add	r3, r2
 8001442:	3355      	adds	r3, #85	; 0x55
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d109      	bne.n	800145e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800144a:	78fb      	ldrb	r3, [r7, #3]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	212c      	movs	r1, #44	; 0x2c
 8001450:	fb01 f303 	mul.w	r3, r1, r3
 8001454:	4413      	add	r3, r2
 8001456:	3342      	adds	r3, #66	; 0x42
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800145c:	e073      	b.n	8001546 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800145e:	78fb      	ldrb	r3, [r7, #3]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	212c      	movs	r1, #44	; 0x2c
 8001464:	fb01 f303 	mul.w	r3, r1, r3
 8001468:	4413      	add	r3, r2
 800146a:	3342      	adds	r3, #66	; 0x42
 800146c:	2202      	movs	r2, #2
 800146e:	701a      	strb	r2, [r3, #0]
      break;
 8001470:	e069      	b.n	8001546 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	212c      	movs	r1, #44	; 0x2c
 8001478:	fb01 f303 	mul.w	r3, r1, r3
 800147c:	4413      	add	r3, r2
 800147e:	3354      	adds	r3, #84	; 0x54
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d109      	bne.n	800149a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001486:	78fb      	ldrb	r3, [r7, #3]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	212c      	movs	r1, #44	; 0x2c
 800148c:	fb01 f303 	mul.w	r3, r1, r3
 8001490:	4413      	add	r3, r2
 8001492:	3342      	adds	r3, #66	; 0x42
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
      break;
 8001498:	e055      	b.n	8001546 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800149a:	78fb      	ldrb	r3, [r7, #3]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	212c      	movs	r1, #44	; 0x2c
 80014a0:	fb01 f303 	mul.w	r3, r1, r3
 80014a4:	4413      	add	r3, r2
 80014a6:	3342      	adds	r3, #66	; 0x42
 80014a8:	2202      	movs	r2, #2
 80014aa:	701a      	strb	r2, [r3, #0]
      break;
 80014ac:	e04b      	b.n	8001546 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80014ae:	78bb      	ldrb	r3, [r7, #2]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d11d      	bne.n	80014f0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	212c      	movs	r1, #44	; 0x2c
 80014ba:	fb01 f303 	mul.w	r3, r1, r3
 80014be:	4413      	add	r3, r2
 80014c0:	3355      	adds	r3, #85	; 0x55
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d109      	bne.n	80014dc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	212c      	movs	r1, #44	; 0x2c
 80014ce:	fb01 f303 	mul.w	r3, r1, r3
 80014d2:	4413      	add	r3, r2
 80014d4:	3342      	adds	r3, #66	; 0x42
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80014da:	e034      	b.n	8001546 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	212c      	movs	r1, #44	; 0x2c
 80014e2:	fb01 f303 	mul.w	r3, r1, r3
 80014e6:	4413      	add	r3, r2
 80014e8:	3342      	adds	r3, #66	; 0x42
 80014ea:	2202      	movs	r2, #2
 80014ec:	701a      	strb	r2, [r3, #0]
      break;
 80014ee:	e02a      	b.n	8001546 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	212c      	movs	r1, #44	; 0x2c
 80014f6:	fb01 f303 	mul.w	r3, r1, r3
 80014fa:	4413      	add	r3, r2
 80014fc:	3354      	adds	r3, #84	; 0x54
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d109      	bne.n	8001518 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	212c      	movs	r1, #44	; 0x2c
 800150a:	fb01 f303 	mul.w	r3, r1, r3
 800150e:	4413      	add	r3, r2
 8001510:	3342      	adds	r3, #66	; 0x42
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
      break;
 8001516:	e016      	b.n	8001546 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	212c      	movs	r1, #44	; 0x2c
 800151e:	fb01 f303 	mul.w	r3, r1, r3
 8001522:	4413      	add	r3, r2
 8001524:	3342      	adds	r3, #66	; 0x42
 8001526:	2202      	movs	r2, #2
 8001528:	701a      	strb	r2, [r3, #0]
      break;
 800152a:	e00c      	b.n	8001546 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800152c:	78fb      	ldrb	r3, [r7, #3]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	212c      	movs	r1, #44	; 0x2c
 8001532:	fb01 f303 	mul.w	r3, r1, r3
 8001536:	4413      	add	r3, r2
 8001538:	3342      	adds	r3, #66	; 0x42
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
      break;
 800153e:	e002      	b.n	8001546 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001540:	bf00      	nop
 8001542:	e000      	b.n	8001546 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001544:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	212c      	movs	r1, #44	; 0x2c
 800154c:	fb01 f303 	mul.w	r3, r1, r3
 8001550:	4413      	add	r3, r2
 8001552:	3344      	adds	r3, #68	; 0x44
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	8b3a      	ldrh	r2, [r7, #24]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	202c      	movs	r0, #44	; 0x2c
 8001560:	fb00 f303 	mul.w	r3, r0, r3
 8001564:	440b      	add	r3, r1
 8001566:	334c      	adds	r3, #76	; 0x4c
 8001568:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800156a:	78fb      	ldrb	r3, [r7, #3]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	212c      	movs	r1, #44	; 0x2c
 8001570:	fb01 f303 	mul.w	r3, r1, r3
 8001574:	4413      	add	r3, r2
 8001576:	3360      	adds	r3, #96	; 0x60
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	212c      	movs	r1, #44	; 0x2c
 8001582:	fb01 f303 	mul.w	r3, r1, r3
 8001586:	4413      	add	r3, r2
 8001588:	3350      	adds	r3, #80	; 0x50
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	212c      	movs	r1, #44	; 0x2c
 8001594:	fb01 f303 	mul.w	r3, r1, r3
 8001598:	4413      	add	r3, r2
 800159a:	3339      	adds	r3, #57	; 0x39
 800159c:	78fa      	ldrb	r2, [r7, #3]
 800159e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80015a0:	78fb      	ldrb	r3, [r7, #3]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	212c      	movs	r1, #44	; 0x2c
 80015a6:	fb01 f303 	mul.w	r3, r1, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	3361      	adds	r3, #97	; 0x61
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	78fb      	ldrb	r3, [r7, #3]
 80015b8:	222c      	movs	r2, #44	; 0x2c
 80015ba:	fb02 f303 	mul.w	r3, r2, r3
 80015be:	3338      	adds	r3, #56	; 0x38
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	18d1      	adds	r1, r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	f002 fe88 	bl	80042e0 <USB_HC_StartXfer>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop

080015dc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f002 fb89 	bl	8003d0a <USB_GetMode>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	f040 80f6 	bne.w	80017ec <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f002 fb6d 	bl	8003ce4 <USB_ReadInterrupts>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80ec 	beq.w	80017ea <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f002 fb64 	bl	8003ce4 <USB_ReadInterrupts>
 800161c:	4603      	mov	r3, r0
 800161e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001622:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001626:	d104      	bne.n	8001632 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001630:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f002 fb54 	bl	8003ce4 <USB_ReadInterrupts>
 800163c:	4603      	mov	r3, r0
 800163e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001646:	d104      	bne.n	8001652 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001650:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f002 fb44 	bl	8003ce4 <USB_ReadInterrupts>
 800165c:	4603      	mov	r3, r0
 800165e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001662:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001666:	d104      	bne.n	8001672 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001670:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f002 fb34 	bl	8003ce4 <USB_ReadInterrupts>
 800167c:	4603      	mov	r3, r0
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b02      	cmp	r3, #2
 8001684:	d103      	bne.n	800168e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2202      	movs	r2, #2
 800168c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f002 fb26 	bl	8003ce4 <USB_ReadInterrupts>
 8001698:	4603      	mov	r3, r0
 800169a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800169e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016a2:	d11c      	bne.n	80016de <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016ac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10f      	bne.n	80016de <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80016be:	2110      	movs	r1, #16
 80016c0:	6938      	ldr	r0, [r7, #16]
 80016c2:	f002 fa15 	bl	8003af0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80016c6:	6938      	ldr	r0, [r7, #16]
 80016c8:	f002 fa46 	bl	8003b58 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2101      	movs	r1, #1
 80016d2:	4618      	mov	r0, r3
 80016d4:	f002 fc1c 	bl	8003f10 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f005 fc77 	bl	8006fcc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f002 fafe 	bl	8003ce4 <USB_ReadInterrupts>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f2:	d102      	bne.n	80016fa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f001 f89e 	bl	8002836 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f002 faf0 	bl	8003ce4 <USB_ReadInterrupts>
 8001704:	4603      	mov	r3, r0
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b08      	cmp	r3, #8
 800170c:	d106      	bne.n	800171c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f005 fc40 	bl	8006f94 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2208      	movs	r2, #8
 800171a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f002 fadf 	bl	8003ce4 <USB_ReadInterrupts>
 8001726:	4603      	mov	r3, r0
 8001728:	f003 0310 	and.w	r3, r3, #16
 800172c:	2b10      	cmp	r3, #16
 800172e:	d101      	bne.n	8001734 <HAL_HCD_IRQHandler+0x158>
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <HAL_HCD_IRQHandler+0x15a>
 8001734:	2300      	movs	r3, #0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d012      	beq.n	8001760 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	699a      	ldr	r2, [r3, #24]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0210 	bic.w	r2, r2, #16
 8001748:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 ffa1 	bl	8002692 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	699a      	ldr	r2, [r3, #24]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0210 	orr.w	r2, r2, #16
 800175e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f002 fabd 	bl	8003ce4 <USB_ReadInterrupts>
 800176a:	4603      	mov	r3, r0
 800176c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001770:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001774:	d13a      	bne.n	80017ec <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f002 fef2 	bl	8004564 <USB_HC_ReadInterrupt>
 8001780:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	e025      	b.n	80017d4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	fa22 f303 	lsr.w	r3, r2, r3
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b00      	cmp	r3, #0
 800179a:	d018      	beq.n	80017ce <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	015a      	lsls	r2, r3, #5
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017b2:	d106      	bne.n	80017c2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	4619      	mov	r1, r3
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f8ab 	bl	8001916 <HCD_HC_IN_IRQHandler>
 80017c0:	e005      	b.n	80017ce <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	4619      	mov	r1, r3
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 fbf9 	bl	8001fc0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	3301      	adds	r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d3d4      	bcc.n	8001788 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017e6:	615a      	str	r2, [r3, #20]
 80017e8:	e000      	b.n	80017ec <HAL_HCD_IRQHandler+0x210>
      return;
 80017ea:	bf00      	nop
    }
  }
}
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <HAL_HCD_Start+0x16>
 8001804:	2302      	movs	r3, #2
 8001806:	e013      	b.n	8001830 <HAL_HCD_Start+0x3e>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2101      	movs	r1, #1
 8001816:	4618      	mov	r0, r3
 8001818:	f002 fbde 	bl	8003fd8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f002 f8f6 	bl	8003a12 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001846:	2b01      	cmp	r3, #1
 8001848:	d101      	bne.n	800184e <HAL_HCD_Stop+0x16>
 800184a:	2302      	movs	r3, #2
 800184c:	e00d      	b.n	800186a <HAL_HCD_Stop+0x32>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f002 ffcc 	bl	80047f8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f002 fb80 	bl	8003f84 <USB_ResetPort>
 8001884:	4603      	mov	r3, r0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	460b      	mov	r3, r1
 8001898:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	212c      	movs	r1, #44	; 0x2c
 80018a0:	fb01 f303 	mul.w	r3, r1, r3
 80018a4:	4413      	add	r3, r2
 80018a6:	3360      	adds	r3, #96	; 0x60
 80018a8:	781b      	ldrb	r3, [r3, #0]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	460b      	mov	r3, r1
 80018c0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	212c      	movs	r1, #44	; 0x2c
 80018c8:	fb01 f303 	mul.w	r3, r1, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	3350      	adds	r3, #80	; 0x50
 80018d0:	681b      	ldr	r3, [r3, #0]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f002 fbc4 	bl	8004078 <USB_GetCurrentFrame>
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f002 fb9f 	bl	800404a <USB_GetHostSpeed>
 800190c:	4603      	mov	r3, r0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	460b      	mov	r3, r1
 8001920:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800192c:	78fb      	ldrb	r3, [r7, #3]
 800192e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	015a      	lsls	r2, r3, #5
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4413      	add	r3, r2
 8001938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	2b04      	cmp	r3, #4
 8001944:	d11a      	bne.n	800197c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	015a      	lsls	r2, r3, #5
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4413      	add	r3, r2
 800194e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001952:	461a      	mov	r2, r3
 8001954:	2304      	movs	r3, #4
 8001956:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	212c      	movs	r1, #44	; 0x2c
 800195e:	fb01 f303 	mul.w	r3, r1, r3
 8001962:	4413      	add	r3, r2
 8001964:	3361      	adds	r3, #97	; 0x61
 8001966:	2206      	movs	r2, #6
 8001968:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f002 fe06 	bl	8004586 <USB_HC_Halt>
 800197a:	e0af      	b.n	8001adc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	015a      	lsls	r2, r3, #5
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	4413      	add	r3, r2
 8001984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001992:	d11b      	bne.n	80019cc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	015a      	lsls	r2, r3, #5
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4413      	add	r3, r2
 800199c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019a0:	461a      	mov	r2, r3
 80019a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	212c      	movs	r1, #44	; 0x2c
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	3361      	adds	r3, #97	; 0x61
 80019b6:	2207      	movs	r2, #7
 80019b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f002 fdde 	bl	8004586 <USB_HC_Halt>
 80019ca:	e087      	b.n	8001adc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	015a      	lsls	r2, r3, #5
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4413      	add	r3, r2
 80019d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 0320 	and.w	r3, r3, #32
 80019de:	2b20      	cmp	r3, #32
 80019e0:	d109      	bne.n	80019f6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	015a      	lsls	r2, r3, #5
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ee:	461a      	mov	r2, r3
 80019f0:	2320      	movs	r3, #32
 80019f2:	6093      	str	r3, [r2, #8]
 80019f4:	e072      	b.n	8001adc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	015a      	lsls	r2, r3, #5
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4413      	add	r3, r2
 80019fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d11a      	bne.n	8001a42 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	015a      	lsls	r2, r3, #5
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2308      	movs	r3, #8
 8001a1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	212c      	movs	r1, #44	; 0x2c
 8001a24:	fb01 f303 	mul.w	r3, r1, r3
 8001a28:	4413      	add	r3, r2
 8001a2a:	3361      	adds	r3, #97	; 0x61
 8001a2c:	2205      	movs	r2, #5
 8001a2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	4611      	mov	r1, r2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 fda3 	bl	8004586 <USB_HC_Halt>
 8001a40:	e04c      	b.n	8001adc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	015a      	lsls	r2, r3, #5
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4413      	add	r3, r2
 8001a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a58:	d11b      	bne.n	8001a92 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	015a      	lsls	r2, r3, #5
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4413      	add	r3, r2
 8001a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a66:	461a      	mov	r2, r3
 8001a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	212c      	movs	r1, #44	; 0x2c
 8001a74:	fb01 f303 	mul.w	r3, r1, r3
 8001a78:	4413      	add	r3, r2
 8001a7a:	3361      	adds	r3, #97	; 0x61
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	4611      	mov	r1, r2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f002 fd7b 	bl	8004586 <USB_HC_Halt>
 8001a90:	e024      	b.n	8001adc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	015a      	lsls	r2, r3, #5
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4413      	add	r3, r2
 8001a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa4:	2b80      	cmp	r3, #128	; 0x80
 8001aa6:	d119      	bne.n	8001adc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	015a      	lsls	r2, r3, #5
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	4413      	add	r3, r2
 8001ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	2380      	movs	r3, #128	; 0x80
 8001ab8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	212c      	movs	r1, #44	; 0x2c
 8001ac0:	fb01 f303 	mul.w	r3, r1, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3361      	adds	r3, #97	; 0x61
 8001ac8:	2206      	movs	r2, #6
 8001aca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f002 fd55 	bl	8004586 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	015a      	lsls	r2, r3, #5
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001af2:	d112      	bne.n	8001b1a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f002 fd41 	bl	8004586 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	015a      	lsls	r2, r3, #5
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b10:	461a      	mov	r2, r3
 8001b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b16:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001b18:	e24e      	b.n	8001fb8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	015a      	lsls	r2, r3, #5
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4413      	add	r3, r2
 8001b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	f040 80df 	bne.w	8001cf0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d019      	beq.n	8001b6e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	212c      	movs	r1, #44	; 0x2c
 8001b40:	fb01 f303 	mul.w	r3, r1, r3
 8001b44:	4413      	add	r3, r2
 8001b46:	3348      	adds	r3, #72	; 0x48
 8001b48:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	0159      	lsls	r1, r3, #5
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	440b      	add	r3, r1
 8001b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001b5c:	1ad2      	subs	r2, r2, r3
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	202c      	movs	r0, #44	; 0x2c
 8001b64:	fb00 f303 	mul.w	r3, r0, r3
 8001b68:	440b      	add	r3, r1
 8001b6a:	3350      	adds	r3, #80	; 0x50
 8001b6c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	212c      	movs	r1, #44	; 0x2c
 8001b74:	fb01 f303 	mul.w	r3, r1, r3
 8001b78:	4413      	add	r3, r2
 8001b7a:	3361      	adds	r3, #97	; 0x61
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	212c      	movs	r1, #44	; 0x2c
 8001b86:	fb01 f303 	mul.w	r3, r1, r3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	335c      	adds	r3, #92	; 0x5c
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	015a      	lsls	r2, r3, #5
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	212c      	movs	r1, #44	; 0x2c
 8001baa:	fb01 f303 	mul.w	r3, r1, r3
 8001bae:	4413      	add	r3, r2
 8001bb0:	333f      	adds	r3, #63	; 0x3f
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d009      	beq.n	8001bcc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	212c      	movs	r1, #44	; 0x2c
 8001bbe:	fb01 f303 	mul.w	r3, r1, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	333f      	adds	r3, #63	; 0x3f
 8001bc6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d111      	bne.n	8001bf0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f002 fcd5 	bl	8004586 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	015a      	lsls	r2, r3, #5
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be8:	461a      	mov	r2, r3
 8001bea:	2310      	movs	r3, #16
 8001bec:	6093      	str	r3, [r2, #8]
 8001bee:	e03a      	b.n	8001c66 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	212c      	movs	r1, #44	; 0x2c
 8001bf6:	fb01 f303 	mul.w	r3, r1, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	333f      	adds	r3, #63	; 0x3f
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d009      	beq.n	8001c18 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	212c      	movs	r1, #44	; 0x2c
 8001c0a:	fb01 f303 	mul.w	r3, r1, r3
 8001c0e:	4413      	add	r3, r2
 8001c10:	333f      	adds	r3, #63	; 0x3f
 8001c12:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d126      	bne.n	8001c66 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	015a      	lsls	r2, r3, #5
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4413      	add	r3, r2
 8001c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	0151      	lsls	r1, r2, #5
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	440a      	add	r2, r1
 8001c2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c36:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	212c      	movs	r1, #44	; 0x2c
 8001c3e:	fb01 f303 	mul.w	r3, r1, r3
 8001c42:	4413      	add	r3, r2
 8001c44:	3360      	adds	r3, #96	; 0x60
 8001c46:	2201      	movs	r2, #1
 8001c48:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	b2d9      	uxtb	r1, r3
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	202c      	movs	r0, #44	; 0x2c
 8001c54:	fb00 f303 	mul.w	r3, r0, r3
 8001c58:	4413      	add	r3, r2
 8001c5a:	3360      	adds	r3, #96	; 0x60
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f005 f9c1 	bl	8006fe8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d12b      	bne.n	8001cc6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	212c      	movs	r1, #44	; 0x2c
 8001c74:	fb01 f303 	mul.w	r3, r1, r3
 8001c78:	4413      	add	r3, r2
 8001c7a:	3348      	adds	r3, #72	; 0x48
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	202c      	movs	r0, #44	; 0x2c
 8001c84:	fb00 f202 	mul.w	r2, r0, r2
 8001c88:	440a      	add	r2, r1
 8001c8a:	3240      	adds	r2, #64	; 0x40
 8001c8c:	8812      	ldrh	r2, [r2, #0]
 8001c8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 818e 	beq.w	8001fb8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	212c      	movs	r1, #44	; 0x2c
 8001ca2:	fb01 f303 	mul.w	r3, r1, r3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3354      	adds	r3, #84	; 0x54
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	f083 0301 	eor.w	r3, r3, #1
 8001cb0:	b2d8      	uxtb	r0, r3
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	212c      	movs	r1, #44	; 0x2c
 8001cb8:	fb01 f303 	mul.w	r3, r1, r3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3354      	adds	r3, #84	; 0x54
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	701a      	strb	r2, [r3, #0]
}
 8001cc4:	e178      	b.n	8001fb8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	212c      	movs	r1, #44	; 0x2c
 8001ccc:	fb01 f303 	mul.w	r3, r1, r3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3354      	adds	r3, #84	; 0x54
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	f083 0301 	eor.w	r3, r3, #1
 8001cda:	b2d8      	uxtb	r0, r3
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	212c      	movs	r1, #44	; 0x2c
 8001ce2:	fb01 f303 	mul.w	r3, r1, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3354      	adds	r3, #84	; 0x54
 8001cea:	4602      	mov	r2, r0
 8001cec:	701a      	strb	r2, [r3, #0]
}
 8001cee:	e163      	b.n	8001fb8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	015a      	lsls	r2, r3, #5
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	f040 80f6 	bne.w	8001ef4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	212c      	movs	r1, #44	; 0x2c
 8001d0e:	fb01 f303 	mul.w	r3, r1, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	3361      	adds	r3, #97	; 0x61
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d109      	bne.n	8001d30 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	212c      	movs	r1, #44	; 0x2c
 8001d22:	fb01 f303 	mul.w	r3, r1, r3
 8001d26:	4413      	add	r3, r2
 8001d28:	3360      	adds	r3, #96	; 0x60
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	701a      	strb	r2, [r3, #0]
 8001d2e:	e0c9      	b.n	8001ec4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	212c      	movs	r1, #44	; 0x2c
 8001d36:	fb01 f303 	mul.w	r3, r1, r3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3361      	adds	r3, #97	; 0x61
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b05      	cmp	r3, #5
 8001d42:	d109      	bne.n	8001d58 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	212c      	movs	r1, #44	; 0x2c
 8001d4a:	fb01 f303 	mul.w	r3, r1, r3
 8001d4e:	4413      	add	r3, r2
 8001d50:	3360      	adds	r3, #96	; 0x60
 8001d52:	2205      	movs	r2, #5
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	e0b5      	b.n	8001ec4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	212c      	movs	r1, #44	; 0x2c
 8001d5e:	fb01 f303 	mul.w	r3, r1, r3
 8001d62:	4413      	add	r3, r2
 8001d64:	3361      	adds	r3, #97	; 0x61
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b06      	cmp	r3, #6
 8001d6a:	d009      	beq.n	8001d80 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	212c      	movs	r1, #44	; 0x2c
 8001d72:	fb01 f303 	mul.w	r3, r1, r3
 8001d76:	4413      	add	r3, r2
 8001d78:	3361      	adds	r3, #97	; 0x61
 8001d7a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d150      	bne.n	8001e22 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	212c      	movs	r1, #44	; 0x2c
 8001d86:	fb01 f303 	mul.w	r3, r1, r3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	335c      	adds	r3, #92	; 0x5c
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	202c      	movs	r0, #44	; 0x2c
 8001d98:	fb00 f303 	mul.w	r3, r0, r3
 8001d9c:	440b      	add	r3, r1
 8001d9e:	335c      	adds	r3, #92	; 0x5c
 8001da0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	212c      	movs	r1, #44	; 0x2c
 8001da8:	fb01 f303 	mul.w	r3, r1, r3
 8001dac:	4413      	add	r3, r2
 8001dae:	335c      	adds	r3, #92	; 0x5c
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d912      	bls.n	8001ddc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	212c      	movs	r1, #44	; 0x2c
 8001dbc:	fb01 f303 	mul.w	r3, r1, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	335c      	adds	r3, #92	; 0x5c
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	212c      	movs	r1, #44	; 0x2c
 8001dce:	fb01 f303 	mul.w	r3, r1, r3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3360      	adds	r3, #96	; 0x60
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001dda:	e073      	b.n	8001ec4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	212c      	movs	r1, #44	; 0x2c
 8001de2:	fb01 f303 	mul.w	r3, r1, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	3360      	adds	r3, #96	; 0x60
 8001dea:	2202      	movs	r2, #2
 8001dec:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	015a      	lsls	r2, r3, #5
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4413      	add	r3, r2
 8001df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e04:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e0c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	015a      	lsls	r2, r3, #5
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4413      	add	r3, r2
 8001e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001e20:	e050      	b.n	8001ec4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	212c      	movs	r1, #44	; 0x2c
 8001e28:	fb01 f303 	mul.w	r3, r1, r3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3361      	adds	r3, #97	; 0x61
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d122      	bne.n	8001e7c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	212c      	movs	r1, #44	; 0x2c
 8001e3c:	fb01 f303 	mul.w	r3, r1, r3
 8001e40:	4413      	add	r3, r2
 8001e42:	3360      	adds	r3, #96	; 0x60
 8001e44:	2202      	movs	r2, #2
 8001e46:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e5e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e66:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	015a      	lsls	r2, r3, #5
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e74:	461a      	mov	r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e023      	b.n	8001ec4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	212c      	movs	r1, #44	; 0x2c
 8001e82:	fb01 f303 	mul.w	r3, r1, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	3361      	adds	r3, #97	; 0x61
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b07      	cmp	r3, #7
 8001e8e:	d119      	bne.n	8001ec4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	212c      	movs	r1, #44	; 0x2c
 8001e96:	fb01 f303 	mul.w	r3, r1, r3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	335c      	adds	r3, #92	; 0x5c
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	202c      	movs	r0, #44	; 0x2c
 8001ea8:	fb00 f303 	mul.w	r3, r0, r3
 8001eac:	440b      	add	r3, r1
 8001eae:	335c      	adds	r3, #92	; 0x5c
 8001eb0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	212c      	movs	r1, #44	; 0x2c
 8001eb8:	fb01 f303 	mul.w	r3, r1, r3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3360      	adds	r3, #96	; 0x60
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	015a      	lsls	r2, r3, #5
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	b2d9      	uxtb	r1, r3
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	202c      	movs	r0, #44	; 0x2c
 8001ee0:	fb00 f303 	mul.w	r3, r0, r3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3360      	adds	r3, #96	; 0x60
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f005 f87b 	bl	8006fe8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001ef2:	e061      	b.n	8001fb8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	015a      	lsls	r2, r3, #5
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 0310 	and.w	r3, r3, #16
 8001f06:	2b10      	cmp	r3, #16
 8001f08:	d156      	bne.n	8001fb8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	212c      	movs	r1, #44	; 0x2c
 8001f10:	fb01 f303 	mul.w	r3, r1, r3
 8001f14:	4413      	add	r3, r2
 8001f16:	333f      	adds	r3, #63	; 0x3f
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d111      	bne.n	8001f42 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	212c      	movs	r1, #44	; 0x2c
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	4413      	add	r3, r2
 8001f2a:	335c      	adds	r3, #92	; 0x5c
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f002 fb23 	bl	8004586 <USB_HC_Halt>
 8001f40:	e031      	b.n	8001fa6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	212c      	movs	r1, #44	; 0x2c
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	333f      	adds	r3, #63	; 0x3f
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d009      	beq.n	8001f6a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	212c      	movs	r1, #44	; 0x2c
 8001f5c:	fb01 f303 	mul.w	r3, r1, r3
 8001f60:	4413      	add	r3, r2
 8001f62:	333f      	adds	r3, #63	; 0x3f
 8001f64:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d11d      	bne.n	8001fa6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	212c      	movs	r1, #44	; 0x2c
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	335c      	adds	r3, #92	; 0x5c
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d110      	bne.n	8001fa6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	212c      	movs	r1, #44	; 0x2c
 8001f8a:	fb01 f303 	mul.w	r3, r1, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	3361      	adds	r3, #97	; 0x61
 8001f92:	2203      	movs	r2, #3
 8001f94:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f002 faf0 	bl	8004586 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	2310      	movs	r3, #16
 8001fb6:	6093      	str	r3, [r2, #8]
}
 8001fb8:	bf00      	nop
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	015a      	lsls	r2, r3, #5
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d11a      	bne.n	8002026 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	015a      	lsls	r2, r3, #5
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	2304      	movs	r3, #4
 8002000:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	212c      	movs	r1, #44	; 0x2c
 8002008:	fb01 f303 	mul.w	r3, r1, r3
 800200c:	4413      	add	r3, r2
 800200e:	3361      	adds	r3, #97	; 0x61
 8002010:	2206      	movs	r2, #6
 8002012:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f002 fab1 	bl	8004586 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002024:	e331      	b.n	800268a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	015a      	lsls	r2, r3, #5
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4413      	add	r3, r2
 800202e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 0320 	and.w	r3, r3, #32
 8002038:	2b20      	cmp	r3, #32
 800203a:	d12e      	bne.n	800209a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	015a      	lsls	r2, r3, #5
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	4413      	add	r3, r2
 8002044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002048:	461a      	mov	r2, r3
 800204a:	2320      	movs	r3, #32
 800204c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	212c      	movs	r1, #44	; 0x2c
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	4413      	add	r3, r2
 800205a:	333d      	adds	r3, #61	; 0x3d
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b01      	cmp	r3, #1
 8002060:	f040 8313 	bne.w	800268a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	212c      	movs	r1, #44	; 0x2c
 800206a:	fb01 f303 	mul.w	r3, r1, r3
 800206e:	4413      	add	r3, r2
 8002070:	333d      	adds	r3, #61	; 0x3d
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	212c      	movs	r1, #44	; 0x2c
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	4413      	add	r3, r2
 8002082:	3360      	adds	r3, #96	; 0x60
 8002084:	2202      	movs	r2, #2
 8002086:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f002 fa77 	bl	8004586 <USB_HC_Halt>
}
 8002098:	e2f7      	b.n	800268a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020b0:	d112      	bne.n	80020d8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020be:	461a      	mov	r2, r3
 80020c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020c4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f002 fa58 	bl	8004586 <USB_HC_Halt>
}
 80020d6:	e2d8      	b.n	800268a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d140      	bne.n	8002170 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	212c      	movs	r1, #44	; 0x2c
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	335c      	adds	r3, #92	; 0x5c
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	015a      	lsls	r2, r3, #5
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	4413      	add	r3, r2
 8002108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002112:	2b40      	cmp	r3, #64	; 0x40
 8002114:	d111      	bne.n	800213a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	212c      	movs	r1, #44	; 0x2c
 800211c:	fb01 f303 	mul.w	r3, r1, r3
 8002120:	4413      	add	r3, r2
 8002122:	333d      	adds	r3, #61	; 0x3d
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	015a      	lsls	r2, r3, #5
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	4413      	add	r3, r2
 8002130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002134:	461a      	mov	r2, r3
 8002136:	2340      	movs	r3, #64	; 0x40
 8002138:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	4413      	add	r3, r2
 8002142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002146:	461a      	mov	r2, r3
 8002148:	2301      	movs	r3, #1
 800214a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	212c      	movs	r1, #44	; 0x2c
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	4413      	add	r3, r2
 8002158:	3361      	adds	r3, #97	; 0x61
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f002 fa0c 	bl	8004586 <USB_HC_Halt>
}
 800216e:	e28c      	b.n	800268a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	4413      	add	r3, r2
 8002178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002182:	2b40      	cmp	r3, #64	; 0x40
 8002184:	d12c      	bne.n	80021e0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	212c      	movs	r1, #44	; 0x2c
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	4413      	add	r3, r2
 8002192:	3361      	adds	r3, #97	; 0x61
 8002194:	2204      	movs	r2, #4
 8002196:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	212c      	movs	r1, #44	; 0x2c
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	333d      	adds	r3, #61	; 0x3d
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	212c      	movs	r1, #44	; 0x2c
 80021b0:	fb01 f303 	mul.w	r3, r1, r3
 80021b4:	4413      	add	r3, r2
 80021b6:	335c      	adds	r3, #92	; 0x5c
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	4611      	mov	r1, r2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f002 f9dd 	bl	8004586 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d8:	461a      	mov	r2, r3
 80021da:	2340      	movs	r3, #64	; 0x40
 80021dc:	6093      	str	r3, [r2, #8]
}
 80021de:	e254      	b.n	800268a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	015a      	lsls	r2, r3, #5
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	4413      	add	r3, r2
 80021e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d11a      	bne.n	800222c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002202:	461a      	mov	r2, r3
 8002204:	2308      	movs	r3, #8
 8002206:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	212c      	movs	r1, #44	; 0x2c
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	4413      	add	r3, r2
 8002214:	3361      	adds	r3, #97	; 0x61
 8002216:	2205      	movs	r2, #5
 8002218:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f002 f9ae 	bl	8004586 <USB_HC_Halt>
}
 800222a:	e22e      	b.n	800268a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	4413      	add	r3, r2
 8002234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b10      	cmp	r3, #16
 8002240:	d140      	bne.n	80022c4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	212c      	movs	r1, #44	; 0x2c
 8002248:	fb01 f303 	mul.w	r3, r1, r3
 800224c:	4413      	add	r3, r2
 800224e:	335c      	adds	r3, #92	; 0x5c
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	212c      	movs	r1, #44	; 0x2c
 800225a:	fb01 f303 	mul.w	r3, r1, r3
 800225e:	4413      	add	r3, r2
 8002260:	3361      	adds	r3, #97	; 0x61
 8002262:	2203      	movs	r2, #3
 8002264:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	212c      	movs	r1, #44	; 0x2c
 800226c:	fb01 f303 	mul.w	r3, r1, r3
 8002270:	4413      	add	r3, r2
 8002272:	333d      	adds	r3, #61	; 0x3d
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d112      	bne.n	80022a0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	212c      	movs	r1, #44	; 0x2c
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	4413      	add	r3, r2
 8002286:	333c      	adds	r3, #60	; 0x3c
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d108      	bne.n	80022a0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	212c      	movs	r1, #44	; 0x2c
 8002294:	fb01 f303 	mul.w	r3, r1, r3
 8002298:	4413      	add	r3, r2
 800229a:	333d      	adds	r3, #61	; 0x3d
 800229c:	2201      	movs	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	4611      	mov	r1, r2
 80022aa:	4618      	mov	r0, r3
 80022ac:	f002 f96b 	bl	8004586 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	015a      	lsls	r2, r3, #5
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	4413      	add	r3, r2
 80022b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022bc:	461a      	mov	r2, r3
 80022be:	2310      	movs	r3, #16
 80022c0:	6093      	str	r3, [r2, #8]
}
 80022c2:	e1e2      	b.n	800268a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d6:	2b80      	cmp	r3, #128	; 0x80
 80022d8:	d164      	bne.n	80023a4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d111      	bne.n	8002306 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	212c      	movs	r1, #44	; 0x2c
 80022e8:	fb01 f303 	mul.w	r3, r1, r3
 80022ec:	4413      	add	r3, r2
 80022ee:	3361      	adds	r3, #97	; 0x61
 80022f0:	2206      	movs	r2, #6
 80022f2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	4611      	mov	r1, r2
 80022fe:	4618      	mov	r0, r3
 8002300:	f002 f941 	bl	8004586 <USB_HC_Halt>
 8002304:	e044      	b.n	8002390 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	212c      	movs	r1, #44	; 0x2c
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	4413      	add	r3, r2
 8002312:	335c      	adds	r3, #92	; 0x5c
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	202c      	movs	r0, #44	; 0x2c
 800231e:	fb00 f303 	mul.w	r3, r0, r3
 8002322:	440b      	add	r3, r1
 8002324:	335c      	adds	r3, #92	; 0x5c
 8002326:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	212c      	movs	r1, #44	; 0x2c
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	335c      	adds	r3, #92	; 0x5c
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d920      	bls.n	800237e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	212c      	movs	r1, #44	; 0x2c
 8002342:	fb01 f303 	mul.w	r3, r1, r3
 8002346:	4413      	add	r3, r2
 8002348:	335c      	adds	r3, #92	; 0x5c
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	212c      	movs	r1, #44	; 0x2c
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	4413      	add	r3, r2
 800235a:	3360      	adds	r3, #96	; 0x60
 800235c:	2204      	movs	r2, #4
 800235e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	b2d9      	uxtb	r1, r3
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	202c      	movs	r0, #44	; 0x2c
 800236a:	fb00 f303 	mul.w	r3, r0, r3
 800236e:	4413      	add	r3, r2
 8002370:	3360      	adds	r3, #96	; 0x60
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f004 fe36 	bl	8006fe8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800237c:	e008      	b.n	8002390 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	212c      	movs	r1, #44	; 0x2c
 8002384:	fb01 f303 	mul.w	r3, r1, r3
 8002388:	4413      	add	r3, r2
 800238a:	3360      	adds	r3, #96	; 0x60
 800238c:	2202      	movs	r2, #2
 800238e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	4413      	add	r3, r2
 8002398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239c:	461a      	mov	r2, r3
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	6093      	str	r3, [r2, #8]
}
 80023a2:	e172      	b.n	800268a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ba:	d11b      	bne.n	80023f4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	212c      	movs	r1, #44	; 0x2c
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	3361      	adds	r3, #97	; 0x61
 80023ca:	2208      	movs	r2, #8
 80023cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 f8d4 	bl	8004586 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ea:	461a      	mov	r2, r3
 80023ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023f0:	6093      	str	r3, [r2, #8]
}
 80023f2:	e14a      	b.n	800268a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b02      	cmp	r3, #2
 8002408:	f040 813f 	bne.w	800268a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	212c      	movs	r1, #44	; 0x2c
 8002412:	fb01 f303 	mul.w	r3, r1, r3
 8002416:	4413      	add	r3, r2
 8002418:	3361      	adds	r3, #97	; 0x61
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d17d      	bne.n	800251c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	212c      	movs	r1, #44	; 0x2c
 8002426:	fb01 f303 	mul.w	r3, r1, r3
 800242a:	4413      	add	r3, r2
 800242c:	3360      	adds	r3, #96	; 0x60
 800242e:	2201      	movs	r2, #1
 8002430:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	212c      	movs	r1, #44	; 0x2c
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	333f      	adds	r3, #63	; 0x3f
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d00a      	beq.n	800245c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	212c      	movs	r1, #44	; 0x2c
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	4413      	add	r3, r2
 8002452:	333f      	adds	r3, #63	; 0x3f
 8002454:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002456:	2b03      	cmp	r3, #3
 8002458:	f040 8100 	bne.w	800265c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d113      	bne.n	800248c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	212c      	movs	r1, #44	; 0x2c
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	4413      	add	r3, r2
 8002470:	3355      	adds	r3, #85	; 0x55
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	f083 0301 	eor.w	r3, r3, #1
 8002478:	b2d8      	uxtb	r0, r3
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	212c      	movs	r1, #44	; 0x2c
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	4413      	add	r3, r2
 8002486:	3355      	adds	r3, #85	; 0x55
 8002488:	4602      	mov	r2, r0
 800248a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	2b01      	cmp	r3, #1
 8002492:	f040 80e3 	bne.w	800265c <HCD_HC_OUT_IRQHandler+0x69c>
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	212c      	movs	r1, #44	; 0x2c
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	334c      	adds	r3, #76	; 0x4c
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80d8 	beq.w	800265c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	212c      	movs	r1, #44	; 0x2c
 80024b2:	fb01 f303 	mul.w	r3, r1, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	334c      	adds	r3, #76	; 0x4c
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	202c      	movs	r0, #44	; 0x2c
 80024c2:	fb00 f202 	mul.w	r2, r0, r2
 80024c6:	440a      	add	r2, r1
 80024c8:	3240      	adds	r2, #64	; 0x40
 80024ca:	8812      	ldrh	r2, [r2, #0]
 80024cc:	4413      	add	r3, r2
 80024ce:	3b01      	subs	r3, #1
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	202c      	movs	r0, #44	; 0x2c
 80024d6:	fb00 f202 	mul.w	r2, r0, r2
 80024da:	440a      	add	r2, r1
 80024dc:	3240      	adds	r2, #64	; 0x40
 80024de:	8812      	ldrh	r2, [r2, #0]
 80024e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 80b5 	beq.w	800265c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	212c      	movs	r1, #44	; 0x2c
 80024f8:	fb01 f303 	mul.w	r3, r1, r3
 80024fc:	4413      	add	r3, r2
 80024fe:	3355      	adds	r3, #85	; 0x55
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	f083 0301 	eor.w	r3, r3, #1
 8002506:	b2d8      	uxtb	r0, r3
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	212c      	movs	r1, #44	; 0x2c
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4413      	add	r3, r2
 8002514:	3355      	adds	r3, #85	; 0x55
 8002516:	4602      	mov	r2, r0
 8002518:	701a      	strb	r2, [r3, #0]
 800251a:	e09f      	b.n	800265c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	212c      	movs	r1, #44	; 0x2c
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	4413      	add	r3, r2
 8002528:	3361      	adds	r3, #97	; 0x61
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d109      	bne.n	8002544 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	212c      	movs	r1, #44	; 0x2c
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	4413      	add	r3, r2
 800253c:	3360      	adds	r3, #96	; 0x60
 800253e:	2202      	movs	r2, #2
 8002540:	701a      	strb	r2, [r3, #0]
 8002542:	e08b      	b.n	800265c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	212c      	movs	r1, #44	; 0x2c
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	3361      	adds	r3, #97	; 0x61
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b04      	cmp	r3, #4
 8002556:	d109      	bne.n	800256c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	212c      	movs	r1, #44	; 0x2c
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	3360      	adds	r3, #96	; 0x60
 8002566:	2202      	movs	r2, #2
 8002568:	701a      	strb	r2, [r3, #0]
 800256a:	e077      	b.n	800265c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	212c      	movs	r1, #44	; 0x2c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	3361      	adds	r3, #97	; 0x61
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b05      	cmp	r3, #5
 800257e:	d109      	bne.n	8002594 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	212c      	movs	r1, #44	; 0x2c
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4413      	add	r3, r2
 800258c:	3360      	adds	r3, #96	; 0x60
 800258e:	2205      	movs	r2, #5
 8002590:	701a      	strb	r2, [r3, #0]
 8002592:	e063      	b.n	800265c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	212c      	movs	r1, #44	; 0x2c
 800259a:	fb01 f303 	mul.w	r3, r1, r3
 800259e:	4413      	add	r3, r2
 80025a0:	3361      	adds	r3, #97	; 0x61
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b06      	cmp	r3, #6
 80025a6:	d009      	beq.n	80025bc <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	212c      	movs	r1, #44	; 0x2c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	3361      	adds	r3, #97	; 0x61
 80025b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d14f      	bne.n	800265c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	212c      	movs	r1, #44	; 0x2c
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	335c      	adds	r3, #92	; 0x5c
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	202c      	movs	r0, #44	; 0x2c
 80025d4:	fb00 f303 	mul.w	r3, r0, r3
 80025d8:	440b      	add	r3, r1
 80025da:	335c      	adds	r3, #92	; 0x5c
 80025dc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	212c      	movs	r1, #44	; 0x2c
 80025e4:	fb01 f303 	mul.w	r3, r1, r3
 80025e8:	4413      	add	r3, r2
 80025ea:	335c      	adds	r3, #92	; 0x5c
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d912      	bls.n	8002618 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	212c      	movs	r1, #44	; 0x2c
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	335c      	adds	r3, #92	; 0x5c
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	212c      	movs	r1, #44	; 0x2c
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	4413      	add	r3, r2
 8002610:	3360      	adds	r3, #96	; 0x60
 8002612:	2204      	movs	r2, #4
 8002614:	701a      	strb	r2, [r3, #0]
 8002616:	e021      	b.n	800265c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	3360      	adds	r3, #96	; 0x60
 8002626:	2202      	movs	r2, #2
 8002628:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002640:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002648:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	4413      	add	r3, r2
 8002652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002656:	461a      	mov	r2, r3
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	4413      	add	r3, r2
 8002664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002668:	461a      	mov	r2, r3
 800266a:	2302      	movs	r3, #2
 800266c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	b2d9      	uxtb	r1, r3
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	202c      	movs	r0, #44	; 0x2c
 8002678:	fb00 f303 	mul.w	r3, r0, r3
 800267c:	4413      	add	r3, r2
 800267e:	3360      	adds	r3, #96	; 0x60
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f004 fcaf 	bl	8006fe8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800268a:	bf00      	nop
 800268c:	3720      	adds	r7, #32
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b08a      	sub	sp, #40	; 0x28
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	0c5b      	lsrs	r3, r3, #17
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026c6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d004      	beq.n	80026d8 <HCD_RXQLVL_IRQHandler+0x46>
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b05      	cmp	r3, #5
 80026d2:	f000 80a9 	beq.w	8002828 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80026d6:	e0aa      	b.n	800282e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 80a6 	beq.w	800282c <HCD_RXQLVL_IRQHandler+0x19a>
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	212c      	movs	r1, #44	; 0x2c
 80026e6:	fb01 f303 	mul.w	r3, r1, r3
 80026ea:	4413      	add	r3, r2
 80026ec:	3344      	adds	r3, #68	; 0x44
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 809b 	beq.w	800282c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	3350      	adds	r3, #80	; 0x50
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	441a      	add	r2, r3
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	202c      	movs	r0, #44	; 0x2c
 8002710:	fb00 f303 	mul.w	r3, r0, r3
 8002714:	440b      	add	r3, r1
 8002716:	334c      	adds	r3, #76	; 0x4c
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d87a      	bhi.n	8002814 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	212c      	movs	r1, #44	; 0x2c
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	4413      	add	r3, r2
 800272e:	3344      	adds	r3, #68	; 0x44
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	b292      	uxth	r2, r2
 8002736:	4619      	mov	r1, r3
 8002738:	f001 fa7c 	bl	8003c34 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	212c      	movs	r1, #44	; 0x2c
 8002742:	fb01 f303 	mul.w	r3, r1, r3
 8002746:	4413      	add	r3, r2
 8002748:	3344      	adds	r3, #68	; 0x44
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	441a      	add	r2, r3
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	202c      	movs	r0, #44	; 0x2c
 8002756:	fb00 f303 	mul.w	r3, r0, r3
 800275a:	440b      	add	r3, r1
 800275c:	3344      	adds	r3, #68	; 0x44
 800275e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	212c      	movs	r1, #44	; 0x2c
 8002766:	fb01 f303 	mul.w	r3, r1, r3
 800276a:	4413      	add	r3, r2
 800276c:	3350      	adds	r3, #80	; 0x50
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	441a      	add	r2, r3
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	202c      	movs	r0, #44	; 0x2c
 800277a:	fb00 f303 	mul.w	r3, r0, r3
 800277e:	440b      	add	r3, r1
 8002780:	3350      	adds	r3, #80	; 0x50
 8002782:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	4413      	add	r3, r2
 800278c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	0cdb      	lsrs	r3, r3, #19
 8002794:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002798:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	212c      	movs	r1, #44	; 0x2c
 80027a0:	fb01 f303 	mul.w	r3, r1, r3
 80027a4:	4413      	add	r3, r2
 80027a6:	3340      	adds	r3, #64	; 0x40
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d13c      	bne.n	800282c <HCD_RXQLVL_IRQHandler+0x19a>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d039      	beq.n	800282c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027ce:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027d6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e4:	461a      	mov	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	212c      	movs	r1, #44	; 0x2c
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	4413      	add	r3, r2
 80027f6:	3354      	adds	r3, #84	; 0x54
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	f083 0301 	eor.w	r3, r3, #1
 80027fe:	b2d8      	uxtb	r0, r3
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	212c      	movs	r1, #44	; 0x2c
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	4413      	add	r3, r2
 800280c:	3354      	adds	r3, #84	; 0x54
 800280e:	4602      	mov	r2, r0
 8002810:	701a      	strb	r2, [r3, #0]
      break;
 8002812:	e00b      	b.n	800282c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	212c      	movs	r1, #44	; 0x2c
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	3360      	adds	r3, #96	; 0x60
 8002822:	2204      	movs	r2, #4
 8002824:	701a      	strb	r2, [r3, #0]
      break;
 8002826:	e001      	b.n	800282c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002828:	bf00      	nop
 800282a:	e000      	b.n	800282e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800282c:	bf00      	nop
  }
}
 800282e:	bf00      	nop
 8002830:	3728      	adds	r7, #40	; 0x28
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b086      	sub	sp, #24
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002862:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b02      	cmp	r3, #2
 800286c:	d10b      	bne.n	8002886 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b01      	cmp	r3, #1
 8002876:	d102      	bne.n	800287e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f004 fb99 	bl	8006fb0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f043 0302 	orr.w	r3, r3, #2
 8002884:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b08      	cmp	r3, #8
 800288e:	d132      	bne.n	80028f6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f043 0308 	orr.w	r3, r3, #8
 8002896:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d126      	bne.n	80028f0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d113      	bne.n	80028d2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80028b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028b4:	d106      	bne.n	80028c4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2102      	movs	r1, #2
 80028bc:	4618      	mov	r0, r3
 80028be:	f001 fb27 	bl	8003f10 <USB_InitFSLSPClkSel>
 80028c2:	e011      	b.n	80028e8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2101      	movs	r1, #1
 80028ca:	4618      	mov	r0, r3
 80028cc:	f001 fb20 	bl	8003f10 <USB_InitFSLSPClkSel>
 80028d0:	e00a      	b.n	80028e8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d106      	bne.n	80028e8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028e0:	461a      	mov	r2, r3
 80028e2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80028e6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f004 fb8b 	bl	8007004 <HAL_HCD_PortEnabled_Callback>
 80028ee:	e002      	b.n	80028f6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f004 fb95 	bl	8007020 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 0320 	and.w	r3, r3, #32
 80028fc:	2b20      	cmp	r3, #32
 80028fe:	d103      	bne.n	8002908 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f043 0320 	orr.w	r3, r3, #32
 8002906:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800290e:	461a      	mov	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	6013      	str	r3, [r2, #0]
}
 8002914:	bf00      	nop
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e267      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d075      	beq.n	8002a26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800293a:	4b88      	ldr	r3, [pc, #544]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b04      	cmp	r3, #4
 8002944:	d00c      	beq.n	8002960 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002946:	4b85      	ldr	r3, [pc, #532]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800294e:	2b08      	cmp	r3, #8
 8002950:	d112      	bne.n	8002978 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002952:	4b82      	ldr	r3, [pc, #520]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800295e:	d10b      	bne.n	8002978 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002960:	4b7e      	ldr	r3, [pc, #504]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d05b      	beq.n	8002a24 <HAL_RCC_OscConfig+0x108>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d157      	bne.n	8002a24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e242      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002980:	d106      	bne.n	8002990 <HAL_RCC_OscConfig+0x74>
 8002982:	4b76      	ldr	r3, [pc, #472]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a75      	ldr	r2, [pc, #468]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	e01d      	b.n	80029cc <HAL_RCC_OscConfig+0xb0>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002998:	d10c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x98>
 800299a:	4b70      	ldr	r3, [pc, #448]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a6f      	ldr	r2, [pc, #444]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 80029a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4b6d      	ldr	r3, [pc, #436]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a6c      	ldr	r2, [pc, #432]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e00b      	b.n	80029cc <HAL_RCC_OscConfig+0xb0>
 80029b4:	4b69      	ldr	r3, [pc, #420]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a68      	ldr	r2, [pc, #416]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 80029ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	4b66      	ldr	r3, [pc, #408]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a65      	ldr	r2, [pc, #404]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 80029c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d013      	beq.n	80029fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7fe f8d2 	bl	8000b7c <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029dc:	f7fe f8ce 	bl	8000b7c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	; 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e207      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ee:	4b5b      	ldr	r3, [pc, #364]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0xc0>
 80029fa:	e014      	b.n	8002a26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fc:	f7fe f8be 	bl	8000b7c <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a04:	f7fe f8ba 	bl	8000b7c <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	; 0x64
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e1f3      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a16:	4b51      	ldr	r3, [pc, #324]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0xe8>
 8002a22:	e000      	b.n	8002a26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d063      	beq.n	8002afa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a32:	4b4a      	ldr	r3, [pc, #296]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00b      	beq.n	8002a56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a3e:	4b47      	ldr	r3, [pc, #284]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d11c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a4a:	4b44      	ldr	r3, [pc, #272]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d116      	bne.n	8002a84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a56:	4b41      	ldr	r3, [pc, #260]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_RCC_OscConfig+0x152>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d001      	beq.n	8002a6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e1c7      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6e:	4b3b      	ldr	r3, [pc, #236]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4937      	ldr	r1, [pc, #220]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a82:	e03a      	b.n	8002afa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d020      	beq.n	8002ace <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a8c:	4b34      	ldr	r3, [pc, #208]	; (8002b60 <HAL_RCC_OscConfig+0x244>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a92:	f7fe f873 	bl	8000b7c <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a9a:	f7fe f86f 	bl	8000b7c <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e1a8      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aac:	4b2b      	ldr	r3, [pc, #172]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab8:	4b28      	ldr	r3, [pc, #160]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4925      	ldr	r1, [pc, #148]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	600b      	str	r3, [r1, #0]
 8002acc:	e015      	b.n	8002afa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ace:	4b24      	ldr	r3, [pc, #144]	; (8002b60 <HAL_RCC_OscConfig+0x244>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7fe f852 	bl	8000b7c <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002adc:	f7fe f84e 	bl	8000b7c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e187      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aee:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d036      	beq.n	8002b74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d016      	beq.n	8002b3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_RCC_OscConfig+0x248>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b14:	f7fe f832 	bl	8000b7c <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b1c:	f7fe f82e 	bl	8000b7c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e167      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_RCC_OscConfig+0x240>)
 8002b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0x200>
 8002b3a:	e01b      	b.n	8002b74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b3c:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <HAL_RCC_OscConfig+0x248>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b42:	f7fe f81b 	bl	8000b7c <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b48:	e00e      	b.n	8002b68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b4a:	f7fe f817 	bl	8000b7c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d907      	bls.n	8002b68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e150      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	42470000 	.word	0x42470000
 8002b64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b68:	4b88      	ldr	r3, [pc, #544]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1ea      	bne.n	8002b4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 8097 	beq.w	8002cb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b82:	2300      	movs	r3, #0
 8002b84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b86:	4b81      	ldr	r3, [pc, #516]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10f      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	4b7d      	ldr	r3, [pc, #500]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	4a7c      	ldr	r2, [pc, #496]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba2:	4b7a      	ldr	r3, [pc, #488]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb2:	4b77      	ldr	r3, [pc, #476]	; (8002d90 <HAL_RCC_OscConfig+0x474>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d118      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bbe:	4b74      	ldr	r3, [pc, #464]	; (8002d90 <HAL_RCC_OscConfig+0x474>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a73      	ldr	r2, [pc, #460]	; (8002d90 <HAL_RCC_OscConfig+0x474>)
 8002bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bca:	f7fd ffd7 	bl	8000b7c <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd2:	f7fd ffd3 	bl	8000b7c <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e10c      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be4:	4b6a      	ldr	r3, [pc, #424]	; (8002d90 <HAL_RCC_OscConfig+0x474>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d106      	bne.n	8002c06 <HAL_RCC_OscConfig+0x2ea>
 8002bf8:	4b64      	ldr	r3, [pc, #400]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfc:	4a63      	ldr	r2, [pc, #396]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	6713      	str	r3, [r2, #112]	; 0x70
 8002c04:	e01c      	b.n	8002c40 <HAL_RCC_OscConfig+0x324>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b05      	cmp	r3, #5
 8002c0c:	d10c      	bne.n	8002c28 <HAL_RCC_OscConfig+0x30c>
 8002c0e:	4b5f      	ldr	r3, [pc, #380]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	4a5e      	ldr	r2, [pc, #376]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002c14:	f043 0304 	orr.w	r3, r3, #4
 8002c18:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1a:	4b5c      	ldr	r3, [pc, #368]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1e:	4a5b      	ldr	r2, [pc, #364]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	6713      	str	r3, [r2, #112]	; 0x70
 8002c26:	e00b      	b.n	8002c40 <HAL_RCC_OscConfig+0x324>
 8002c28:	4b58      	ldr	r3, [pc, #352]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2c:	4a57      	ldr	r2, [pc, #348]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002c2e:	f023 0301 	bic.w	r3, r3, #1
 8002c32:	6713      	str	r3, [r2, #112]	; 0x70
 8002c34:	4b55      	ldr	r3, [pc, #340]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c38:	4a54      	ldr	r2, [pc, #336]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002c3a:	f023 0304 	bic.w	r3, r3, #4
 8002c3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d015      	beq.n	8002c74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fd ff98 	bl	8000b7c <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c50:	f7fd ff94 	bl	8000b7c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e0cb      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c66:	4b49      	ldr	r3, [pc, #292]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0ee      	beq.n	8002c50 <HAL_RCC_OscConfig+0x334>
 8002c72:	e014      	b.n	8002c9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c74:	f7fd ff82 	bl	8000b7c <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c7a:	e00a      	b.n	8002c92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c7c:	f7fd ff7e 	bl	8000b7c <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e0b5      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c92:	4b3e      	ldr	r3, [pc, #248]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1ee      	bne.n	8002c7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d105      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca4:	4b39      	ldr	r3, [pc, #228]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	4a38      	ldr	r2, [pc, #224]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80a1 	beq.w	8002dfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cba:	4b34      	ldr	r3, [pc, #208]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d05c      	beq.n	8002d80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d141      	bne.n	8002d52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cce:	4b31      	ldr	r3, [pc, #196]	; (8002d94 <HAL_RCC_OscConfig+0x478>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7fd ff52 	bl	8000b7c <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7fd ff4e 	bl	8000b7c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e087      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cee:	4b27      	ldr	r3, [pc, #156]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69da      	ldr	r2, [r3, #28]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	019b      	lsls	r3, r3, #6
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	085b      	lsrs	r3, r3, #1
 8002d12:	3b01      	subs	r3, #1
 8002d14:	041b      	lsls	r3, r3, #16
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	061b      	lsls	r3, r3, #24
 8002d1e:	491b      	ldr	r1, [pc, #108]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d24:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <HAL_RCC_OscConfig+0x478>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2a:	f7fd ff27 	bl	8000b7c <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d32:	f7fd ff23 	bl	8000b7c <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e05c      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d44:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x416>
 8002d50:	e054      	b.n	8002dfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d52:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <HAL_RCC_OscConfig+0x478>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d58:	f7fd ff10 	bl	8000b7c <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d60:	f7fd ff0c 	bl	8000b7c <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e045      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d72:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_RCC_OscConfig+0x470>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x444>
 8002d7e:	e03d      	b.n	8002dfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d107      	bne.n	8002d98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e038      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	40007000 	.word	0x40007000
 8002d94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d98:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <HAL_RCC_OscConfig+0x4ec>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d028      	beq.n	8002df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d121      	bne.n	8002df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d11a      	bne.n	8002df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dc8:	4013      	ands	r3, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d111      	bne.n	8002df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dde:	085b      	lsrs	r3, r3, #1
 8002de0:	3b01      	subs	r3, #1
 8002de2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d107      	bne.n	8002df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d001      	beq.n	8002dfc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e000      	b.n	8002dfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800

08002e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0cc      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e20:	4b68      	ldr	r3, [pc, #416]	; (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d90c      	bls.n	8002e48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2e:	4b65      	ldr	r3, [pc, #404]	; (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e36:	4b63      	ldr	r3, [pc, #396]	; (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0b8      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d020      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e60:	4b59      	ldr	r3, [pc, #356]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	4a58      	ldr	r2, [pc, #352]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e78:	4b53      	ldr	r3, [pc, #332]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	4a52      	ldr	r2, [pc, #328]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e84:	4b50      	ldr	r3, [pc, #320]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	494d      	ldr	r1, [pc, #308]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d044      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d107      	bne.n	8002eba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eaa:	4b47      	ldr	r3, [pc, #284]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d119      	bne.n	8002eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e07f      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d003      	beq.n	8002eca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d107      	bne.n	8002eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eca:	4b3f      	ldr	r3, [pc, #252]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d109      	bne.n	8002eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e06f      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eda:	4b3b      	ldr	r3, [pc, #236]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e067      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eea:	4b37      	ldr	r3, [pc, #220]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f023 0203 	bic.w	r2, r3, #3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4934      	ldr	r1, [pc, #208]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002efc:	f7fd fe3e 	bl	8000b7c <HAL_GetTick>
 8002f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f02:	e00a      	b.n	8002f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f04:	f7fd fe3a 	bl	8000b7c <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e04f      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1a:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 020c 	and.w	r2, r3, #12
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d1eb      	bne.n	8002f04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b25      	ldr	r3, [pc, #148]	; (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d20c      	bcs.n	8002f54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b22      	ldr	r3, [pc, #136]	; (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	4b20      	ldr	r3, [pc, #128]	; (8002fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e032      	b.n	8002fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f60:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4916      	ldr	r1, [pc, #88]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f7e:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	490e      	ldr	r1, [pc, #56]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f92:	f000 f821 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8002f96:	4602      	mov	r2, r0
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	490a      	ldr	r1, [pc, #40]	; (8002fcc <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	5ccb      	ldrb	r3, [r1, r3]
 8002fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002faa:	4a09      	ldr	r2, [pc, #36]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fae:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fd fd9e 	bl	8000af4 <HAL_InitTick>

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40023c00 	.word	0x40023c00
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	08008290 	.word	0x08008290
 8002fd0:	20000000 	.word	0x20000000
 8002fd4:	20000004 	.word	0x20000004

08002fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fdc:	b090      	sub	sp, #64	; 0x40
 8002fde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fe8:	2300      	movs	r3, #0
 8002fea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ff0:	4b59      	ldr	r3, [pc, #356]	; (8003158 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 030c 	and.w	r3, r3, #12
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d00d      	beq.n	8003018 <HAL_RCC_GetSysClockFreq+0x40>
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	f200 80a1 	bhi.w	8003144 <HAL_RCC_GetSysClockFreq+0x16c>
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <HAL_RCC_GetSysClockFreq+0x34>
 8003006:	2b04      	cmp	r3, #4
 8003008:	d003      	beq.n	8003012 <HAL_RCC_GetSysClockFreq+0x3a>
 800300a:	e09b      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800300c:	4b53      	ldr	r3, [pc, #332]	; (800315c <HAL_RCC_GetSysClockFreq+0x184>)
 800300e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003010:	e09b      	b.n	800314a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003012:	4b53      	ldr	r3, [pc, #332]	; (8003160 <HAL_RCC_GetSysClockFreq+0x188>)
 8003014:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003016:	e098      	b.n	800314a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003018:	4b4f      	ldr	r3, [pc, #316]	; (8003158 <HAL_RCC_GetSysClockFreq+0x180>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003020:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003022:	4b4d      	ldr	r3, [pc, #308]	; (8003158 <HAL_RCC_GetSysClockFreq+0x180>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d028      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800302e:	4b4a      	ldr	r3, [pc, #296]	; (8003158 <HAL_RCC_GetSysClockFreq+0x180>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	099b      	lsrs	r3, r3, #6
 8003034:	2200      	movs	r2, #0
 8003036:	623b      	str	r3, [r7, #32]
 8003038:	627a      	str	r2, [r7, #36]	; 0x24
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003040:	2100      	movs	r1, #0
 8003042:	4b47      	ldr	r3, [pc, #284]	; (8003160 <HAL_RCC_GetSysClockFreq+0x188>)
 8003044:	fb03 f201 	mul.w	r2, r3, r1
 8003048:	2300      	movs	r3, #0
 800304a:	fb00 f303 	mul.w	r3, r0, r3
 800304e:	4413      	add	r3, r2
 8003050:	4a43      	ldr	r2, [pc, #268]	; (8003160 <HAL_RCC_GetSysClockFreq+0x188>)
 8003052:	fba0 1202 	umull	r1, r2, r0, r2
 8003056:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003058:	460a      	mov	r2, r1
 800305a:	62ba      	str	r2, [r7, #40]	; 0x28
 800305c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800305e:	4413      	add	r3, r2
 8003060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003064:	2200      	movs	r2, #0
 8003066:	61bb      	str	r3, [r7, #24]
 8003068:	61fa      	str	r2, [r7, #28]
 800306a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800306e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003072:	f7fd f905 	bl	8000280 <__aeabi_uldivmod>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4613      	mov	r3, r2
 800307c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800307e:	e053      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003080:	4b35      	ldr	r3, [pc, #212]	; (8003158 <HAL_RCC_GetSysClockFreq+0x180>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	099b      	lsrs	r3, r3, #6
 8003086:	2200      	movs	r2, #0
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	617a      	str	r2, [r7, #20]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003092:	f04f 0b00 	mov.w	fp, #0
 8003096:	4652      	mov	r2, sl
 8003098:	465b      	mov	r3, fp
 800309a:	f04f 0000 	mov.w	r0, #0
 800309e:	f04f 0100 	mov.w	r1, #0
 80030a2:	0159      	lsls	r1, r3, #5
 80030a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030a8:	0150      	lsls	r0, r2, #5
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	ebb2 080a 	subs.w	r8, r2, sl
 80030b2:	eb63 090b 	sbc.w	r9, r3, fp
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030ca:	ebb2 0408 	subs.w	r4, r2, r8
 80030ce:	eb63 0509 	sbc.w	r5, r3, r9
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	00eb      	lsls	r3, r5, #3
 80030dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030e0:	00e2      	lsls	r2, r4, #3
 80030e2:	4614      	mov	r4, r2
 80030e4:	461d      	mov	r5, r3
 80030e6:	eb14 030a 	adds.w	r3, r4, sl
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	eb45 030b 	adc.w	r3, r5, fp
 80030f0:	607b      	str	r3, [r7, #4]
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030fe:	4629      	mov	r1, r5
 8003100:	028b      	lsls	r3, r1, #10
 8003102:	4621      	mov	r1, r4
 8003104:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003108:	4621      	mov	r1, r4
 800310a:	028a      	lsls	r2, r1, #10
 800310c:	4610      	mov	r0, r2
 800310e:	4619      	mov	r1, r3
 8003110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003112:	2200      	movs	r2, #0
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	60fa      	str	r2, [r7, #12]
 8003118:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800311c:	f7fd f8b0 	bl	8000280 <__aeabi_uldivmod>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4613      	mov	r3, r2
 8003126:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <HAL_RCC_GetSysClockFreq+0x180>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	0c1b      	lsrs	r3, r3, #16
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	3301      	adds	r3, #1
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003138:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800313a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003140:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003142:	e002      	b.n	800314a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003144:	4b05      	ldr	r3, [pc, #20]	; (800315c <HAL_RCC_GetSysClockFreq+0x184>)
 8003146:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800314a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800314c:	4618      	mov	r0, r3
 800314e:	3740      	adds	r7, #64	; 0x40
 8003150:	46bd      	mov	sp, r7
 8003152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003156:	bf00      	nop
 8003158:	40023800 	.word	0x40023800
 800315c:	00f42400 	.word	0x00f42400
 8003160:	017d7840 	.word	0x017d7840

08003164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003168:	4b03      	ldr	r3, [pc, #12]	; (8003178 <HAL_RCC_GetHCLKFreq+0x14>)
 800316a:	681b      	ldr	r3, [r3, #0]
}
 800316c:	4618      	mov	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	20000000 	.word	0x20000000

0800317c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003180:	f7ff fff0 	bl	8003164 <HAL_RCC_GetHCLKFreq>
 8003184:	4602      	mov	r2, r0
 8003186:	4b05      	ldr	r3, [pc, #20]	; (800319c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	0a9b      	lsrs	r3, r3, #10
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	4903      	ldr	r1, [pc, #12]	; (80031a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003192:	5ccb      	ldrb	r3, [r1, r3]
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40023800 	.word	0x40023800
 80031a0:	080082a0 	.word	0x080082a0

080031a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031a8:	f7ff ffdc 	bl	8003164 <HAL_RCC_GetHCLKFreq>
 80031ac:	4602      	mov	r2, r0
 80031ae:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	0b5b      	lsrs	r3, r3, #13
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	4903      	ldr	r1, [pc, #12]	; (80031c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ba:	5ccb      	ldrb	r3, [r1, r3]
 80031bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40023800 	.word	0x40023800
 80031c8:	080082a0 	.word	0x080082a0

080031cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e03f      	b.n	800325e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d106      	bne.n	80031f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7fd fbd8 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2224      	movs	r2, #36	; 0x24
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800320e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f929 	bl	8003468 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003224:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695a      	ldr	r2, [r3, #20]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003234:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003244:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b08a      	sub	sp, #40	; 0x28
 800326a:	af02      	add	r7, sp, #8
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	603b      	str	r3, [r7, #0]
 8003272:	4613      	mov	r3, r2
 8003274:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b20      	cmp	r3, #32
 8003284:	d17c      	bne.n	8003380 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <HAL_UART_Transmit+0x2c>
 800328c:	88fb      	ldrh	r3, [r7, #6]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e075      	b.n	8003382 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_UART_Transmit+0x3e>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e06e      	b.n	8003382 <HAL_UART_Transmit+0x11c>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2221      	movs	r2, #33	; 0x21
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032ba:	f7fd fc5f 	bl	8000b7c <HAL_GetTick>
 80032be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	88fa      	ldrh	r2, [r7, #6]
 80032c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	88fa      	ldrh	r2, [r7, #6]
 80032ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d4:	d108      	bne.n	80032e8 <HAL_UART_Transmit+0x82>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d104      	bne.n	80032e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	e003      	b.n	80032f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80032f8:	e02a      	b.n	8003350 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2200      	movs	r2, #0
 8003302:	2180      	movs	r1, #128	; 0x80
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f840 	bl	800338a <UART_WaitOnFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e036      	b.n	8003382 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10b      	bne.n	8003332 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003328:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	3302      	adds	r3, #2
 800332e:	61bb      	str	r3, [r7, #24]
 8003330:	e007      	b.n	8003342 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	781a      	ldrb	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	3301      	adds	r3, #1
 8003340:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003354:	b29b      	uxth	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1cf      	bne.n	80032fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2200      	movs	r2, #0
 8003362:	2140      	movs	r1, #64	; 0x40
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 f810 	bl	800338a <UART_WaitOnFlagUntilTimeout>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e006      	b.n	8003382 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	e000      	b.n	8003382 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003380:	2302      	movs	r3, #2
  }
}
 8003382:	4618      	mov	r0, r3
 8003384:	3720      	adds	r7, #32
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b090      	sub	sp, #64	; 0x40
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	603b      	str	r3, [r7, #0]
 8003396:	4613      	mov	r3, r2
 8003398:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800339a:	e050      	b.n	800343e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800339c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800339e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a2:	d04c      	beq.n	800343e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d007      	beq.n	80033ba <UART_WaitOnFlagUntilTimeout+0x30>
 80033aa:	f7fd fbe7 	bl	8000b7c <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d241      	bcs.n	800343e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	330c      	adds	r3, #12
 80033c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c4:	e853 3f00 	ldrex	r3, [r3]
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	330c      	adds	r3, #12
 80033d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033da:	637a      	str	r2, [r7, #52]	; 0x34
 80033dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033e2:	e841 2300 	strex	r3, r2, [r1]
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1e5      	bne.n	80033ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3314      	adds	r3, #20
 80033f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	e853 3f00 	ldrex	r3, [r3]
 80033fc:	613b      	str	r3, [r7, #16]
   return(result);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f023 0301 	bic.w	r3, r3, #1
 8003404:	63bb      	str	r3, [r7, #56]	; 0x38
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	3314      	adds	r3, #20
 800340c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800340e:	623a      	str	r2, [r7, #32]
 8003410:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003412:	69f9      	ldr	r1, [r7, #28]
 8003414:	6a3a      	ldr	r2, [r7, #32]
 8003416:	e841 2300 	strex	r3, r2, [r1]
 800341a:	61bb      	str	r3, [r7, #24]
   return(result);
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1e5      	bne.n	80033ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e00f      	b.n	800345e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4013      	ands	r3, r2
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	429a      	cmp	r2, r3
 800344c:	bf0c      	ite	eq
 800344e:	2301      	moveq	r3, #1
 8003450:	2300      	movne	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	429a      	cmp	r2, r3
 800345a:	d09f      	beq.n	800339c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3740      	adds	r7, #64	; 0x40
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800346c:	b0c0      	sub	sp, #256	; 0x100
 800346e:	af00      	add	r7, sp, #0
 8003470:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003484:	68d9      	ldr	r1, [r3, #12]
 8003486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	ea40 0301 	orr.w	r3, r0, r1
 8003490:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	431a      	orrs	r2, r3
 80034a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	431a      	orrs	r2, r3
 80034a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034c0:	f021 010c 	bic.w	r1, r1, #12
 80034c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034ce:	430b      	orrs	r3, r1
 80034d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e2:	6999      	ldr	r1, [r3, #24]
 80034e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	ea40 0301 	orr.w	r3, r0, r1
 80034ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4b8f      	ldr	r3, [pc, #572]	; (8003734 <UART_SetConfig+0x2cc>)
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d005      	beq.n	8003508 <UART_SetConfig+0xa0>
 80034fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	4b8d      	ldr	r3, [pc, #564]	; (8003738 <UART_SetConfig+0x2d0>)
 8003504:	429a      	cmp	r2, r3
 8003506:	d104      	bne.n	8003512 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003508:	f7ff fe4c 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 800350c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003510:	e003      	b.n	800351a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003512:	f7ff fe33 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 8003516:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800351a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003524:	f040 810c 	bne.w	8003740 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800352c:	2200      	movs	r2, #0
 800352e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003532:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003536:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800353a:	4622      	mov	r2, r4
 800353c:	462b      	mov	r3, r5
 800353e:	1891      	adds	r1, r2, r2
 8003540:	65b9      	str	r1, [r7, #88]	; 0x58
 8003542:	415b      	adcs	r3, r3
 8003544:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003546:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800354a:	4621      	mov	r1, r4
 800354c:	eb12 0801 	adds.w	r8, r2, r1
 8003550:	4629      	mov	r1, r5
 8003552:	eb43 0901 	adc.w	r9, r3, r1
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003562:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003566:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800356a:	4690      	mov	r8, r2
 800356c:	4699      	mov	r9, r3
 800356e:	4623      	mov	r3, r4
 8003570:	eb18 0303 	adds.w	r3, r8, r3
 8003574:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003578:	462b      	mov	r3, r5
 800357a:	eb49 0303 	adc.w	r3, r9, r3
 800357e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800358e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003592:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003596:	460b      	mov	r3, r1
 8003598:	18db      	adds	r3, r3, r3
 800359a:	653b      	str	r3, [r7, #80]	; 0x50
 800359c:	4613      	mov	r3, r2
 800359e:	eb42 0303 	adc.w	r3, r2, r3
 80035a2:	657b      	str	r3, [r7, #84]	; 0x54
 80035a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80035ac:	f7fc fe68 	bl	8000280 <__aeabi_uldivmod>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4b61      	ldr	r3, [pc, #388]	; (800373c <UART_SetConfig+0x2d4>)
 80035b6:	fba3 2302 	umull	r2, r3, r3, r2
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	011c      	lsls	r4, r3, #4
 80035be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035c2:	2200      	movs	r2, #0
 80035c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80035cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80035d0:	4642      	mov	r2, r8
 80035d2:	464b      	mov	r3, r9
 80035d4:	1891      	adds	r1, r2, r2
 80035d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80035d8:	415b      	adcs	r3, r3
 80035da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035e0:	4641      	mov	r1, r8
 80035e2:	eb12 0a01 	adds.w	sl, r2, r1
 80035e6:	4649      	mov	r1, r9
 80035e8:	eb43 0b01 	adc.w	fp, r3, r1
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003600:	4692      	mov	sl, r2
 8003602:	469b      	mov	fp, r3
 8003604:	4643      	mov	r3, r8
 8003606:	eb1a 0303 	adds.w	r3, sl, r3
 800360a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800360e:	464b      	mov	r3, r9
 8003610:	eb4b 0303 	adc.w	r3, fp, r3
 8003614:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003624:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003628:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800362c:	460b      	mov	r3, r1
 800362e:	18db      	adds	r3, r3, r3
 8003630:	643b      	str	r3, [r7, #64]	; 0x40
 8003632:	4613      	mov	r3, r2
 8003634:	eb42 0303 	adc.w	r3, r2, r3
 8003638:	647b      	str	r3, [r7, #68]	; 0x44
 800363a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800363e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003642:	f7fc fe1d 	bl	8000280 <__aeabi_uldivmod>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4611      	mov	r1, r2
 800364c:	4b3b      	ldr	r3, [pc, #236]	; (800373c <UART_SetConfig+0x2d4>)
 800364e:	fba3 2301 	umull	r2, r3, r3, r1
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	2264      	movs	r2, #100	; 0x64
 8003656:	fb02 f303 	mul.w	r3, r2, r3
 800365a:	1acb      	subs	r3, r1, r3
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003662:	4b36      	ldr	r3, [pc, #216]	; (800373c <UART_SetConfig+0x2d4>)
 8003664:	fba3 2302 	umull	r2, r3, r3, r2
 8003668:	095b      	lsrs	r3, r3, #5
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003670:	441c      	add	r4, r3
 8003672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003676:	2200      	movs	r2, #0
 8003678:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800367c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003680:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003684:	4642      	mov	r2, r8
 8003686:	464b      	mov	r3, r9
 8003688:	1891      	adds	r1, r2, r2
 800368a:	63b9      	str	r1, [r7, #56]	; 0x38
 800368c:	415b      	adcs	r3, r3
 800368e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003690:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003694:	4641      	mov	r1, r8
 8003696:	1851      	adds	r1, r2, r1
 8003698:	6339      	str	r1, [r7, #48]	; 0x30
 800369a:	4649      	mov	r1, r9
 800369c:	414b      	adcs	r3, r1
 800369e:	637b      	str	r3, [r7, #52]	; 0x34
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80036ac:	4659      	mov	r1, fp
 80036ae:	00cb      	lsls	r3, r1, #3
 80036b0:	4651      	mov	r1, sl
 80036b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036b6:	4651      	mov	r1, sl
 80036b8:	00ca      	lsls	r2, r1, #3
 80036ba:	4610      	mov	r0, r2
 80036bc:	4619      	mov	r1, r3
 80036be:	4603      	mov	r3, r0
 80036c0:	4642      	mov	r2, r8
 80036c2:	189b      	adds	r3, r3, r2
 80036c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036c8:	464b      	mov	r3, r9
 80036ca:	460a      	mov	r2, r1
 80036cc:	eb42 0303 	adc.w	r3, r2, r3
 80036d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036e8:	460b      	mov	r3, r1
 80036ea:	18db      	adds	r3, r3, r3
 80036ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ee:	4613      	mov	r3, r2
 80036f0:	eb42 0303 	adc.w	r3, r2, r3
 80036f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036fe:	f7fc fdbf 	bl	8000280 <__aeabi_uldivmod>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	4b0d      	ldr	r3, [pc, #52]	; (800373c <UART_SetConfig+0x2d4>)
 8003708:	fba3 1302 	umull	r1, r3, r3, r2
 800370c:	095b      	lsrs	r3, r3, #5
 800370e:	2164      	movs	r1, #100	; 0x64
 8003710:	fb01 f303 	mul.w	r3, r1, r3
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	3332      	adds	r3, #50	; 0x32
 800371a:	4a08      	ldr	r2, [pc, #32]	; (800373c <UART_SetConfig+0x2d4>)
 800371c:	fba2 2303 	umull	r2, r3, r2, r3
 8003720:	095b      	lsrs	r3, r3, #5
 8003722:	f003 0207 	and.w	r2, r3, #7
 8003726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4422      	add	r2, r4
 800372e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003730:	e106      	b.n	8003940 <UART_SetConfig+0x4d8>
 8003732:	bf00      	nop
 8003734:	40011000 	.word	0x40011000
 8003738:	40011400 	.word	0x40011400
 800373c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003744:	2200      	movs	r2, #0
 8003746:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800374a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800374e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003752:	4642      	mov	r2, r8
 8003754:	464b      	mov	r3, r9
 8003756:	1891      	adds	r1, r2, r2
 8003758:	6239      	str	r1, [r7, #32]
 800375a:	415b      	adcs	r3, r3
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
 800375e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003762:	4641      	mov	r1, r8
 8003764:	1854      	adds	r4, r2, r1
 8003766:	4649      	mov	r1, r9
 8003768:	eb43 0501 	adc.w	r5, r3, r1
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	00eb      	lsls	r3, r5, #3
 8003776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800377a:	00e2      	lsls	r2, r4, #3
 800377c:	4614      	mov	r4, r2
 800377e:	461d      	mov	r5, r3
 8003780:	4643      	mov	r3, r8
 8003782:	18e3      	adds	r3, r4, r3
 8003784:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003788:	464b      	mov	r3, r9
 800378a:	eb45 0303 	adc.w	r3, r5, r3
 800378e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800379e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037ae:	4629      	mov	r1, r5
 80037b0:	008b      	lsls	r3, r1, #2
 80037b2:	4621      	mov	r1, r4
 80037b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037b8:	4621      	mov	r1, r4
 80037ba:	008a      	lsls	r2, r1, #2
 80037bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80037c0:	f7fc fd5e 	bl	8000280 <__aeabi_uldivmod>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4b60      	ldr	r3, [pc, #384]	; (800394c <UART_SetConfig+0x4e4>)
 80037ca:	fba3 2302 	umull	r2, r3, r3, r2
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	011c      	lsls	r4, r3, #4
 80037d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037d6:	2200      	movs	r2, #0
 80037d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037e4:	4642      	mov	r2, r8
 80037e6:	464b      	mov	r3, r9
 80037e8:	1891      	adds	r1, r2, r2
 80037ea:	61b9      	str	r1, [r7, #24]
 80037ec:	415b      	adcs	r3, r3
 80037ee:	61fb      	str	r3, [r7, #28]
 80037f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037f4:	4641      	mov	r1, r8
 80037f6:	1851      	adds	r1, r2, r1
 80037f8:	6139      	str	r1, [r7, #16]
 80037fa:	4649      	mov	r1, r9
 80037fc:	414b      	adcs	r3, r1
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800380c:	4659      	mov	r1, fp
 800380e:	00cb      	lsls	r3, r1, #3
 8003810:	4651      	mov	r1, sl
 8003812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003816:	4651      	mov	r1, sl
 8003818:	00ca      	lsls	r2, r1, #3
 800381a:	4610      	mov	r0, r2
 800381c:	4619      	mov	r1, r3
 800381e:	4603      	mov	r3, r0
 8003820:	4642      	mov	r2, r8
 8003822:	189b      	adds	r3, r3, r2
 8003824:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003828:	464b      	mov	r3, r9
 800382a:	460a      	mov	r2, r1
 800382c:	eb42 0303 	adc.w	r3, r2, r3
 8003830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	67bb      	str	r3, [r7, #120]	; 0x78
 800383e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800384c:	4649      	mov	r1, r9
 800384e:	008b      	lsls	r3, r1, #2
 8003850:	4641      	mov	r1, r8
 8003852:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003856:	4641      	mov	r1, r8
 8003858:	008a      	lsls	r2, r1, #2
 800385a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800385e:	f7fc fd0f 	bl	8000280 <__aeabi_uldivmod>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	4611      	mov	r1, r2
 8003868:	4b38      	ldr	r3, [pc, #224]	; (800394c <UART_SetConfig+0x4e4>)
 800386a:	fba3 2301 	umull	r2, r3, r3, r1
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	2264      	movs	r2, #100	; 0x64
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	1acb      	subs	r3, r1, r3
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	3332      	adds	r3, #50	; 0x32
 800387c:	4a33      	ldr	r2, [pc, #204]	; (800394c <UART_SetConfig+0x4e4>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	095b      	lsrs	r3, r3, #5
 8003884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003888:	441c      	add	r4, r3
 800388a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800388e:	2200      	movs	r2, #0
 8003890:	673b      	str	r3, [r7, #112]	; 0x70
 8003892:	677a      	str	r2, [r7, #116]	; 0x74
 8003894:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003898:	4642      	mov	r2, r8
 800389a:	464b      	mov	r3, r9
 800389c:	1891      	adds	r1, r2, r2
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	415b      	adcs	r3, r3
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038a8:	4641      	mov	r1, r8
 80038aa:	1851      	adds	r1, r2, r1
 80038ac:	6039      	str	r1, [r7, #0]
 80038ae:	4649      	mov	r1, r9
 80038b0:	414b      	adcs	r3, r1
 80038b2:	607b      	str	r3, [r7, #4]
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	f04f 0300 	mov.w	r3, #0
 80038bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038c0:	4659      	mov	r1, fp
 80038c2:	00cb      	lsls	r3, r1, #3
 80038c4:	4651      	mov	r1, sl
 80038c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ca:	4651      	mov	r1, sl
 80038cc:	00ca      	lsls	r2, r1, #3
 80038ce:	4610      	mov	r0, r2
 80038d0:	4619      	mov	r1, r3
 80038d2:	4603      	mov	r3, r0
 80038d4:	4642      	mov	r2, r8
 80038d6:	189b      	adds	r3, r3, r2
 80038d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80038da:	464b      	mov	r3, r9
 80038dc:	460a      	mov	r2, r1
 80038de:	eb42 0303 	adc.w	r3, r2, r3
 80038e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	663b      	str	r3, [r7, #96]	; 0x60
 80038ee:	667a      	str	r2, [r7, #100]	; 0x64
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038fc:	4649      	mov	r1, r9
 80038fe:	008b      	lsls	r3, r1, #2
 8003900:	4641      	mov	r1, r8
 8003902:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003906:	4641      	mov	r1, r8
 8003908:	008a      	lsls	r2, r1, #2
 800390a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800390e:	f7fc fcb7 	bl	8000280 <__aeabi_uldivmod>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4b0d      	ldr	r3, [pc, #52]	; (800394c <UART_SetConfig+0x4e4>)
 8003918:	fba3 1302 	umull	r1, r3, r3, r2
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	2164      	movs	r1, #100	; 0x64
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	3332      	adds	r3, #50	; 0x32
 800392a:	4a08      	ldr	r2, [pc, #32]	; (800394c <UART_SetConfig+0x4e4>)
 800392c:	fba2 2303 	umull	r2, r3, r2, r3
 8003930:	095b      	lsrs	r3, r3, #5
 8003932:	f003 020f 	and.w	r2, r3, #15
 8003936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4422      	add	r2, r4
 800393e:	609a      	str	r2, [r3, #8]
}
 8003940:	bf00      	nop
 8003942:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003946:	46bd      	mov	sp, r7
 8003948:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800394c:	51eb851f 	.word	0x51eb851f

08003950 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003950:	b084      	sub	sp, #16
 8003952:	b580      	push	{r7, lr}
 8003954:	b084      	sub	sp, #16
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
 800395a:	f107 001c 	add.w	r0, r7, #28
 800395e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003964:	2b01      	cmp	r3, #1
 8003966:	d122      	bne.n	80039ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800397c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003992:	2b01      	cmp	r3, #1
 8003994:	d105      	bne.n	80039a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f9c0 	bl	8003d28 <USB_CoreReset>
 80039a8:	4603      	mov	r3, r0
 80039aa:	73fb      	strb	r3, [r7, #15]
 80039ac:	e01a      	b.n	80039e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f9b4 	bl	8003d28 <USB_CoreReset>
 80039c0:	4603      	mov	r3, r0
 80039c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80039c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	639a      	str	r2, [r3, #56]	; 0x38
 80039d6:	e005      	b.n	80039e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d10b      	bne.n	8003a02 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f043 0206 	orr.w	r2, r3, #6
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f043 0220 	orr.w	r2, r3, #32
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a0e:	b004      	add	sp, #16
 8003a10:	4770      	bx	lr

08003a12 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f043 0201 	orr.w	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f023 0201 	bic.w	r2, r3, #1
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b084      	sub	sp, #16
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d115      	bne.n	8003aa4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a84:	2001      	movs	r0, #1
 8003a86:	f7fd f885 	bl	8000b94 <HAL_Delay>
      ms++;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f93a 	bl	8003d0a <USB_GetMode>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d01e      	beq.n	8003ada <USB_SetCurrentMode+0x84>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b31      	cmp	r3, #49	; 0x31
 8003aa0:	d9f0      	bls.n	8003a84 <USB_SetCurrentMode+0x2e>
 8003aa2:	e01a      	b.n	8003ada <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d115      	bne.n	8003ad6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ab6:	2001      	movs	r0, #1
 8003ab8:	f7fd f86c 	bl	8000b94 <HAL_Delay>
      ms++;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f921 	bl	8003d0a <USB_GetMode>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <USB_SetCurrentMode+0x84>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b31      	cmp	r3, #49	; 0x31
 8003ad2:	d9f0      	bls.n	8003ab6 <USB_SetCurrentMode+0x60>
 8003ad4:	e001      	b.n	8003ada <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e005      	b.n	8003ae6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2b32      	cmp	r3, #50	; 0x32
 8003ade:	d101      	bne.n	8003ae4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3301      	adds	r3, #1
 8003b02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4a13      	ldr	r2, [pc, #76]	; (8003b54 <USB_FlushTxFifo+0x64>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d901      	bls.n	8003b10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e01b      	b.n	8003b48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	daf2      	bge.n	8003afe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	019b      	lsls	r3, r3, #6
 8003b20:	f043 0220 	orr.w	r2, r3, #32
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4a08      	ldr	r2, [pc, #32]	; (8003b54 <USB_FlushTxFifo+0x64>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e006      	b.n	8003b48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b20      	cmp	r3, #32
 8003b44:	d0f0      	beq.n	8003b28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	00030d40 	.word	0x00030d40

08003b58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3301      	adds	r3, #1
 8003b68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4a11      	ldr	r2, [pc, #68]	; (8003bb4 <USB_FlushRxFifo+0x5c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d901      	bls.n	8003b76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e018      	b.n	8003ba8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	daf2      	bge.n	8003b64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2210      	movs	r2, #16
 8003b86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4a08      	ldr	r2, [pc, #32]	; (8003bb4 <USB_FlushRxFifo+0x5c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d901      	bls.n	8003b9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e006      	b.n	8003ba8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b10      	cmp	r3, #16
 8003ba4:	d0f0      	beq.n	8003b88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	00030d40 	.word	0x00030d40

08003bb8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b089      	sub	sp, #36	; 0x24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	71fb      	strb	r3, [r7, #7]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003bd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d123      	bne.n	8003c26 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003bde:	88bb      	ldrh	r3, [r7, #4]
 8003be0:	3303      	adds	r3, #3
 8003be2:	089b      	lsrs	r3, r3, #2
 8003be4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003be6:	2300      	movs	r3, #0
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	e018      	b.n	8003c1e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	031a      	lsls	r2, r3, #12
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	3301      	adds	r3, #1
 8003c04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	3301      	adds	r3, #1
 8003c16:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d3e2      	bcc.n	8003bec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3724      	adds	r7, #36	; 0x24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b08b      	sub	sp, #44	; 0x2c
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003c4a:	88fb      	ldrh	r3, [r7, #6]
 8003c4c:	089b      	lsrs	r3, r3, #2
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003c52:	88fb      	ldrh	r3, [r7, #6]
 8003c54:	f003 0303 	and.w	r3, r3, #3
 8003c58:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	623b      	str	r3, [r7, #32]
 8003c5e:	e014      	b.n	8003c8a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	601a      	str	r2, [r3, #0]
    pDest++;
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	3301      	adds	r3, #1
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	3301      	adds	r3, #1
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	3301      	adds	r3, #1
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	3301      	adds	r3, #1
 8003c88:	623b      	str	r3, [r7, #32]
 8003c8a:	6a3a      	ldr	r2, [r7, #32]
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d3e6      	bcc.n	8003c60 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003c92:	8bfb      	ldrh	r3, [r7, #30]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01e      	beq.n	8003cd6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f107 0310 	add.w	r3, r7, #16
 8003ca8:	6812      	ldr	r2, [r2, #0]
 8003caa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	701a      	strb	r2, [r3, #0]
      i++;
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	623b      	str	r3, [r7, #32]
      pDest++;
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003cca:	8bfb      	ldrh	r3, [r7, #30]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003cd0:	8bfb      	ldrh	r3, [r7, #30]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1ea      	bne.n	8003cac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	372c      	adds	r7, #44	; 0x2c
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f003 0301 	and.w	r3, r3, #1
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
	...

08003d28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	3301      	adds	r3, #1
 8003d38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4a13      	ldr	r2, [pc, #76]	; (8003d8c <USB_CoreReset+0x64>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d901      	bls.n	8003d46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e01b      	b.n	8003d7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	daf2      	bge.n	8003d34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f043 0201 	orr.w	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3301      	adds	r3, #1
 8003d62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4a09      	ldr	r2, [pc, #36]	; (8003d8c <USB_CoreReset+0x64>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d901      	bls.n	8003d70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e006      	b.n	8003d7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d0f0      	beq.n	8003d5e <USB_CoreReset+0x36>

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	00030d40 	.word	0x00030d40

08003d90 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d90:	b084      	sub	sp, #16
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b086      	sub	sp, #24
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003db0:	461a      	mov	r2, r3
 8003db2:	2300      	movs	r3, #0
 8003db4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d018      	beq.n	8003e18 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d10a      	bne.n	8003e02 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003dfa:	f043 0304 	orr.w	r3, r3, #4
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	e014      	b.n	8003e2c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e10:	f023 0304 	bic.w	r3, r3, #4
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	e009      	b.n	8003e2c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e26:	f023 0304 	bic.w	r3, r3, #4
 8003e2a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e2c:	2110      	movs	r1, #16
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff fe5e 	bl	8003af0 <USB_FlushTxFifo>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7ff fe8a 	bl	8003b58 <USB_FlushRxFifo>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003e4e:	2300      	movs	r3, #0
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	e015      	b.n	8003e80 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e60:	461a      	mov	r2, r3
 8003e62:	f04f 33ff 	mov.w	r3, #4294967295
 8003e66:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e74:	461a      	mov	r2, r3
 8003e76:	2300      	movs	r3, #0
 8003e78:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d3e5      	bcc.n	8003e54 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f04f 32ff 	mov.w	r2, #4294967295
 8003e94:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00b      	beq.n	8003eba <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ea8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a13      	ldr	r2, [pc, #76]	; (8003efc <USB_HostInit+0x16c>)
 8003eae:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a13      	ldr	r2, [pc, #76]	; (8003f00 <USB_HostInit+0x170>)
 8003eb4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003eb8:	e009      	b.n	8003ece <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2280      	movs	r2, #128	; 0x80
 8003ebe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a10      	ldr	r2, [pc, #64]	; (8003f04 <USB_HostInit+0x174>)
 8003ec4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a0f      	ldr	r2, [pc, #60]	; (8003f08 <USB_HostInit+0x178>)
 8003eca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d105      	bne.n	8003ee0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	f043 0210 	orr.w	r2, r3, #16
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699a      	ldr	r2, [r3, #24]
 8003ee4:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <USB_HostInit+0x17c>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8003eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ef8:	b004      	add	sp, #16
 8003efa:	4770      	bx	lr
 8003efc:	01000200 	.word	0x01000200
 8003f00:	00e00300 	.word	0x00e00300
 8003f04:	00600080 	.word	0x00600080
 8003f08:	004000e0 	.word	0x004000e0
 8003f0c:	a3200008 	.word	0xa3200008

08003f10 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f2e:	f023 0303 	bic.w	r3, r3, #3
 8003f32:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	68f9      	ldr	r1, [r7, #12]
 8003f44:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d107      	bne.n	8003f62 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f58:	461a      	mov	r2, r3
 8003f5a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003f5e:	6053      	str	r3, [r2, #4]
 8003f60:	e009      	b.n	8003f76 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003f62:	78fb      	ldrb	r3, [r7, #3]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d106      	bne.n	8003f76 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f241 7370 	movw	r3, #6000	; 0x1770
 8003f74:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003fa4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8003fb4:	2064      	movs	r0, #100	; 0x64
 8003fb6:	f7fc fded 	bl	8000b94 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003fc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fc6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8003fc8:	200a      	movs	r0, #10
 8003fca:	f7fc fde3 	bl	8000b94 <HAL_Delay>

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003ffc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d109      	bne.n	800401c <USB_DriveVbus+0x44>
 8004008:	78fb      	ldrb	r3, [r7, #3]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d106      	bne.n	800401c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004016:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800401a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004026:	d109      	bne.n	800403c <USB_DriveVbus+0x64>
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004036:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800403a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800404a:	b480      	push	{r7}
 800404c:	b085      	sub	sp, #20
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	0c5b      	lsrs	r3, r3, #17
 8004068:	f003 0303 	and.w	r3, r3, #3
}
 800406c:	4618      	mov	r0, r3
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	b29b      	uxth	r3, r3
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b088      	sub	sp, #32
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	4608      	mov	r0, r1
 80040a6:	4611      	mov	r1, r2
 80040a8:	461a      	mov	r2, r3
 80040aa:	4603      	mov	r3, r0
 80040ac:	70fb      	strb	r3, [r7, #3]
 80040ae:	460b      	mov	r3, r1
 80040b0:	70bb      	strb	r3, [r7, #2]
 80040b2:	4613      	mov	r3, r2
 80040b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80040be:	78fb      	ldrb	r3, [r7, #3]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ca:	461a      	mov	r2, r3
 80040cc:	f04f 33ff 	mov.w	r3, #4294967295
 80040d0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80040d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d87e      	bhi.n	80041d8 <USB_HC_Init+0x13c>
 80040da:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <USB_HC_Init+0x44>)
 80040dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e0:	080040f1 	.word	0x080040f1
 80040e4:	0800419b 	.word	0x0800419b
 80040e8:	080040f1 	.word	0x080040f1
 80040ec:	0800415d 	.word	0x0800415d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040fc:	461a      	mov	r2, r3
 80040fe:	f240 439d 	movw	r3, #1181	; 0x49d
 8004102:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004104:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004108:	2b00      	cmp	r3, #0
 800410a:	da10      	bge.n	800412e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	4413      	add	r3, r2
 8004114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	78fa      	ldrb	r2, [r7, #3]
 800411c:	0151      	lsls	r1, r2, #5
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	440a      	add	r2, r1
 8004122:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800412a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800412c:	e057      	b.n	80041de <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004136:	2b00      	cmp	r3, #0
 8004138:	d051      	beq.n	80041de <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800413a:	78fb      	ldrb	r3, [r7, #3]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	4413      	add	r3, r2
 8004142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	78fa      	ldrb	r2, [r7, #3]
 800414a:	0151      	lsls	r1, r2, #5
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	440a      	add	r2, r1
 8004150:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004154:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004158:	60d3      	str	r3, [r2, #12]
      break;
 800415a:	e040      	b.n	80041de <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	4413      	add	r3, r2
 8004164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004168:	461a      	mov	r2, r3
 800416a:	f240 639d 	movw	r3, #1693	; 0x69d
 800416e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004170:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004174:	2b00      	cmp	r3, #0
 8004176:	da34      	bge.n	80041e2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	4413      	add	r3, r2
 8004180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	78fa      	ldrb	r2, [r7, #3]
 8004188:	0151      	lsls	r1, r2, #5
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	440a      	add	r2, r1
 800418e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004196:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004198:	e023      	b.n	80041e2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800419a:	78fb      	ldrb	r3, [r7, #3]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a6:	461a      	mov	r2, r3
 80041a8:	f240 2325 	movw	r3, #549	; 0x225
 80041ac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80041ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	da17      	bge.n	80041e6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80041b6:	78fb      	ldrb	r3, [r7, #3]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	78fa      	ldrb	r2, [r7, #3]
 80041c6:	0151      	lsls	r1, r2, #5
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	440a      	add	r2, r1
 80041cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041d0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80041d4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80041d6:	e006      	b.n	80041e6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	77fb      	strb	r3, [r7, #31]
      break;
 80041dc:	e004      	b.n	80041e8 <USB_HC_Init+0x14c>
      break;
 80041de:	bf00      	nop
 80041e0:	e002      	b.n	80041e8 <USB_HC_Init+0x14c>
      break;
 80041e2:	bf00      	nop
 80041e4:	e000      	b.n	80041e8 <USB_HC_Init+0x14c>
      break;
 80041e6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	78fa      	ldrb	r2, [r7, #3]
 80041f8:	0151      	lsls	r1, r2, #5
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	440a      	add	r2, r1
 80041fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004202:	f043 0302 	orr.w	r3, r3, #2
 8004206:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800420e:	699a      	ldr	r2, [r3, #24]
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	2101      	movs	r1, #1
 8004218:	fa01 f303 	lsl.w	r3, r1, r3
 800421c:	6939      	ldr	r1, [r7, #16]
 800421e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004222:	4313      	orrs	r3, r2
 8004224:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004232:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004236:	2b00      	cmp	r3, #0
 8004238:	da03      	bge.n	8004242 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800423a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800423e:	61bb      	str	r3, [r7, #24]
 8004240:	e001      	b.n	8004246 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004242:	2300      	movs	r3, #0
 8004244:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7ff feff 	bl	800404a <USB_GetHostSpeed>
 800424c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800424e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004252:	2b02      	cmp	r3, #2
 8004254:	d106      	bne.n	8004264 <USB_HC_Init+0x1c8>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b02      	cmp	r3, #2
 800425a:	d003      	beq.n	8004264 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800425c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	e001      	b.n	8004268 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004268:	787b      	ldrb	r3, [r7, #1]
 800426a:	059b      	lsls	r3, r3, #22
 800426c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004270:	78bb      	ldrb	r3, [r7, #2]
 8004272:	02db      	lsls	r3, r3, #11
 8004274:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004278:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800427a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800427e:	049b      	lsls	r3, r3, #18
 8004280:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004284:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004286:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004288:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800428c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	0159      	lsls	r1, r3, #5
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	440b      	add	r3, r1
 800429a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80042a4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80042a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d003      	beq.n	80042b6 <USB_HC_Init+0x21a>
 80042ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d10f      	bne.n	80042d6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80042b6:	78fb      	ldrb	r3, [r7, #3]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	78fa      	ldrb	r2, [r7, #3]
 80042c6:	0151      	lsls	r1, r2, #5
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	440a      	add	r2, r1
 80042cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042d4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80042d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3720      	adds	r7, #32
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08c      	sub	sp, #48	; 0x30
 80042e4:	af02      	add	r7, sp, #8
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	4613      	mov	r3, r2
 80042ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	785b      	ldrb	r3, [r3, #1]
 80042f6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80042f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042fc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004306:	2b00      	cmp	r3, #0
 8004308:	d02d      	beq.n	8004366 <USB_HC_StartXfer+0x86>
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	791b      	ldrb	r3, [r3, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d129      	bne.n	8004366 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d117      	bne.n	8004348 <USB_HC_StartXfer+0x68>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	79db      	ldrb	r3, [r3, #7]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <USB_HC_StartXfer+0x48>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	79db      	ldrb	r3, [r3, #7]
 8004324:	2b02      	cmp	r3, #2
 8004326:	d10f      	bne.n	8004348 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	4413      	add	r3, r2
 8004330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	0151      	lsls	r1, r2, #5
 800433a:	6a3a      	ldr	r2, [r7, #32]
 800433c:	440a      	add	r2, r1
 800433e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004346:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10b      	bne.n	8004366 <USB_HC_StartXfer+0x86>
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	795b      	ldrb	r3, [r3, #5]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d107      	bne.n	8004366 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	785b      	ldrb	r3, [r3, #1]
 800435a:	4619      	mov	r1, r3
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 fa0f 	bl	8004780 <USB_DoPing>
      return HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	e0f8      	b.n	8004558 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d018      	beq.n	80043a0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	8912      	ldrh	r2, [r2, #8]
 8004376:	4413      	add	r3, r2
 8004378:	3b01      	subs	r3, #1
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	8912      	ldrh	r2, [r2, #8]
 800437e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004382:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004384:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004386:	8b7b      	ldrh	r3, [r7, #26]
 8004388:	429a      	cmp	r2, r3
 800438a:	d90b      	bls.n	80043a4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800438c:	8b7b      	ldrh	r3, [r7, #26]
 800438e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004390:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	8912      	ldrh	r2, [r2, #8]
 8004396:	fb03 f202 	mul.w	r2, r3, r2
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	611a      	str	r2, [r3, #16]
 800439e:	e001      	b.n	80043a4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80043a0:	2301      	movs	r3, #1
 80043a2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	78db      	ldrb	r3, [r3, #3]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d007      	beq.n	80043bc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80043ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	8912      	ldrh	r2, [r2, #8]
 80043b2:	fb03 f202 	mul.w	r2, r3, r2
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	611a      	str	r2, [r3, #16]
 80043ba:	e003      	b.n	80043c4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	695a      	ldr	r2, [r3, #20]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80043cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043ce:	04d9      	lsls	r1, r3, #19
 80043d0:	4b63      	ldr	r3, [pc, #396]	; (8004560 <USB_HC_StartXfer+0x280>)
 80043d2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80043d4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	7a9b      	ldrb	r3, [r3, #10]
 80043da:	075b      	lsls	r3, r3, #29
 80043dc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80043e0:	69f9      	ldr	r1, [r7, #28]
 80043e2:	0148      	lsls	r0, r1, #5
 80043e4:	6a39      	ldr	r1, [r7, #32]
 80043e6:	4401      	add	r1, r0
 80043e8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80043ec:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80043ee:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80043f0:	79fb      	ldrb	r3, [r7, #7]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	68d9      	ldr	r1, [r3, #12]
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	4413      	add	r3, r2
 8004402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004406:	460a      	mov	r2, r1
 8004408:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	bf0c      	ite	eq
 800441a:	2301      	moveq	r3, #1
 800441c:	2300      	movne	r3, #0
 800441e:	b2db      	uxtb	r3, r3
 8004420:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	4413      	add	r3, r2
 800442a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	0151      	lsls	r1, r2, #5
 8004434:	6a3a      	ldr	r2, [r7, #32]
 8004436:	440a      	add	r2, r1
 8004438:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800443c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004440:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	4413      	add	r3, r2
 800444a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	7e7b      	ldrb	r3, [r7, #25]
 8004452:	075b      	lsls	r3, r3, #29
 8004454:	69f9      	ldr	r1, [r7, #28]
 8004456:	0148      	lsls	r0, r1, #5
 8004458:	6a39      	ldr	r1, [r7, #32]
 800445a:	4401      	add	r1, r0
 800445c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004460:	4313      	orrs	r3, r2
 8004462:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	4413      	add	r3, r2
 800446c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800447a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	78db      	ldrb	r3, [r3, #3]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d004      	beq.n	800448e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	e003      	b.n	8004496 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004494:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800449c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044aa:	461a      	mov	r2, r3
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e04e      	b.n	8004558 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	78db      	ldrb	r3, [r3, #3]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d149      	bne.n	8004556 <USB_HC_StartXfer+0x276>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d045      	beq.n	8004556 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	79db      	ldrb	r3, [r3, #7]
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d830      	bhi.n	8004534 <USB_HC_StartXfer+0x254>
 80044d2:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <USB_HC_StartXfer+0x1f8>)
 80044d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d8:	080044e9 	.word	0x080044e9
 80044dc:	0800450d 	.word	0x0800450d
 80044e0:	080044e9 	.word	0x080044e9
 80044e4:	0800450d 	.word	0x0800450d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	3303      	adds	r3, #3
 80044ee:	089b      	lsrs	r3, r3, #2
 80044f0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80044f2:	8afa      	ldrh	r2, [r7, #22]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d91c      	bls.n	8004538 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	f043 0220 	orr.w	r2, r3, #32
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	619a      	str	r2, [r3, #24]
        }
        break;
 800450a:	e015      	b.n	8004538 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	3303      	adds	r3, #3
 8004512:	089b      	lsrs	r3, r3, #2
 8004514:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004516:	8afa      	ldrh	r2, [r7, #22]
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	b29b      	uxth	r3, r3
 8004522:	429a      	cmp	r2, r3
 8004524:	d90a      	bls.n	800453c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	619a      	str	r2, [r3, #24]
        }
        break;
 8004532:	e003      	b.n	800453c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004534:	bf00      	nop
 8004536:	e002      	b.n	800453e <USB_HC_StartXfer+0x25e>
        break;
 8004538:	bf00      	nop
 800453a:	e000      	b.n	800453e <USB_HC_StartXfer+0x25e>
        break;
 800453c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	68d9      	ldr	r1, [r3, #12]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	785a      	ldrb	r2, [r3, #1]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	b29b      	uxth	r3, r3
 800454c:	2000      	movs	r0, #0
 800454e:	9000      	str	r0, [sp, #0]
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f7ff fb31 	bl	8003bb8 <USB_WritePacket>
  }

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3728      	adds	r7, #40	; 0x28
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	1ff80000 	.word	0x1ff80000

08004564 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	b29b      	uxth	r3, r3
}
 800457a:	4618      	mov	r0, r3
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004586:	b480      	push	{r7}
 8004588:	b089      	sub	sp, #36	; 0x24
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	460b      	mov	r3, r1
 8004590:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	0c9b      	lsrs	r3, r3, #18
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	0fdb      	lsrs	r3, r3, #31
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	d104      	bne.n	80045e0 <USB_HC_Halt+0x5a>
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	e0c8      	b.n	8004772 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <USB_HC_Halt+0x66>
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d163      	bne.n	80046b4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	0151      	lsls	r1, r2, #5
 80045fe:	69fa      	ldr	r2, [r7, #28]
 8004600:	440a      	add	r2, r1
 8004602:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004606:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800460a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 0320 	and.w	r3, r3, #32
 8004614:	2b00      	cmp	r3, #0
 8004616:	f040 80ab 	bne.w	8004770 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d133      	bne.n	800468e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	4413      	add	r3, r2
 800462e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	0151      	lsls	r1, r2, #5
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	440a      	add	r2, r1
 800463c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004640:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004644:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	4413      	add	r3, r2
 800464e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	0151      	lsls	r1, r2, #5
 8004658:	69fa      	ldr	r2, [r7, #28]
 800465a:	440a      	add	r2, r1
 800465c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004660:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004664:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3301      	adds	r3, #1
 800466a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004672:	d81d      	bhi.n	80046b0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	4413      	add	r3, r2
 800467c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004686:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800468a:	d0ec      	beq.n	8004666 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800468c:	e070      	b.n	8004770 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	4413      	add	r3, r2
 8004696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	0151      	lsls	r1, r2, #5
 80046a0:	69fa      	ldr	r2, [r7, #28]
 80046a2:	440a      	add	r2, r1
 80046a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046ac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80046ae:	e05f      	b.n	8004770 <USB_HC_Halt+0x1ea>
            break;
 80046b0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80046b2:	e05d      	b.n	8004770 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	0151      	lsls	r1, r2, #5
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	440a      	add	r2, r1
 80046ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046d2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d133      	bne.n	800474c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	0151      	lsls	r1, r2, #5
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	440a      	add	r2, r1
 80046fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004702:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	4413      	add	r3, r2
 800470c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	0151      	lsls	r1, r2, #5
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	440a      	add	r2, r1
 800471a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800471e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004722:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	3301      	adds	r3, #1
 8004728:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004730:	d81d      	bhi.n	800476e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	4413      	add	r3, r2
 800473a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004748:	d0ec      	beq.n	8004724 <USB_HC_Halt+0x19e>
 800474a:	e011      	b.n	8004770 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	4413      	add	r3, r2
 8004754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	0151      	lsls	r1, r2, #5
 800475e:	69fa      	ldr	r2, [r7, #28]
 8004760:	440a      	add	r2, r1
 8004762:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004766:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	e000      	b.n	8004770 <USB_HC_Halt+0x1ea>
          break;
 800476e:	bf00      	nop
    }
  }

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3724      	adds	r7, #36	; 0x24
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
	...

08004780 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004790:	78fb      	ldrb	r3, [r7, #3]
 8004792:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004794:	2301      	movs	r3, #1
 8004796:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	04da      	lsls	r2, r3, #19
 800479c:	4b15      	ldr	r3, [pc, #84]	; (80047f4 <USB_DoPing+0x74>)
 800479e:	4013      	ands	r3, r2
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	0151      	lsls	r1, r2, #5
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	440a      	add	r2, r1
 80047a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047b0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047c8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047d0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047de:	461a      	mov	r2, r3
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	1ff80000 	.word	0x1ff80000

080047f8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b088      	sub	sp, #32
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004800:	2300      	movs	r3, #0
 8004802:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff f911 	bl	8003a34 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004812:	2110      	movs	r1, #16
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7ff f96b 	bl	8003af0 <USB_FlushTxFifo>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff f997 	bl	8003b58 <USB_FlushRxFifo>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004834:	2300      	movs	r3, #0
 8004836:	61bb      	str	r3, [r7, #24]
 8004838:	e01f      	b.n	800487a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	4413      	add	r3, r2
 8004842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004850:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004858:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004860:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	4413      	add	r3, r2
 800486a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486e:	461a      	mov	r2, r3
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	3301      	adds	r3, #1
 8004878:	61bb      	str	r3, [r7, #24]
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	2b0f      	cmp	r3, #15
 800487e:	d9dc      	bls.n	800483a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004880:	2300      	movs	r3, #0
 8004882:	61bb      	str	r3, [r7, #24]
 8004884:	e034      	b.n	80048f0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	4413      	add	r3, r2
 800488e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800489c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048ac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ba:	461a      	mov	r2, r3
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3301      	adds	r3, #1
 80048c4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048cc:	d80c      	bhi.n	80048e8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048e4:	d0ec      	beq.n	80048c0 <USB_StopHost+0xc8>
 80048e6:	e000      	b.n	80048ea <USB_StopHost+0xf2>
        break;
 80048e8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	3301      	adds	r3, #1
 80048ee:	61bb      	str	r3, [r7, #24]
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b0f      	cmp	r3, #15
 80048f4:	d9c7      	bls.n	8004886 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048fc:	461a      	mov	r2, r3
 80048fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004902:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f04f 32ff 	mov.w	r2, #4294967295
 800490a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7ff f880 	bl	8003a12 <USB_EnableGlobalInt>

  return ret;
 8004912:	7ffb      	ldrb	r3, [r7, #31]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3720      	adds	r7, #32
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800491c:	b590      	push	{r4, r7, lr}
 800491e:	b08b      	sub	sp, #44	; 0x2c
 8004920:	af04      	add	r7, sp, #16
 8004922:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800492e:	7919      	ldrb	r1, [r3, #4]
 8004930:	23ff      	movs	r3, #255	; 0xff
 8004932:	2201      	movs	r2, #1
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 ff1f 	bl	8005778 <USBH_FindInterface>
 800493a:	4603      	mov	r3, r0
 800493c:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800493e:	7dbb      	ldrb	r3, [r7, #22]
 8004940:	2bff      	cmp	r3, #255	; 0xff
 8004942:	d002      	beq.n	800494a <USBH_HID_InterfaceInit+0x2e>
 8004944:	7dbb      	ldrb	r3, [r7, #22]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d901      	bls.n	800494e <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800494a:	2302      	movs	r3, #2
 800494c:	e108      	b.n	8004b60 <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 800494e:	7dbb      	ldrb	r3, [r7, #22]
 8004950:	4619      	mov	r1, r3
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fef4 	bl	8005740 <USBH_SelectInterface>
 8004958:	4603      	mov	r3, r0
 800495a:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 800495c:	7d7b      	ldrb	r3, [r7, #21]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 8004962:	2302      	movs	r3, #2
 8004964:	e0fc      	b.n	8004b60 <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800496c:	2034      	movs	r0, #52	; 0x34
 800496e:	f002 fd33 	bl	80073d8 <malloc>
 8004972:	4603      	mov	r3, r0
 8004974:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 8004986:	2302      	movs	r3, #2
 8004988:	e0ea      	b.n	8004b60 <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 800498a:	2234      	movs	r2, #52	; 0x34
 800498c:	2100      	movs	r1, #0
 800498e:	6938      	ldr	r0, [r7, #16]
 8004990:	f002 fef5 	bl	800777e <memset>

  HID_Handle->state = HID_ERROR;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	2207      	movs	r2, #7
 8004998:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800499a:	7dbb      	ldrb	r3, [r7, #22]
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	211a      	movs	r1, #26
 80049a0:	fb01 f303 	mul.w	r3, r1, r3
 80049a4:	4413      	add	r3, r2
 80049a6:	f203 3349 	addw	r3, r3, #841	; 0x349
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d103      	bne.n	80049b8 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	4a6d      	ldr	r2, [pc, #436]	; (8004b68 <USBH_HID_InterfaceInit+0x24c>)
 80049b4:	631a      	str	r2, [r3, #48]	; 0x30
 80049b6:	e010      	b.n	80049da <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 80049b8:	7dbb      	ldrb	r3, [r7, #22]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	211a      	movs	r1, #26
 80049be:	fb01 f303 	mul.w	r3, r1, r3
 80049c2:	4413      	add	r3, r2
 80049c4:	f203 3349 	addw	r3, r3, #841	; 0x349
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d103      	bne.n	80049d6 <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	4a66      	ldr	r2, [pc, #408]	; (8004b6c <USBH_HID_InterfaceInit+0x250>)
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
 80049d4:	e001      	b.n	80049da <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 80049d6:	2302      	movs	r3, #2
 80049d8:	e0c2      	b.n	8004b60 <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	2200      	movs	r2, #0
 80049de:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	2200      	movs	r2, #0
 80049e4:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80049e6:	7dbb      	ldrb	r3, [r7, #22]
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	211a      	movs	r1, #26
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	4413      	add	r3, r2
 80049f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80049f6:	781a      	ldrb	r2, [r3, #0]
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80049fc:	7dbb      	ldrb	r3, [r7, #22]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	211a      	movs	r1, #26
 8004a02:	fb01 f303 	mul.w	r3, r1, r3
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004a0c:	881a      	ldrh	r2, [r3, #0]
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8004a12:	7dbb      	ldrb	r3, [r7, #22]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	211a      	movs	r1, #26
 8004a18:	fb01 f303 	mul.w	r3, r1, r3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	8b9b      	ldrh	r3, [r3, #28]
 8004a2e:	2b09      	cmp	r3, #9
 8004a30:	d802      	bhi.n	8004a38 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	220a      	movs	r2, #10
 8004a36:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8004a38:	7dbb      	ldrb	r3, [r7, #22]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	211a      	movs	r1, #26
 8004a3e:	fb01 f303 	mul.w	r3, r1, r3
 8004a42:	4413      	add	r3, r2
 8004a44:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	bf28      	it	cs
 8004a4e:	2302      	movcs	r3, #2
 8004a50:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8004a52:	2300      	movs	r3, #0
 8004a54:	75fb      	strb	r3, [r7, #23]
 8004a56:	e07d      	b.n	8004b54 <USBH_HID_InterfaceInit+0x238>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 8004a58:	7dbb      	ldrb	r3, [r7, #22]
 8004a5a:	7df9      	ldrb	r1, [r7, #23]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	3101      	adds	r1, #1
 8004a60:	00c9      	lsls	r1, r1, #3
 8004a62:	201a      	movs	r0, #26
 8004a64:	fb00 f303 	mul.w	r3, r0, r3
 8004a68:	440b      	add	r3, r1
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	b25b      	sxtb	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	da35      	bge.n	8004ae4 <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8004a78:	7dbb      	ldrb	r3, [r7, #22]
 8004a7a:	7df9      	ldrb	r1, [r7, #23]
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	3101      	adds	r1, #1
 8004a80:	00c9      	lsls	r1, r1, #3
 8004a82:	201a      	movs	r0, #26
 8004a84:	fb00 f303 	mul.w	r3, r0, r3
 8004a88:	440b      	add	r3, r1
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004a90:	781a      	ldrb	r2, [r3, #0]
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	791b      	ldrb	r3, [r3, #4]
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f002 f964 	bl	8006d6a <USBH_AllocPipe>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	7859      	ldrb	r1, [r3, #1]
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	7918      	ldrb	r0, [r3, #4]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	8b12      	ldrh	r2, [r2, #24]
 8004ac2:	9202      	str	r2, [sp, #8]
 8004ac4:	2203      	movs	r2, #3
 8004ac6:	9201      	str	r2, [sp, #4]
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	4623      	mov	r3, r4
 8004acc:	4602      	mov	r2, r0
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f002 f91c 	bl	8006d0c <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	785b      	ldrb	r3, [r3, #1]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	4619      	mov	r1, r3
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f002 fc14 	bl	800730a <USBH_LL_SetToggle>
 8004ae2:	e034      	b.n	8004b4e <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8004ae4:	7dbb      	ldrb	r3, [r7, #22]
 8004ae6:	7df9      	ldrb	r1, [r7, #23]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	3101      	adds	r1, #1
 8004aec:	00c9      	lsls	r1, r1, #3
 8004aee:	201a      	movs	r0, #26
 8004af0:	fb00 f303 	mul.w	r3, r0, r3
 8004af4:	440b      	add	r3, r1
 8004af6:	4413      	add	r3, r2
 8004af8:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004afc:	781a      	ldrb	r2, [r3, #0]
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	78db      	ldrb	r3, [r3, #3]
 8004b06:	4619      	mov	r1, r3
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f002 f92e 	bl	8006d6a <USBH_AllocPipe>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	461a      	mov	r2, r3
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	7819      	ldrb	r1, [r3, #0]
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	78d8      	ldrb	r0, [r3, #3]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	8b12      	ldrh	r2, [r2, #24]
 8004b2e:	9202      	str	r2, [sp, #8]
 8004b30:	2203      	movs	r2, #3
 8004b32:	9201      	str	r2, [sp, #4]
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	4623      	mov	r3, r4
 8004b38:	4602      	mov	r2, r0
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f002 f8e6 	bl	8006d0c <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2200      	movs	r2, #0
 8004b46:	4619      	mov	r1, r3
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f002 fbde 	bl	800730a <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8004b4e:	7dfb      	ldrb	r3, [r7, #23]
 8004b50:	3301      	adds	r3, #1
 8004b52:	75fb      	strb	r3, [r7, #23]
 8004b54:	7dfa      	ldrb	r2, [r7, #23]
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	f4ff af7d 	bcc.w	8004a58 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	371c      	adds	r7, #28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd90      	pop	{r4, r7, pc}
 8004b68:	08005219 	.word	0x08005219
 8004b6c:	08005409 	.word	0x08005409

08004b70 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	785b      	ldrb	r3, [r3, #1]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00e      	beq.n	8004ba8 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	785b      	ldrb	r3, [r3, #1]
 8004b8e:	4619      	mov	r1, r3
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f002 f8da 	bl	8006d4a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	785b      	ldrb	r3, [r3, #1]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f002 f905 	bl	8006dac <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00e      	beq.n	8004bce <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f002 f8c7 	bl	8006d4a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f002 f8f2 	bl	8006dac <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00b      	beq.n	8004bf2 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f002 fc00 	bl	80073e8 <free>
    phost->pActiveClass->pData = 0U;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004bee:	2200      	movs	r2, #0
 8004bf0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	795b      	ldrb	r3, [r3, #5]
 8004c1a:	2b05      	cmp	r3, #5
 8004c1c:	d860      	bhi.n	8004ce0 <USBH_HID_ClassRequest+0xe4>
 8004c1e:	a201      	add	r2, pc, #4	; (adr r2, 8004c24 <USBH_HID_ClassRequest+0x28>)
 8004c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c24:	08004c3d 	.word	0x08004c3d
 8004c28:	08004ce1 	.word	0x08004ce1
 8004c2c:	08004c57 	.word	0x08004c57
 8004c30:	08004c3d 	.word	0x08004c3d
 8004c34:	08004c81 	.word	0x08004c81
 8004c38:	08004cab 	.word	0x08004cab
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	331c      	adds	r3, #28
 8004c46:	4619      	mov	r1, r3
 8004c48:	4610      	mov	r0, r2
 8004c4a:	f000 f9cd 	bl	8004fe8 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2202      	movs	r2, #2
 8004c52:	715a      	strb	r2, [r3, #5]

      break;
 8004c54:	e04b      	b.n	8004cee <USBH_HID_ClassRequest+0xf2>
    case HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f930 	bl	8004ec2 <USBH_HID_GetHIDReportDescriptor>
 8004c62:	4603      	mov	r3, r0
 8004c64:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8004c66:	7bbb      	ldrb	r3, [r7, #14]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d103      	bne.n	8004c74 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2204      	movs	r2, #4
 8004c70:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 8004c72:	e037      	b.n	8004ce4 <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8004c74:	7bbb      	ldrb	r3, [r7, #14]
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d134      	bne.n	8004ce4 <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c7e:	e031      	b.n	8004ce4 <USBH_HID_ClassRequest+0xe8>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8004c80:	2200      	movs	r2, #0
 8004c82:	2100      	movs	r1, #0
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f935 	bl	8004ef4 <USBH_HID_SetIdle>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 8004c8e:	7bbb      	ldrb	r3, [r7, #14]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d103      	bne.n	8004c9c <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2205      	movs	r2, #5
 8004c98:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 8004c9a:	e025      	b.n	8004ce8 <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8004c9c:	7bbb      	ldrb	r3, [r7, #14]
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d122      	bne.n	8004ce8 <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2205      	movs	r2, #5
 8004ca6:	715a      	strb	r2, [r3, #5]
      break;
 8004ca8:	e01e      	b.n	8004ce8 <USBH_HID_ClassRequest+0xec>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 8004caa:	2100      	movs	r1, #0
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f975 	bl	8004f9c <USBH_HID_SetProtocol>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8004cb6:	7bbb      	ldrb	r3, [r7, #14]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10b      	bne.n	8004cd4 <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004cc8:	2102      	movs	r1, #2
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	4798      	blx	r3
        status = USBH_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 8004cd2:	e00b      	b.n	8004cec <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8004cd4:	7bbb      	ldrb	r3, [r7, #14]
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d108      	bne.n	8004cec <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 8004cda:	2302      	movs	r3, #2
 8004cdc:	73fb      	strb	r3, [r7, #15]
      break;
 8004cde:	e005      	b.n	8004cec <USBH_HID_ClassRequest+0xf0>

    case HID_REQ_IDLE:
    default:
      break;
 8004ce0:	bf00      	nop
 8004ce2:	e004      	b.n	8004cee <USBH_HID_ClassRequest+0xf2>
      break;
 8004ce4:	bf00      	nop
 8004ce6:	e002      	b.n	8004cee <USBH_HID_ClassRequest+0xf2>
      break;
 8004ce8:	bf00      	nop
 8004cea:	e000      	b.n	8004cee <USBH_HID_ClassRequest+0xf2>
      break;
 8004cec:	bf00      	nop
  }

  return status;
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af02      	add	r7, sp, #8
 8004cfe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8004d00:	2300      	movs	r3, #0
 8004d02:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	789b      	ldrb	r3, [r3, #2]
 8004d12:	2b06      	cmp	r3, #6
 8004d14:	f200 80a9 	bhi.w	8004e6a <USBH_HID_Process+0x172>
 8004d18:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <USBH_HID_Process+0x28>)
 8004d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1e:	bf00      	nop
 8004d20:	08004d3d 	.word	0x08004d3d
 8004d24:	08004d4d 	.word	0x08004d4d
 8004d28:	08004e6b 	.word	0x08004e6b
 8004d2c:	08004e6b 	.word	0x08004e6b
 8004d30:	08004dbd 	.word	0x08004dbd
 8004d34:	08004da7 	.word	0x08004da7
 8004d38:	08004deb 	.word	0x08004deb
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	2201      	movs	r2, #1
 8004d48:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8004d4a:	e093      	b.n	8004e74 <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	695a      	ldr	r2, [r3, #20]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	8b1b      	ldrh	r3, [r3, #24]
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f8f0 	bl	8004f44 <USBH_HID_GetReport>
 8004d64:	4603      	mov	r3, r0
 8004d66:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8004d68:	7dfb      	ldrb	r3, [r7, #23]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d103      	bne.n	8004d76 <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	2205      	movs	r2, #5
 8004d72:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8004d74:	e07e      	b.n	8004e74 <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 8004d76:	7dfb      	ldrb	r3, [r7, #23]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d105      	bne.n	8004d88 <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	75fb      	strb	r3, [r7, #23]
      break;
 8004d86:	e075      	b.n	8004e74 <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 8004d88:	7dfb      	ldrb	r3, [r7, #23]
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d105      	bne.n	8004d9a <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	2205      	movs	r2, #5
 8004d92:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	75fb      	strb	r3, [r7, #23]
      break;
 8004d98:	e06c      	b.n	8004e74 <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	2207      	movs	r2, #7
 8004d9e:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8004da0:	2302      	movs	r3, #2
 8004da2:	75fb      	strb	r3, [r7, #23]
      break;
 8004da4:	e066      	b.n	8004e74 <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d05c      	beq.n	8004e6e <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	2204      	movs	r2, #4
 8004db8:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8004dba:	e058      	b.n	8004e6e <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	785b      	ldrb	r3, [r3, #1]
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f001 ff7f 	bl	8006cce <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	2206      	movs	r2, #6
 8004dd4:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 8004de8:	e044      	b.n	8004e74 <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	785b      	ldrb	r3, [r3, #1]
 8004dee:	4619      	mov	r1, r3
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f002 fa69 	bl	80072c8 <USBH_LL_GetURBState>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d120      	bne.n	8004e3e <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	785b      	ldrb	r3, [r3, #1]
 8004e00:	4619      	mov	r1, r3
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f002 f9ce 	bl	80071a4 <USBH_LL_GetLastXferSize>
 8004e08:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d12e      	bne.n	8004e72 <USBH_HID_Process+0x17a>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d02b      	beq.n	8004e72 <USBH_HID_Process+0x17a>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f103 0008 	add.w	r0, r3, #8
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	6959      	ldr	r1, [r3, #20]
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	8b1b      	ldrh	r3, [r3, #24]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	f000 f9a0 	bl	800516e <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7fb fc48 	bl	80006cc <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 8004e3c:	e019      	b.n	8004e72 <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	785b      	ldrb	r3, [r3, #1]
 8004e42:	4619      	mov	r1, r3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f002 fa3f 	bl	80072c8 <USBH_LL_GetURBState>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b05      	cmp	r3, #5
 8004e4e:	d110      	bne.n	8004e72 <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	7e9b      	ldrb	r3, [r3, #26]
 8004e54:	4619      	mov	r1, r3
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f001 fa5b 	bl	8006312 <USBH_ClrFeature>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d107      	bne.n	8004e72 <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	2204      	movs	r2, #4
 8004e66:	709a      	strb	r2, [r3, #2]
      break;
 8004e68:	e003      	b.n	8004e72 <USBH_HID_Process+0x17a>

    default:
      break;
 8004e6a:	bf00      	nop
 8004e6c:	e002      	b.n	8004e74 <USBH_HID_Process+0x17c>
      break;
 8004e6e:	bf00      	nop
 8004e70:	e000      	b.n	8004e74 <USBH_HID_Process+0x17c>
      break;
 8004e72:	bf00      	nop
  }

  return status;
 8004e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop

08004e80 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	789b      	ldrb	r3, [r3, #2]
 8004e96:	2b06      	cmp	r3, #6
 8004e98:	d10c      	bne.n	8004eb4 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	8b92      	ldrh	r2, [r2, #28]
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d302      	bcc.n	8004eb4 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2204      	movs	r2, #4
 8004eb2:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b086      	sub	sp, #24
 8004ec6:	af02      	add	r7, sp, #8
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8004ed4:	887b      	ldrh	r3, [r7, #2]
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8004ede:	2101      	movs	r1, #1
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f001 f976 	bl	80061d2 <USBH_GetDescriptor>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	70fb      	strb	r3, [r7, #3]
 8004f00:	4613      	mov	r3, r2
 8004f02:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2221      	movs	r2, #33	; 0x21
 8004f08:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	220a      	movs	r2, #10
 8004f0e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	021b      	lsls	r3, r3, #8
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	78bb      	ldrb	r3, [r7, #2]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8004f30:	2200      	movs	r2, #0
 8004f32:	2100      	movs	r1, #0
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f001 fcbb 	bl	80068b0 <USBH_CtlReq>
 8004f3a:	4603      	mov	r3, r0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	607b      	str	r3, [r7, #4]
 8004f4e:	460b      	mov	r3, r1
 8004f50:	72fb      	strb	r3, [r7, #11]
 8004f52:	4613      	mov	r3, r2
 8004f54:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	22a1      	movs	r2, #161	; 0xa1
 8004f5a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 8004f62:	7afb      	ldrb	r3, [r7, #11]
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	021b      	lsls	r3, r3, #8
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	7abb      	ldrb	r3, [r7, #10]
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8004f7c:	7e3b      	ldrb	r3, [r7, #24]
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8004f84:	7e3b      	ldrb	r3, [r7, #24]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	461a      	mov	r2, r3
 8004f8a:	6879      	ldr	r1, [r7, #4]
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f001 fc8f 	bl	80068b0 <USBH_CtlReq>
 8004f92:	4603      	mov	r3, r0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2221      	movs	r2, #33	; 0x21
 8004fac:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	220b      	movs	r2, #11
 8004fb2:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	825a      	strh	r2, [r3, #18]
 8004fc0:	e002      	b.n	8004fc8 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f001 fc69 	bl	80068b0 <USBH_CtlReq>
 8004fde:	4603      	mov	r3, r0

}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	3302      	adds	r3, #2
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	3303      	adds	r3, #3
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	b29b      	uxth	r3, r3
 8005006:	021b      	lsls	r3, r3, #8
 8005008:	b29b      	uxth	r3, r3
 800500a:	4313      	orrs	r3, r2
 800500c:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800500e:	897b      	ldrh	r3, [r7, #10]
 8005010:	2b09      	cmp	r3, #9
 8005012:	d943      	bls.n	800509c <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 8005014:	2309      	movs	r3, #9
 8005016:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 8005018:	e03c      	b.n	8005094 <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800501a:	f107 0308 	add.w	r3, r7, #8
 800501e:	4619      	mov	r1, r3
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f001 fc2a 	bl	800687a <USBH_GetNextDesc>
 8005026:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	785b      	ldrb	r3, [r3, #1]
 800502c:	2b21      	cmp	r3, #33	; 0x21
 800502e:	d131      	bne.n	8005094 <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	781a      	ldrb	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	785a      	ldrb	r2, [r3, #1]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	3302      	adds	r3, #2
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	b29a      	uxth	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	3303      	adds	r3, #3
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	021b      	lsls	r3, r3, #8
 8005052:	b29b      	uxth	r3, r3
 8005054:	4313      	orrs	r3, r2
 8005056:	b29a      	uxth	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	791a      	ldrb	r2, [r3, #4]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	795a      	ldrb	r2, [r3, #5]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	799a      	ldrb	r2, [r3, #6]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	3307      	adds	r3, #7
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	b29a      	uxth	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	3308      	adds	r3, #8
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	021b      	lsls	r3, r3, #8
 8005086:	b29b      	uxth	r3, r3
 8005088:	4313      	orrs	r3, r2
 800508a:	b29a      	uxth	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	811a      	strh	r2, [r3, #8]
        break;
 8005090:	bf00      	nop
      }
    }
  }
}
 8005092:	e003      	b.n	800509c <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 8005094:	893b      	ldrh	r3, [r7, #8]
 8005096:	897a      	ldrh	r2, [r7, #10]
 8005098:	429a      	cmp	r2, r3
 800509a:	d8be      	bhi.n	800501a <USBH_HID_ParseHIDDesc+0x32>
}
 800509c:	bf00      	nop
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	4613      	mov	r3, r2
 80050b0:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	729a      	strb	r2, [r3, #10]
  f->size = size;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	88fa      	ldrh	r2, [r7, #6]
 80050c8:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	601a      	str	r2, [r3, #0]
}
 80050d0:	bf00      	nop
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	4613      	mov	r3, r2
 80050e8:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	7a9b      	ldrb	r3, [r3, #10]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d131      	bne.n	800515a <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2201      	movs	r2, #1
 80050fa:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 80050fc:	2300      	movs	r3, #0
 80050fe:	82fb      	strh	r3, [r7, #22]
 8005100:	e027      	b.n	8005152 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	88da      	ldrh	r2, [r3, #6]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	889b      	ldrh	r3, [r3, #4]
 800510a:	429a      	cmp	r2, r3
 800510c:	d019      	beq.n	8005142 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	88d2      	ldrh	r2, [r2, #6]
 8005116:	441a      	add	r2, r3
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1c59      	adds	r1, r3, #1
 800511c:	6139      	str	r1, [r7, #16]
 800511e:	7812      	ldrb	r2, [r2, #0]
 8005120:	701a      	strb	r2, [r3, #0]
        f->tail++;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	88db      	ldrh	r3, [r3, #6]
 8005126:	3301      	adds	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	88da      	ldrh	r2, [r3, #6]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	891b      	ldrh	r3, [r3, #8]
 8005136:	429a      	cmp	r2, r3
 8005138:	d108      	bne.n	800514c <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	80da      	strh	r2, [r3, #6]
 8005140:	e004      	b.n	800514c <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	729a      	strb	r2, [r3, #10]
        return i;
 8005148:	8afb      	ldrh	r3, [r7, #22]
 800514a:	e00a      	b.n	8005162 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 800514c:	8afb      	ldrh	r3, [r7, #22]
 800514e:	3301      	adds	r3, #1
 8005150:	82fb      	strh	r3, [r7, #22]
 8005152:	8afa      	ldrh	r2, [r7, #22]
 8005154:	88fb      	ldrh	r3, [r7, #6]
 8005156:	429a      	cmp	r2, r3
 8005158:	d3d3      	bcc.n	8005102 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8005160:	88fb      	ldrh	r3, [r7, #6]
}
 8005162:	4618      	mov	r0, r3
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800516e:	b480      	push	{r7}
 8005170:	b087      	sub	sp, #28
 8005172:	af00      	add	r7, sp, #0
 8005174:	60f8      	str	r0, [r7, #12]
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	4613      	mov	r3, r2
 800517a:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	7a9b      	ldrb	r3, [r3, #10]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d13c      	bne.n	8005202 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2201      	movs	r2, #1
 800518c:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800518e:	2300      	movs	r3, #0
 8005190:	82fb      	strh	r3, [r7, #22]
 8005192:	e032      	b.n	80051fa <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	889b      	ldrh	r3, [r3, #4]
 8005198:	3301      	adds	r3, #1
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	88d2      	ldrh	r2, [r2, #6]
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00a      	beq.n	80051b8 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	889b      	ldrh	r3, [r3, #4]
 80051a6:	3301      	adds	r3, #1
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d108      	bne.n	80051c2 <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	88db      	ldrh	r3, [r3, #6]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d104      	bne.n	80051c2 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	729a      	strb	r2, [r3, #10]
        return i;
 80051be:	8afb      	ldrh	r3, [r7, #22]
 80051c0:	e023      	b.n	800520a <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1c5a      	adds	r2, r3, #1
 80051c6:	613a      	str	r2, [r7, #16]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	6812      	ldr	r2, [r2, #0]
 80051cc:	68f9      	ldr	r1, [r7, #12]
 80051ce:	8889      	ldrh	r1, [r1, #4]
 80051d0:	440a      	add	r2, r1
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	7013      	strb	r3, [r2, #0]
        f->head++;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	889b      	ldrh	r3, [r3, #4]
 80051da:	3301      	adds	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	889a      	ldrh	r2, [r3, #4]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	891b      	ldrh	r3, [r3, #8]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d102      	bne.n	80051f4 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 80051f4:	8afb      	ldrh	r3, [r7, #22]
 80051f6:	3301      	adds	r3, #1
 80051f8:	82fb      	strh	r3, [r7, #22]
 80051fa:	8afa      	ldrh	r2, [r7, #22]
 80051fc:	88fb      	ldrh	r3, [r7, #6]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d3c8      	bcc.n	8005194 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8005208:	88fb      	ldrh	r3, [r7, #6]
}
 800520a:	4618      	mov	r0, r3
 800520c:	371c      	adds	r7, #28
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
	...

08005218 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 800522a:	4b22      	ldr	r3, [pc, #136]	; (80052b4 <USBH_HID_KeybdInit+0x9c>)
 800522c:	2200      	movs	r2, #0
 800522e:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 8005230:	4b20      	ldr	r3, [pc, #128]	; (80052b4 <USBH_HID_KeybdInit+0x9c>)
 8005232:	2200      	movs	r2, #0
 8005234:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 8005236:	4b1f      	ldr	r3, [pc, #124]	; (80052b4 <USBH_HID_KeybdInit+0x9c>)
 8005238:	2200      	movs	r2, #0
 800523a:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 800523c:	4b1d      	ldr	r3, [pc, #116]	; (80052b4 <USBH_HID_KeybdInit+0x9c>)
 800523e:	2200      	movs	r2, #0
 8005240:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 8005242:	4b1c      	ldr	r3, [pc, #112]	; (80052b4 <USBH_HID_KeybdInit+0x9c>)
 8005244:	2200      	movs	r2, #0
 8005246:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 8005248:	4b1a      	ldr	r3, [pc, #104]	; (80052b4 <USBH_HID_KeybdInit+0x9c>)
 800524a:	2200      	movs	r2, #0
 800524c:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 800524e:	4b19      	ldr	r3, [pc, #100]	; (80052b4 <USBH_HID_KeybdInit+0x9c>)
 8005250:	2200      	movs	r2, #0
 8005252:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 8005254:	4b17      	ldr	r3, [pc, #92]	; (80052b4 <USBH_HID_KeybdInit+0x9c>)
 8005256:	2200      	movs	r2, #0
 8005258:	721a      	strb	r2, [r3, #8]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800525a:	2300      	movs	r3, #0
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	e00c      	b.n	800527a <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 8005260:	4a15      	ldr	r2, [pc, #84]	; (80052b8 <USBH_HID_KeybdInit+0xa0>)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2100      	movs	r1, #0
 8005266:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 800526a:	4a14      	ldr	r2, [pc, #80]	; (80052bc <USBH_HID_KeybdInit+0xa4>)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2100      	movs	r1, #0
 8005270:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3301      	adds	r3, #1
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d9ef      	bls.n	8005260 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	8b1b      	ldrh	r3, [r3, #24]
 8005284:	2b08      	cmp	r3, #8
 8005286:	d902      	bls.n	800528e <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2208      	movs	r2, #8
 800528c:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	4a0a      	ldr	r2, [pc, #40]	; (80052bc <USBH_HID_KeybdInit+0xa4>)
 8005292:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f103 0008 	add.w	r0, r3, #8
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80052a0:	2250      	movs	r2, #80	; 0x50
 80052a2:	4619      	mov	r1, r3
 80052a4:	f7ff fefe 	bl	80050a4 <USBH_HID_FifoInit>

  return USBH_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	20000104 	.word	0x20000104
 80052b8:	2000011c 	.word	0x2000011c
 80052bc:	20000114 	.word	0x20000114

080052c0 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f80d 	bl	80052e8 <USBH_HID_KeybdDecode>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 80052d4:	4b03      	ldr	r3, [pc, #12]	; (80052e4 <USBH_HID_GetKeybdInfo+0x24>)
 80052d6:	e000      	b.n	80052da <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 80052d8:	2300      	movs	r3, #0
  }
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	20000104 	.word	0x20000104

080052e8 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	60bb      	str	r3, [r7, #8]
  if (HID_Handle->length == 0U)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	8b1b      	ldrh	r3, [r3, #24]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 8005302:	2302      	movs	r3, #2
 8005304:	e066      	b.n	80053d4 <USBH_HID_KeybdDecode+0xec>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f103 0008 	add.w	r0, r3, #8
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	8b1b      	ldrh	r3, [r3, #24]
 8005310:	461a      	mov	r2, r3
 8005312:	4932      	ldr	r1, [pc, #200]	; (80053dc <USBH_HID_KeybdDecode+0xf4>)
 8005314:	f7ff fee2 	bl	80050dc <USBH_HID_FifoRead>
 8005318:	4603      	mov	r3, r0
 800531a:	461a      	mov	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	8b1b      	ldrh	r3, [r3, #24]
 8005320:	429a      	cmp	r2, r3
 8005322:	d156      	bne.n	80053d2 <USBH_HID_KeybdDecode+0xea>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 8005324:	2100      	movs	r1, #0
 8005326:	482e      	ldr	r0, [pc, #184]	; (80053e0 <USBH_HID_KeybdDecode+0xf8>)
 8005328:	f000 f8b8 	bl	800549c <HID_ReadItem>
 800532c:	4603      	mov	r3, r0
 800532e:	b2da      	uxtb	r2, r3
 8005330:	4b2c      	ldr	r3, [pc, #176]	; (80053e4 <USBH_HID_KeybdDecode+0xfc>)
 8005332:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 8005334:	2100      	movs	r1, #0
 8005336:	482c      	ldr	r0, [pc, #176]	; (80053e8 <USBH_HID_KeybdDecode+0x100>)
 8005338:	f000 f8b0 	bl	800549c <HID_ReadItem>
 800533c:	4603      	mov	r3, r0
 800533e:	b2da      	uxtb	r2, r3
 8005340:	4b28      	ldr	r3, [pc, #160]	; (80053e4 <USBH_HID_KeybdDecode+0xfc>)
 8005342:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 8005344:	2100      	movs	r1, #0
 8005346:	4829      	ldr	r0, [pc, #164]	; (80053ec <USBH_HID_KeybdDecode+0x104>)
 8005348:	f000 f8a8 	bl	800549c <HID_ReadItem>
 800534c:	4603      	mov	r3, r0
 800534e:	b2da      	uxtb	r2, r3
 8005350:	4b24      	ldr	r3, [pc, #144]	; (80053e4 <USBH_HID_KeybdDecode+0xfc>)
 8005352:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 8005354:	2100      	movs	r1, #0
 8005356:	4826      	ldr	r0, [pc, #152]	; (80053f0 <USBH_HID_KeybdDecode+0x108>)
 8005358:	f000 f8a0 	bl	800549c <HID_ReadItem>
 800535c:	4603      	mov	r3, r0
 800535e:	b2da      	uxtb	r2, r3
 8005360:	4b20      	ldr	r3, [pc, #128]	; (80053e4 <USBH_HID_KeybdDecode+0xfc>)
 8005362:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 8005364:	2100      	movs	r1, #0
 8005366:	4823      	ldr	r0, [pc, #140]	; (80053f4 <USBH_HID_KeybdDecode+0x10c>)
 8005368:	f000 f898 	bl	800549c <HID_ReadItem>
 800536c:	4603      	mov	r3, r0
 800536e:	b2da      	uxtb	r2, r3
 8005370:	4b1c      	ldr	r3, [pc, #112]	; (80053e4 <USBH_HID_KeybdDecode+0xfc>)
 8005372:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 8005374:	2100      	movs	r1, #0
 8005376:	4820      	ldr	r0, [pc, #128]	; (80053f8 <USBH_HID_KeybdDecode+0x110>)
 8005378:	f000 f890 	bl	800549c <HID_ReadItem>
 800537c:	4603      	mov	r3, r0
 800537e:	b2da      	uxtb	r2, r3
 8005380:	4b18      	ldr	r3, [pc, #96]	; (80053e4 <USBH_HID_KeybdDecode+0xfc>)
 8005382:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 8005384:	2100      	movs	r1, #0
 8005386:	481d      	ldr	r0, [pc, #116]	; (80053fc <USBH_HID_KeybdDecode+0x114>)
 8005388:	f000 f888 	bl	800549c <HID_ReadItem>
 800538c:	4603      	mov	r3, r0
 800538e:	b2da      	uxtb	r2, r3
 8005390:	4b14      	ldr	r3, [pc, #80]	; (80053e4 <USBH_HID_KeybdDecode+0xfc>)
 8005392:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 8005394:	2100      	movs	r1, #0
 8005396:	481a      	ldr	r0, [pc, #104]	; (8005400 <USBH_HID_KeybdDecode+0x118>)
 8005398:	f000 f880 	bl	800549c <HID_ReadItem>
 800539c:	4603      	mov	r3, r0
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	4b10      	ldr	r3, [pc, #64]	; (80053e4 <USBH_HID_KeybdDecode+0xfc>)
 80053a2:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 80053a4:	2300      	movs	r3, #0
 80053a6:	73fb      	strb	r3, [r7, #15]
 80053a8:	e00e      	b.n	80053c8 <USBH_HID_KeybdDecode+0xe0>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
 80053ac:	4619      	mov	r1, r3
 80053ae:	4815      	ldr	r0, [pc, #84]	; (8005404 <USBH_HID_KeybdDecode+0x11c>)
 80053b0:	f000 f874 	bl	800549c <HID_ReadItem>
 80053b4:	4602      	mov	r2, r0
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
 80053b8:	b2d1      	uxtb	r1, r2
 80053ba:	4a0a      	ldr	r2, [pc, #40]	; (80053e4 <USBH_HID_KeybdDecode+0xfc>)
 80053bc:	4413      	add	r3, r2
 80053be:	460a      	mov	r2, r1
 80053c0:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	3301      	adds	r3, #1
 80053c6:	73fb      	strb	r3, [r7, #15]
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	2b05      	cmp	r3, #5
 80053cc:	d9ed      	bls.n	80053aa <USBH_HID_KeybdDecode+0xc2>
    }

    return USBH_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	e000      	b.n	80053d4 <USBH_HID_KeybdDecode+0xec>
  }
  return   USBH_FAIL;
 80053d2:	2302      	movs	r3, #2
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	2000011c 	.word	0x2000011c
 80053e0:	080082a8 	.word	0x080082a8
 80053e4:	20000104 	.word	0x20000104
 80053e8:	080082c8 	.word	0x080082c8
 80053ec:	080082e8 	.word	0x080082e8
 80053f0:	08008308 	.word	0x08008308
 80053f4:	08008328 	.word	0x08008328
 80053f8:	08008348 	.word	0x08008348
 80053fc:	08008368 	.word	0x08008368
 8005400:	08008388 	.word	0x08008388
 8005404:	080083a8 	.word	0x080083a8

08005408 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 800541a:	4b1d      	ldr	r3, [pc, #116]	; (8005490 <USBH_HID_MouseInit+0x88>)
 800541c:	2200      	movs	r2, #0
 800541e:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 8005420:	4b1b      	ldr	r3, [pc, #108]	; (8005490 <USBH_HID_MouseInit+0x88>)
 8005422:	2200      	movs	r2, #0
 8005424:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 8005426:	4b1a      	ldr	r3, [pc, #104]	; (8005490 <USBH_HID_MouseInit+0x88>)
 8005428:	2200      	movs	r2, #0
 800542a:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 800542c:	4b18      	ldr	r3, [pc, #96]	; (8005490 <USBH_HID_MouseInit+0x88>)
 800542e:	2200      	movs	r2, #0
 8005430:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 8005432:	4b17      	ldr	r3, [pc, #92]	; (8005490 <USBH_HID_MouseInit+0x88>)
 8005434:	2200      	movs	r2, #0
 8005436:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8005438:	2300      	movs	r3, #0
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	e00c      	b.n	8005458 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 800543e:	4a15      	ldr	r2, [pc, #84]	; (8005494 <USBH_HID_MouseInit+0x8c>)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2100      	movs	r1, #0
 8005444:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 8005448:	4a13      	ldr	r2, [pc, #76]	; (8005498 <USBH_HID_MouseInit+0x90>)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2100      	movs	r1, #0
 800544e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3301      	adds	r3, #1
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d9ef      	bls.n	800543e <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	8b1b      	ldrh	r3, [r3, #24]
 8005462:	2b08      	cmp	r3, #8
 8005464:	d902      	bls.n	800546c <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2208      	movs	r2, #8
 800546a:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4a0a      	ldr	r2, [pc, #40]	; (8005498 <USBH_HID_MouseInit+0x90>)
 8005470:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f103 0008 	add.w	r0, r3, #8
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800547e:	2250      	movs	r2, #80	; 0x50
 8005480:	4619      	mov	r1, r3
 8005482:	f7ff fe0f 	bl	80050a4 <USBH_HID_FifoInit>

  return USBH_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	20000124 	.word	0x20000124
 8005494:	2000012c 	.word	0x2000012c
 8005498:	20000134 	.word	0x20000134

0800549c <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800549c:	b480      	push	{r7}
 800549e:	b089      	sub	sp, #36	; 0x24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	7a1b      	ldrb	r3, [r3, #8]
 80054ba:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	7a5b      	ldrb	r3, [r3, #9]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01a      	beq.n	80054fa <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	7a5b      	ldrb	r3, [r3, #9]
 80054c8:	78fa      	ldrb	r2, [r7, #3]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d301      	bcc.n	80054d2 <HID_ReadItem+0x36>
    {
      return (0U);
 80054ce:	2300      	movs	r3, #0
 80054d0:	e078      	b.n	80055c4 <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 80054d2:	78fb      	ldrb	r3, [r7, #3]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6852      	ldr	r2, [r2, #4]
 80054d8:	fb02 f303 	mul.w	r3, r2, r3
 80054dc:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 80054de:	7cfb      	ldrb	r3, [r7, #19]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	08db      	lsrs	r3, r3, #3
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	4413      	add	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 80054fa:	2300      	movs	r3, #0
 80054fc:	61bb      	str	r3, [r7, #24]
 80054fe:	e00a      	b.n	8005516 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	461a      	mov	r2, r3
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	3301      	adds	r3, #1
 8005514:	61bb      	str	r3, [r7, #24]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	2b00      	cmp	r3, #0
 8005520:	d004      	beq.n	800552c <HID_ReadItem+0x90>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	08db      	lsrs	r3, r3, #3
 8005528:	3301      	adds	r3, #1
 800552a:	e002      	b.n	8005532 <HID_ReadItem+0x96>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	08db      	lsrs	r3, r3, #3
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	4293      	cmp	r3, r2
 8005536:	d8e3      	bhi.n	8005500 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 8005538:	7cfb      	ldrb	r3, [r7, #19]
 800553a:	69fa      	ldr	r2, [r7, #28]
 800553c:	40da      	lsrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f04f 31ff 	mov.w	r1, #4294967295
 8005546:	fa01 f303 	lsl.w	r3, r1, r3
 800554a:	43db      	mvns	r3, r3
 800554c:	4013      	ands	r3, r2
 800554e:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	69fa      	ldr	r2, [r7, #28]
 8005556:	429a      	cmp	r2, r3
 8005558:	d304      	bcc.n	8005564 <HID_ReadItem+0xc8>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	69fa      	ldr	r2, [r7, #28]
 8005560:	429a      	cmp	r2, r3
 8005562:	d901      	bls.n	8005568 <HID_ReadItem+0xcc>
  {
    return (0U);
 8005564:	2300      	movs	r3, #0
 8005566:	e02d      	b.n	80055c4 <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	7a9b      	ldrb	r3, [r3, #10]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d01e      	beq.n	80055ae <HID_ReadItem+0x112>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	3b01      	subs	r3, #1
 8005576:	69fa      	ldr	r2, [r7, #28]
 8005578:	fa22 f303 	lsr.w	r3, r2, r3
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d014      	beq.n	80055ae <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	fa02 f303 	lsl.w	r3, r2, r3
 800558e:	425b      	negs	r3, r3
 8005590:	69fa      	ldr	r2, [r7, #28]
 8005592:	4313      	orrs	r3, r2
 8005594:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d101      	bne.n	80055a2 <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	e010      	b.n	80055c4 <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	fb02 f303 	mul.w	r3, r2, r3
 80055ac:	e00a      	b.n	80055c4 <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d101      	bne.n	80055ba <HID_ReadItem+0x11e>
    {
      return (val);
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	e004      	b.n	80055c4 <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3724      	adds	r7, #36	; 0x24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	4613      	mov	r3, r2
 80055dc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80055e4:	2302      	movs	r3, #2
 80055e6:	e029      	b.n	800563c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	79fa      	ldrb	r2, [r7, #7]
 80055ec:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 f81f 	bl	8005644 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f001 fd01 	bl	800703c <USBH_LL_Init>

  return USBH_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005650:	2300      	movs	r3, #0
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	e009      	b.n	800566a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	33e0      	adds	r3, #224	; 0xe0
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	2200      	movs	r2, #0
 8005662:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3301      	adds	r3, #1
 8005668:	60fb      	str	r3, [r7, #12]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2b0f      	cmp	r3, #15
 800566e:	d9f2      	bls.n	8005656 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	e009      	b.n	800568a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4413      	add	r3, r2
 800567c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005680:	2200      	movs	r2, #0
 8005682:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	3301      	adds	r3, #1
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005690:	d3f1      	bcc.n	8005676 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2240      	movs	r2, #64	; 0x40
 80056b6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d016      	beq.n	800572e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10e      	bne.n	8005728 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005710:	1c59      	adds	r1, r3, #1
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	33de      	adds	r3, #222	; 0xde
 800571c:	6839      	ldr	r1, [r7, #0]
 800571e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	73fb      	strb	r3, [r7, #15]
 8005726:	e004      	b.n	8005732 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005728:	2302      	movs	r3, #2
 800572a:	73fb      	strb	r3, [r7, #15]
 800572c:	e001      	b.n	8005732 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800572e:	2302      	movs	r3, #2
 8005730:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005732:	7bfb      	ldrb	r3, [r7, #15]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800574c:	2300      	movs	r3, #0
 800574e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005756:	78fa      	ldrb	r2, [r7, #3]
 8005758:	429a      	cmp	r2, r3
 800575a:	d204      	bcs.n	8005766 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	78fa      	ldrb	r2, [r7, #3]
 8005760:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005764:	e001      	b.n	800576a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005766:	2302      	movs	r3, #2
 8005768:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800576a:	7bfb      	ldrb	r3, [r7, #15]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	4608      	mov	r0, r1
 8005782:	4611      	mov	r1, r2
 8005784:	461a      	mov	r2, r3
 8005786:	4603      	mov	r3, r0
 8005788:	70fb      	strb	r3, [r7, #3]
 800578a:	460b      	mov	r3, r1
 800578c:	70bb      	strb	r3, [r7, #2]
 800578e:	4613      	mov	r3, r2
 8005790:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005796:	2300      	movs	r3, #0
 8005798:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80057a0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80057a2:	e025      	b.n	80057f0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80057a4:	7dfb      	ldrb	r3, [r7, #23]
 80057a6:	221a      	movs	r2, #26
 80057a8:	fb02 f303 	mul.w	r3, r2, r3
 80057ac:	3308      	adds	r3, #8
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4413      	add	r3, r2
 80057b2:	3302      	adds	r3, #2
 80057b4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	795b      	ldrb	r3, [r3, #5]
 80057ba:	78fa      	ldrb	r2, [r7, #3]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d002      	beq.n	80057c6 <USBH_FindInterface+0x4e>
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	2bff      	cmp	r3, #255	; 0xff
 80057c4:	d111      	bne.n	80057ea <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80057ca:	78ba      	ldrb	r2, [r7, #2]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d002      	beq.n	80057d6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80057d0:	78bb      	ldrb	r3, [r7, #2]
 80057d2:	2bff      	cmp	r3, #255	; 0xff
 80057d4:	d109      	bne.n	80057ea <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80057da:	787a      	ldrb	r2, [r7, #1]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d002      	beq.n	80057e6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80057e0:	787b      	ldrb	r3, [r7, #1]
 80057e2:	2bff      	cmp	r3, #255	; 0xff
 80057e4:	d101      	bne.n	80057ea <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80057e6:	7dfb      	ldrb	r3, [r7, #23]
 80057e8:	e006      	b.n	80057f8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80057ea:	7dfb      	ldrb	r3, [r7, #23]
 80057ec:	3301      	adds	r3, #1
 80057ee:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80057f0:	7dfb      	ldrb	r3, [r7, #23]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d9d6      	bls.n	80057a4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80057f6:	23ff      	movs	r3, #255	; 0xff
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	371c      	adds	r7, #28
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f001 fc51 	bl	80070b4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005812:	2101      	movs	r1, #1
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f001 fd6a 	bl	80072ee <USBH_LL_DriverVBUS>

  return USBH_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b088      	sub	sp, #32
 8005828:	af04      	add	r7, sp, #16
 800582a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800582c:	2302      	movs	r3, #2
 800582e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b01      	cmp	r3, #1
 800583e:	d102      	bne.n	8005846 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2203      	movs	r2, #3
 8005844:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b0b      	cmp	r3, #11
 800584e:	f200 81be 	bhi.w	8005bce <USBH_Process+0x3aa>
 8005852:	a201      	add	r2, pc, #4	; (adr r2, 8005858 <USBH_Process+0x34>)
 8005854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005858:	08005889 	.word	0x08005889
 800585c:	080058bb 	.word	0x080058bb
 8005860:	08005923 	.word	0x08005923
 8005864:	08005b69 	.word	0x08005b69
 8005868:	08005bcf 	.word	0x08005bcf
 800586c:	080059c7 	.word	0x080059c7
 8005870:	08005b0f 	.word	0x08005b0f
 8005874:	080059fd 	.word	0x080059fd
 8005878:	08005a1d 	.word	0x08005a1d
 800587c:	08005a3d 	.word	0x08005a3d
 8005880:	08005a81 	.word	0x08005a81
 8005884:	08005b51 	.word	0x08005b51
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 819e 	beq.w	8005bd2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800589c:	20c8      	movs	r0, #200	; 0xc8
 800589e:	f001 fd64 	bl	800736a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f001 fc63 	bl	800716e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80058b8:	e18b      	b.n	8005bd2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d107      	bne.n	80058d4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80058d2:	e18d      	b.n	8005bf0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80058da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058de:	d914      	bls.n	800590a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80058e6:	3301      	adds	r3, #1
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d903      	bls.n	8005902 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	220d      	movs	r2, #13
 80058fe:	701a      	strb	r2, [r3, #0]
      break;
 8005900:	e176      	b.n	8005bf0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	701a      	strb	r2, [r3, #0]
      break;
 8005908:	e172      	b.n	8005bf0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005910:	f103 020a 	add.w	r2, r3, #10
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800591a:	200a      	movs	r0, #10
 800591c:	f001 fd25 	bl	800736a <USBH_Delay>
      break;
 8005920:	e166      	b.n	8005bf0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005928:	2b00      	cmp	r3, #0
 800592a:	d005      	beq.n	8005938 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005932:	2104      	movs	r1, #4
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005938:	2064      	movs	r0, #100	; 0x64
 800593a:	f001 fd16 	bl	800736a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f001 fbee 	bl	8007120 <USBH_LL_GetSpeed>
 8005944:	4603      	mov	r3, r0
 8005946:	461a      	mov	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2205      	movs	r2, #5
 8005952:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005954:	2100      	movs	r1, #0
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f001 fa07 	bl	8006d6a <USBH_AllocPipe>
 800595c:	4603      	mov	r3, r0
 800595e:	461a      	mov	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005964:	2180      	movs	r1, #128	; 0x80
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f001 f9ff 	bl	8006d6a <USBH_AllocPipe>
 800596c:	4603      	mov	r3, r0
 800596e:	461a      	mov	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	7919      	ldrb	r1, [r3, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005988:	b292      	uxth	r2, r2
 800598a:	9202      	str	r2, [sp, #8]
 800598c:	2200      	movs	r2, #0
 800598e:	9201      	str	r2, [sp, #4]
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	4603      	mov	r3, r0
 8005994:	2280      	movs	r2, #128	; 0x80
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f001 f9b8 	bl	8006d0c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	7959      	ldrb	r1, [r3, #5]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80059b0:	b292      	uxth	r2, r2
 80059b2:	9202      	str	r2, [sp, #8]
 80059b4:	2200      	movs	r2, #0
 80059b6:	9201      	str	r2, [sp, #4]
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	4603      	mov	r3, r0
 80059bc:	2200      	movs	r2, #0
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f001 f9a4 	bl	8006d0c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80059c4:	e114      	b.n	8005bf0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f918 	bl	8005bfc <USBH_HandleEnum>
 80059cc:	4603      	mov	r3, r0
 80059ce:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80059d0:	7bbb      	ldrb	r3, [r7, #14]
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f040 80fe 	bne.w	8005bd6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d103      	bne.n	80059f4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2208      	movs	r2, #8
 80059f0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80059f2:	e0f0      	b.n	8005bd6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2207      	movs	r2, #7
 80059f8:	701a      	strb	r2, [r3, #0]
      break;
 80059fa:	e0ec      	b.n	8005bd6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 80e9 	beq.w	8005bda <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005a0e:	2101      	movs	r1, #1
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2208      	movs	r2, #8
 8005a18:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8005a1a:	e0de      	b.n	8005bda <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	4619      	mov	r1, r3
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fc2c 	bl	8006284 <USBH_SetCfg>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f040 80d5 	bne.w	8005bde <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2209      	movs	r2, #9
 8005a38:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005a3a:	e0d0      	b.n	8005bde <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005a42:	f003 0320 	and.w	r3, r3, #32
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d016      	beq.n	8005a78 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fc3c 	bl	80062ca <USBH_SetFeature>
 8005a52:	4603      	mov	r3, r0
 8005a54:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005a56:	7bbb      	ldrb	r3, [r7, #14]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d103      	bne.n	8005a66 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	220a      	movs	r2, #10
 8005a62:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005a64:	e0bd      	b.n	8005be2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8005a66:	7bbb      	ldrb	r3, [r7, #14]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	f040 80b9 	bne.w	8005be2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	220a      	movs	r2, #10
 8005a74:	701a      	strb	r2, [r3, #0]
      break;
 8005a76:	e0b4      	b.n	8005be2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	220a      	movs	r2, #10
 8005a7c:	701a      	strb	r2, [r3, #0]
      break;
 8005a7e:	e0b0      	b.n	8005be2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 80ad 	beq.w	8005be6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005a94:	2300      	movs	r3, #0
 8005a96:	73fb      	strb	r3, [r7, #15]
 8005a98:	e016      	b.n	8005ac8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005a9a:	7bfa      	ldrb	r2, [r7, #15]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	32de      	adds	r2, #222	; 0xde
 8005aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa4:	791a      	ldrb	r2, [r3, #4]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d108      	bne.n	8005ac2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005ab0:	7bfa      	ldrb	r2, [r7, #15]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	32de      	adds	r2, #222	; 0xde
 8005ab6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8005ac0:	e005      	b.n	8005ace <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	73fb      	strb	r3, [r7, #15]
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0e5      	beq.n	8005a9a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d016      	beq.n	8005b06 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	4798      	blx	r3
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d109      	bne.n	8005afe <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2206      	movs	r2, #6
 8005aee:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005af6:	2103      	movs	r1, #3
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005afc:	e073      	b.n	8005be6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	220d      	movs	r2, #13
 8005b02:	701a      	strb	r2, [r3, #0]
      break;
 8005b04:	e06f      	b.n	8005be6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	220d      	movs	r2, #13
 8005b0a:	701a      	strb	r2, [r3, #0]
      break;
 8005b0c:	e06b      	b.n	8005be6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d017      	beq.n	8005b48 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	4798      	blx	r3
 8005b24:	4603      	mov	r3, r0
 8005b26:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005b28:	7bbb      	ldrb	r3, [r7, #14]
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d103      	bne.n	8005b38 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	220b      	movs	r2, #11
 8005b34:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005b36:	e058      	b.n	8005bea <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8005b38:	7bbb      	ldrb	r3, [r7, #14]
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d154      	bne.n	8005bea <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	220d      	movs	r2, #13
 8005b44:	701a      	strb	r2, [r3, #0]
      break;
 8005b46:	e050      	b.n	8005bea <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	220d      	movs	r2, #13
 8005b4c:	701a      	strb	r2, [r3, #0]
      break;
 8005b4e:	e04c      	b.n	8005bea <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d049      	beq.n	8005bee <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	4798      	blx	r3
      }
      break;
 8005b66:	e042      	b.n	8005bee <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7ff fd67 	bl	8005644 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d009      	beq.n	8005b94 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d005      	beq.n	8005baa <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ba4:	2105      	movs	r1, #5
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d107      	bne.n	8005bc6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7ff fe20 	bl	8005804 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005bc4:	e014      	b.n	8005bf0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f001 fa74 	bl	80070b4 <USBH_LL_Start>
      break;
 8005bcc:	e010      	b.n	8005bf0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8005bce:	bf00      	nop
 8005bd0:	e00e      	b.n	8005bf0 <USBH_Process+0x3cc>
      break;
 8005bd2:	bf00      	nop
 8005bd4:	e00c      	b.n	8005bf0 <USBH_Process+0x3cc>
      break;
 8005bd6:	bf00      	nop
 8005bd8:	e00a      	b.n	8005bf0 <USBH_Process+0x3cc>
    break;
 8005bda:	bf00      	nop
 8005bdc:	e008      	b.n	8005bf0 <USBH_Process+0x3cc>
      break;
 8005bde:	bf00      	nop
 8005be0:	e006      	b.n	8005bf0 <USBH_Process+0x3cc>
      break;
 8005be2:	bf00      	nop
 8005be4:	e004      	b.n	8005bf0 <USBH_Process+0x3cc>
      break;
 8005be6:	bf00      	nop
 8005be8:	e002      	b.n	8005bf0 <USBH_Process+0x3cc>
      break;
 8005bea:	bf00      	nop
 8005bec:	e000      	b.n	8005bf0 <USBH_Process+0x3cc>
      break;
 8005bee:	bf00      	nop
  }
  return USBH_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop

08005bfc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b088      	sub	sp, #32
 8005c00:	af04      	add	r7, sp, #16
 8005c02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005c04:	2301      	movs	r3, #1
 8005c06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	785b      	ldrb	r3, [r3, #1]
 8005c10:	2b07      	cmp	r3, #7
 8005c12:	f200 81c1 	bhi.w	8005f98 <USBH_HandleEnum+0x39c>
 8005c16:	a201      	add	r2, pc, #4	; (adr r2, 8005c1c <USBH_HandleEnum+0x20>)
 8005c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1c:	08005c3d 	.word	0x08005c3d
 8005c20:	08005cfb 	.word	0x08005cfb
 8005c24:	08005d65 	.word	0x08005d65
 8005c28:	08005df3 	.word	0x08005df3
 8005c2c:	08005e5d 	.word	0x08005e5d
 8005c30:	08005ecd 	.word	0x08005ecd
 8005c34:	08005f13 	.word	0x08005f13
 8005c38:	08005f59 	.word	0x08005f59
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8005c3c:	2108      	movs	r1, #8
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fa50 	bl	80060e4 <USBH_Get_DevDesc>
 8005c44:	4603      	mov	r3, r0
 8005c46:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005c48:	7bbb      	ldrb	r3, [r7, #14]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d130      	bne.n	8005cb0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	7919      	ldrb	r1, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005c72:	b292      	uxth	r2, r2
 8005c74:	9202      	str	r2, [sp, #8]
 8005c76:	2200      	movs	r2, #0
 8005c78:	9201      	str	r2, [sp, #4]
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2280      	movs	r2, #128	; 0x80
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f001 f843 	bl	8006d0c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	7959      	ldrb	r1, [r3, #5]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005c9a:	b292      	uxth	r2, r2
 8005c9c:	9202      	str	r2, [sp, #8]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	9201      	str	r2, [sp, #4]
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f001 f82f 	bl	8006d0c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005cae:	e175      	b.n	8005f9c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005cb0:	7bbb      	ldrb	r3, [r7, #14]
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	f040 8172 	bne.w	8005f9c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d903      	bls.n	8005cda <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	220d      	movs	r2, #13
 8005cd6:	701a      	strb	r2, [r3, #0]
      break;
 8005cd8:	e160      	b.n	8005f9c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	795b      	ldrb	r3, [r3, #5]
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f001 f863 	bl	8006dac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	791b      	ldrb	r3, [r3, #4]
 8005cea:	4619      	mov	r1, r3
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f001 f85d 	bl	8006dac <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	701a      	strb	r2, [r3, #0]
      break;
 8005cf8:	e150      	b.n	8005f9c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8005cfa:	2112      	movs	r1, #18
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f9f1 	bl	80060e4 <USBH_Get_DevDesc>
 8005d02:	4603      	mov	r3, r0
 8005d04:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005d06:	7bbb      	ldrb	r3, [r7, #14]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d103      	bne.n	8005d14 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005d12:	e145      	b.n	8005fa0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005d14:	7bbb      	ldrb	r3, [r7, #14]
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	f040 8142 	bne.w	8005fa0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005d22:	3301      	adds	r3, #1
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005d32:	2b03      	cmp	r3, #3
 8005d34:	d903      	bls.n	8005d3e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	220d      	movs	r2, #13
 8005d3a:	701a      	strb	r2, [r3, #0]
      break;
 8005d3c:	e130      	b.n	8005fa0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	795b      	ldrb	r3, [r3, #5]
 8005d42:	4619      	mov	r1, r3
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f001 f831 	bl	8006dac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	791b      	ldrb	r3, [r3, #4]
 8005d4e:	4619      	mov	r1, r3
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f001 f82b 	bl	8006dac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	701a      	strb	r2, [r3, #0]
      break;
 8005d62:	e11d      	b.n	8005fa0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8005d64:	2101      	movs	r1, #1
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fa68 	bl	800623c <USBH_SetAddress>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005d70:	7bbb      	ldrb	r3, [r7, #14]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d132      	bne.n	8005ddc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8005d76:	2002      	movs	r0, #2
 8005d78:	f001 faf7 	bl	800736a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2203      	movs	r2, #3
 8005d88:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	7919      	ldrb	r1, [r3, #4]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005d9e:	b292      	uxth	r2, r2
 8005da0:	9202      	str	r2, [sp, #8]
 8005da2:	2200      	movs	r2, #0
 8005da4:	9201      	str	r2, [sp, #4]
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	4603      	mov	r3, r0
 8005daa:	2280      	movs	r2, #128	; 0x80
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 ffad 	bl	8006d0c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	7959      	ldrb	r1, [r3, #5]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005dc6:	b292      	uxth	r2, r2
 8005dc8:	9202      	str	r2, [sp, #8]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	9201      	str	r2, [sp, #4]
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 ff99 	bl	8006d0c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005dda:	e0e3      	b.n	8005fa4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005ddc:	7bbb      	ldrb	r3, [r7, #14]
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	f040 80e0 	bne.w	8005fa4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	220d      	movs	r2, #13
 8005de8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	705a      	strb	r2, [r3, #1]
      break;
 8005df0:	e0d8      	b.n	8005fa4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8005df2:	2109      	movs	r1, #9
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f99d 	bl	8006134 <USBH_Get_CfgDesc>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005dfe:	7bbb      	ldrb	r3, [r7, #14]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d103      	bne.n	8005e0c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2204      	movs	r2, #4
 8005e08:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005e0a:	e0cd      	b.n	8005fa8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005e0c:	7bbb      	ldrb	r3, [r7, #14]
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	f040 80ca 	bne.w	8005fa8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d903      	bls.n	8005e36 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	220d      	movs	r2, #13
 8005e32:	701a      	strb	r2, [r3, #0]
      break;
 8005e34:	e0b8      	b.n	8005fa8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	795b      	ldrb	r3, [r3, #5]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 ffb5 	bl	8006dac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	791b      	ldrb	r3, [r3, #4]
 8005e46:	4619      	mov	r1, r3
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 ffaf 	bl	8006dac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	701a      	strb	r2, [r3, #0]
      break;
 8005e5a:	e0a5      	b.n	8005fa8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f965 	bl	8006134 <USBH_Get_CfgDesc>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005e6e:	7bbb      	ldrb	r3, [r7, #14]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d103      	bne.n	8005e7c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2205      	movs	r2, #5
 8005e78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005e7a:	e097      	b.n	8005fac <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005e7c:	7bbb      	ldrb	r3, [r7, #14]
 8005e7e:	2b03      	cmp	r3, #3
 8005e80:	f040 8094 	bne.w	8005fac <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	b2da      	uxtb	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d903      	bls.n	8005ea6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	220d      	movs	r2, #13
 8005ea2:	701a      	strb	r2, [r3, #0]
      break;
 8005ea4:	e082      	b.n	8005fac <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	795b      	ldrb	r3, [r3, #5]
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 ff7d 	bl	8006dac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	791b      	ldrb	r3, [r3, #4]
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 ff77 	bl	8006dac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	701a      	strb	r2, [r3, #0]
      break;
 8005eca:	e06f      	b.n	8005fac <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d019      	beq.n	8005f0a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005ee2:	23ff      	movs	r3, #255	; 0xff
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f949 	bl	800617c <USBH_Get_StringDesc>
 8005eea:	4603      	mov	r3, r0
 8005eec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005eee:	7bbb      	ldrb	r3, [r7, #14]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d103      	bne.n	8005efc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2206      	movs	r2, #6
 8005ef8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005efa:	e059      	b.n	8005fb0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005efc:	7bbb      	ldrb	r3, [r7, #14]
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	d156      	bne.n	8005fb0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2206      	movs	r2, #6
 8005f06:	705a      	strb	r2, [r3, #1]
      break;
 8005f08:	e052      	b.n	8005fb0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2206      	movs	r2, #6
 8005f0e:	705a      	strb	r2, [r3, #1]
      break;
 8005f10:	e04e      	b.n	8005fb0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d019      	beq.n	8005f50 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005f28:	23ff      	movs	r3, #255	; 0xff
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f926 	bl	800617c <USBH_Get_StringDesc>
 8005f30:	4603      	mov	r3, r0
 8005f32:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005f34:	7bbb      	ldrb	r3, [r7, #14]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d103      	bne.n	8005f42 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2207      	movs	r2, #7
 8005f3e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005f40:	e038      	b.n	8005fb4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005f42:	7bbb      	ldrb	r3, [r7, #14]
 8005f44:	2b03      	cmp	r3, #3
 8005f46:	d135      	bne.n	8005fb4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2207      	movs	r2, #7
 8005f4c:	705a      	strb	r2, [r3, #1]
      break;
 8005f4e:	e031      	b.n	8005fb4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2207      	movs	r2, #7
 8005f54:	705a      	strb	r2, [r3, #1]
      break;
 8005f56:	e02d      	b.n	8005fb4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d017      	beq.n	8005f92 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8005f6e:	23ff      	movs	r3, #255	; 0xff
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f903 	bl	800617c <USBH_Get_StringDesc>
 8005f76:	4603      	mov	r3, r0
 8005f78:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005f7a:	7bbb      	ldrb	r3, [r7, #14]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d102      	bne.n	8005f86 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8005f80:	2300      	movs	r3, #0
 8005f82:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8005f84:	e018      	b.n	8005fb8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005f86:	7bbb      	ldrb	r3, [r7, #14]
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d115      	bne.n	8005fb8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f90:	e012      	b.n	8005fb8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8005f92:	2300      	movs	r3, #0
 8005f94:	73fb      	strb	r3, [r7, #15]
      break;
 8005f96:	e00f      	b.n	8005fb8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8005f98:	bf00      	nop
 8005f9a:	e00e      	b.n	8005fba <USBH_HandleEnum+0x3be>
      break;
 8005f9c:	bf00      	nop
 8005f9e:	e00c      	b.n	8005fba <USBH_HandleEnum+0x3be>
      break;
 8005fa0:	bf00      	nop
 8005fa2:	e00a      	b.n	8005fba <USBH_HandleEnum+0x3be>
      break;
 8005fa4:	bf00      	nop
 8005fa6:	e008      	b.n	8005fba <USBH_HandleEnum+0x3be>
      break;
 8005fa8:	bf00      	nop
 8005faa:	e006      	b.n	8005fba <USBH_HandleEnum+0x3be>
      break;
 8005fac:	bf00      	nop
 8005fae:	e004      	b.n	8005fba <USBH_HandleEnum+0x3be>
      break;
 8005fb0:	bf00      	nop
 8005fb2:	e002      	b.n	8005fba <USBH_HandleEnum+0x3be>
      break;
 8005fb4:	bf00      	nop
 8005fb6:	e000      	b.n	8005fba <USBH_HandleEnum+0x3be>
      break;
 8005fb8:	bf00      	nop
  }
  return Status;
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b082      	sub	sp, #8
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f804 	bl	8006006 <USBH_HandleSof>
}
 8005ffe:	bf00      	nop
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b082      	sub	sp, #8
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b0b      	cmp	r3, #11
 8006016:	d10a      	bne.n	800602e <USBH_HandleSof+0x28>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d005      	beq.n	800602e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	4798      	blx	r3
  }
}
 800602e:	bf00      	nop
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006046:	bf00      	nop
}
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006052:	b480      	push	{r7}
 8006054:	b083      	sub	sp, #12
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006062:	bf00      	nop
}
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800606e:	b480      	push	{r7}
 8006070:	b083      	sub	sp, #12
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 f814 	bl	80070ea <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	791b      	ldrb	r3, [r3, #4]
 80060c6:	4619      	mov	r1, r3
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fe6f 	bl	8006dac <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	795b      	ldrb	r3, [r3, #5]
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fe69 	bl	8006dac <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af02      	add	r7, sp, #8
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	460b      	mov	r3, r1
 80060ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80060f6:	78fb      	ldrb	r3, [r7, #3]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	4613      	mov	r3, r2
 80060fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006102:	2100      	movs	r1, #0
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f864 	bl	80061d2 <USBH_GetDescriptor>
 800610a:	4603      	mov	r3, r0
 800610c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800610e:	7bfb      	ldrb	r3, [r7, #15]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10a      	bne.n	800612a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f203 3026 	addw	r0, r3, #806	; 0x326
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006120:	78fa      	ldrb	r2, [r7, #3]
 8006122:	b292      	uxth	r2, r2
 8006124:	4619      	mov	r1, r3
 8006126:	f000 f919 	bl	800635c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800612a:	7bfb      	ldrb	r3, [r7, #15]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af02      	add	r7, sp, #8
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	460b      	mov	r3, r1
 800613e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	331c      	adds	r3, #28
 8006144:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006146:	887b      	ldrh	r3, [r7, #2]
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006150:	2100      	movs	r1, #0
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f83d 	bl	80061d2 <USBH_GetDescriptor>
 8006158:	4603      	mov	r3, r0
 800615a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800615c:	7bfb      	ldrb	r3, [r7, #15]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d107      	bne.n	8006172 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006162:	887b      	ldrh	r3, [r7, #2]
 8006164:	461a      	mov	r2, r3
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f989 	bl	8006480 <USBH_ParseCfgDesc>
 800616e:	4603      	mov	r3, r0
 8006170:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006172:	7bfb      	ldrb	r3, [r7, #15]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af02      	add	r7, sp, #8
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	607a      	str	r2, [r7, #4]
 8006186:	461a      	mov	r2, r3
 8006188:	460b      	mov	r3, r1
 800618a:	72fb      	strb	r3, [r7, #11]
 800618c:	4613      	mov	r3, r2
 800618e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006190:	7afb      	ldrb	r3, [r7, #11]
 8006192:	b29b      	uxth	r3, r3
 8006194:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006198:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80061a0:	893b      	ldrh	r3, [r7, #8]
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	460b      	mov	r3, r1
 80061a6:	2100      	movs	r1, #0
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 f812 	bl	80061d2 <USBH_GetDescriptor>
 80061ae:	4603      	mov	r3, r0
 80061b0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80061b2:	7dfb      	ldrb	r3, [r7, #23]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d107      	bne.n	80061c8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80061be:	893a      	ldrh	r2, [r7, #8]
 80061c0:	6879      	ldr	r1, [r7, #4]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fb26 	bl	8006814 <USBH_ParseStringDesc>
  }

  return status;
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	607b      	str	r3, [r7, #4]
 80061dc:	460b      	mov	r3, r1
 80061de:	72fb      	strb	r3, [r7, #11]
 80061e0:	4613      	mov	r3, r2
 80061e2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	789b      	ldrb	r3, [r3, #2]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d11c      	bne.n	8006226 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80061ec:	7afb      	ldrb	r3, [r7, #11]
 80061ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2206      	movs	r2, #6
 80061fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	893a      	ldrh	r2, [r7, #8]
 8006202:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006204:	893b      	ldrh	r3, [r7, #8]
 8006206:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800620a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800620e:	d104      	bne.n	800621a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f240 4209 	movw	r2, #1033	; 0x409
 8006216:	829a      	strh	r2, [r3, #20]
 8006218:	e002      	b.n	8006220 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8b3a      	ldrh	r2, [r7, #24]
 8006224:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006226:	8b3b      	ldrh	r3, [r7, #24]
 8006228:	461a      	mov	r2, r3
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 fb3f 	bl	80068b0 <USBH_CtlReq>
 8006232:	4603      	mov	r3, r0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	460b      	mov	r3, r1
 8006246:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	789b      	ldrb	r3, [r3, #2]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d10f      	bne.n	8006270 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2205      	movs	r2, #5
 800625a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800625c:	78fb      	ldrb	r3, [r7, #3]
 800625e:	b29a      	uxth	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006270:	2200      	movs	r2, #0
 8006272:	2100      	movs	r1, #0
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fb1b 	bl	80068b0 <USBH_CtlReq>
 800627a:	4603      	mov	r3, r0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	789b      	ldrb	r3, [r3, #2]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d10e      	bne.n	80062b6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2209      	movs	r2, #9
 80062a2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	887a      	ldrh	r2, [r7, #2]
 80062a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80062b6:	2200      	movs	r2, #0
 80062b8:	2100      	movs	r1, #0
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 faf8 	bl	80068b0 <USBH_CtlReq>
 80062c0:	4603      	mov	r3, r0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b082      	sub	sp, #8
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	460b      	mov	r3, r1
 80062d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	789b      	ldrb	r3, [r3, #2]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d10f      	bne.n	80062fe <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2203      	movs	r2, #3
 80062e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80062ea:	78fb      	ldrb	r3, [r7, #3]
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80062fe:	2200      	movs	r2, #0
 8006300:	2100      	movs	r1, #0
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fad4 	bl	80068b0 <USBH_CtlReq>
 8006308:	4603      	mov	r3, r0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b082      	sub	sp, #8
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	460b      	mov	r3, r1
 800631c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	789b      	ldrb	r3, [r3, #2]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d10f      	bne.n	8006346 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2202      	movs	r2, #2
 800632a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	b29a      	uxth	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006346:	2200      	movs	r2, #0
 8006348:	2100      	movs	r1, #0
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fab0 	bl	80068b0 <USBH_CtlReq>
 8006350:	4603      	mov	r3, r0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
	...

0800635c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	4613      	mov	r3, r2
 8006368:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	781a      	ldrb	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	785a      	ldrb	r2, [r3, #1]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	3302      	adds	r3, #2
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	b29a      	uxth	r2, r3
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	3303      	adds	r3, #3
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	b29b      	uxth	r3, r3
 800638a:	021b      	lsls	r3, r3, #8
 800638c:	b29b      	uxth	r3, r3
 800638e:	4313      	orrs	r3, r2
 8006390:	b29a      	uxth	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	791a      	ldrb	r2, [r3, #4]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	795a      	ldrb	r2, [r3, #5]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	799a      	ldrb	r2, [r3, #6]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	79da      	ldrb	r2, [r3, #7]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	79db      	ldrb	r3, [r3, #7]
 80063ba:	2b20      	cmp	r3, #32
 80063bc:	dc0f      	bgt.n	80063de <USBH_ParseDevDesc+0x82>
 80063be:	2b08      	cmp	r3, #8
 80063c0:	db14      	blt.n	80063ec <USBH_ParseDevDesc+0x90>
 80063c2:	3b08      	subs	r3, #8
 80063c4:	4a2d      	ldr	r2, [pc, #180]	; (800647c <USBH_ParseDevDesc+0x120>)
 80063c6:	fa22 f303 	lsr.w	r3, r2, r3
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	bf14      	ite	ne
 80063d2:	2301      	movne	r3, #1
 80063d4:	2300      	moveq	r3, #0
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d102      	bne.n	80063e2 <USBH_ParseDevDesc+0x86>
 80063dc:	e006      	b.n	80063ec <USBH_ParseDevDesc+0x90>
 80063de:	2b40      	cmp	r3, #64	; 0x40
 80063e0:	d104      	bne.n	80063ec <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	79da      	ldrb	r2, [r3, #7]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	71da      	strb	r2, [r3, #7]
      break;
 80063ea:	e003      	b.n	80063f4 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2240      	movs	r2, #64	; 0x40
 80063f0:	71da      	strb	r2, [r3, #7]
      break;
 80063f2:	bf00      	nop
  }

  if (length > 8U)
 80063f4:	88fb      	ldrh	r3, [r7, #6]
 80063f6:	2b08      	cmp	r3, #8
 80063f8:	d939      	bls.n	800646e <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	3308      	adds	r3, #8
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	b29a      	uxth	r2, r3
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	3309      	adds	r3, #9
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	b29b      	uxth	r3, r3
 800640a:	021b      	lsls	r3, r3, #8
 800640c:	b29b      	uxth	r3, r3
 800640e:	4313      	orrs	r3, r2
 8006410:	b29a      	uxth	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	330a      	adds	r3, #10
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	b29a      	uxth	r2, r3
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	330b      	adds	r3, #11
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	b29b      	uxth	r3, r3
 8006426:	021b      	lsls	r3, r3, #8
 8006428:	b29b      	uxth	r3, r3
 800642a:	4313      	orrs	r3, r2
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	330c      	adds	r3, #12
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	b29a      	uxth	r2, r3
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	330d      	adds	r3, #13
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	b29b      	uxth	r3, r3
 8006442:	021b      	lsls	r3, r3, #8
 8006444:	b29b      	uxth	r3, r3
 8006446:	4313      	orrs	r3, r2
 8006448:	b29a      	uxth	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	7b9a      	ldrb	r2, [r3, #14]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	7bda      	ldrb	r2, [r3, #15]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	7c1a      	ldrb	r2, [r3, #16]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	7c5a      	ldrb	r2, [r3, #17]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	745a      	strb	r2, [r3, #17]
  }
}
 800646e:	bf00      	nop
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	01000101 	.word	0x01000101

08006480 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b08c      	sub	sp, #48	; 0x30
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	4613      	mov	r3, r2
 800648c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006494:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80064a6:	2300      	movs	r3, #0
 80064a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	781a      	ldrb	r2, [r3, #0]
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	785a      	ldrb	r2, [r3, #1]
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	3302      	adds	r3, #2
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	3303      	adds	r3, #3
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	021b      	lsls	r3, r3, #8
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	4313      	orrs	r3, r2
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064dc:	bf28      	it	cs
 80064de:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	791a      	ldrb	r2, [r3, #4]
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	795a      	ldrb	r2, [r3, #5]
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	799a      	ldrb	r2, [r3, #6]
 80064fc:	6a3b      	ldr	r3, [r7, #32]
 80064fe:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	79da      	ldrb	r2, [r3, #7]
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	7a1a      	ldrb	r2, [r3, #8]
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	2b09      	cmp	r3, #9
 8006516:	d002      	beq.n	800651e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	2209      	movs	r2, #9
 800651c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800651e:	88fb      	ldrh	r3, [r7, #6]
 8006520:	2b09      	cmp	r3, #9
 8006522:	f240 809d 	bls.w	8006660 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006526:	2309      	movs	r3, #9
 8006528:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800652a:	2300      	movs	r3, #0
 800652c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800652e:	e081      	b.n	8006634 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006530:	f107 0316 	add.w	r3, r7, #22
 8006534:	4619      	mov	r1, r3
 8006536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006538:	f000 f99f 	bl	800687a <USBH_GetNextDesc>
 800653c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	785b      	ldrb	r3, [r3, #1]
 8006542:	2b04      	cmp	r3, #4
 8006544:	d176      	bne.n	8006634 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	2b09      	cmp	r3, #9
 800654c:	d002      	beq.n	8006554 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	2209      	movs	r2, #9
 8006552:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006558:	221a      	movs	r2, #26
 800655a:	fb02 f303 	mul.w	r3, r2, r3
 800655e:	3308      	adds	r3, #8
 8006560:	6a3a      	ldr	r2, [r7, #32]
 8006562:	4413      	add	r3, r2
 8006564:	3302      	adds	r3, #2
 8006566:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006568:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800656a:	69f8      	ldr	r0, [r7, #28]
 800656c:	f000 f87e 	bl	800666c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006570:	2300      	movs	r3, #0
 8006572:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006576:	2300      	movs	r3, #0
 8006578:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800657a:	e043      	b.n	8006604 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800657c:	f107 0316 	add.w	r3, r7, #22
 8006580:	4619      	mov	r1, r3
 8006582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006584:	f000 f979 	bl	800687a <USBH_GetNextDesc>
 8006588:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658c:	785b      	ldrb	r3, [r3, #1]
 800658e:	2b05      	cmp	r3, #5
 8006590:	d138      	bne.n	8006604 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	795b      	ldrb	r3, [r3, #5]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d10f      	bne.n	80065ba <USBH_ParseCfgDesc+0x13a>
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	799b      	ldrb	r3, [r3, #6]
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d10b      	bne.n	80065ba <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	79db      	ldrb	r3, [r3, #7]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10f      	bne.n	80065ca <USBH_ParseCfgDesc+0x14a>
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	2b09      	cmp	r3, #9
 80065b0:	d00b      	beq.n	80065ca <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	2209      	movs	r2, #9
 80065b6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80065b8:	e007      	b.n	80065ca <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	2b07      	cmp	r3, #7
 80065c0:	d004      	beq.n	80065cc <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80065c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c4:	2207      	movs	r2, #7
 80065c6:	701a      	strb	r2, [r3, #0]
 80065c8:	e000      	b.n	80065cc <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80065ca:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80065cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80065d4:	3201      	adds	r2, #1
 80065d6:	00d2      	lsls	r2, r2, #3
 80065d8:	211a      	movs	r1, #26
 80065da:	fb01 f303 	mul.w	r3, r1, r3
 80065de:	4413      	add	r3, r2
 80065e0:	3308      	adds	r3, #8
 80065e2:	6a3a      	ldr	r2, [r7, #32]
 80065e4:	4413      	add	r3, r2
 80065e6:	3304      	adds	r3, #4
 80065e8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80065ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065ec:	69b9      	ldr	r1, [r7, #24]
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f000 f86b 	bl	80066ca <USBH_ParseEPDesc>
 80065f4:	4603      	mov	r3, r0
 80065f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80065fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80065fe:	3301      	adds	r3, #1
 8006600:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	791b      	ldrb	r3, [r3, #4]
 8006608:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800660c:	429a      	cmp	r2, r3
 800660e:	d204      	bcs.n	800661a <USBH_ParseCfgDesc+0x19a>
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	885a      	ldrh	r2, [r3, #2]
 8006614:	8afb      	ldrh	r3, [r7, #22]
 8006616:	429a      	cmp	r2, r3
 8006618:	d8b0      	bhi.n	800657c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	791b      	ldrb	r3, [r3, #4]
 800661e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006622:	429a      	cmp	r2, r3
 8006624:	d201      	bcs.n	800662a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006626:	2303      	movs	r3, #3
 8006628:	e01c      	b.n	8006664 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800662a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800662e:	3301      	adds	r3, #1
 8006630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006638:	2b01      	cmp	r3, #1
 800663a:	d805      	bhi.n	8006648 <USBH_ParseCfgDesc+0x1c8>
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	885a      	ldrh	r2, [r3, #2]
 8006640:	8afb      	ldrh	r3, [r7, #22]
 8006642:	429a      	cmp	r2, r3
 8006644:	f63f af74 	bhi.w	8006530 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	791b      	ldrb	r3, [r3, #4]
 800664c:	2b02      	cmp	r3, #2
 800664e:	bf28      	it	cs
 8006650:	2302      	movcs	r3, #2
 8006652:	b2db      	uxtb	r3, r3
 8006654:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006658:	429a      	cmp	r2, r3
 800665a:	d201      	bcs.n	8006660 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800665c:	2303      	movs	r3, #3
 800665e:	e001      	b.n	8006664 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006660:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006664:	4618      	mov	r0, r3
 8006666:	3730      	adds	r7, #48	; 0x30
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	781a      	ldrb	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	785a      	ldrb	r2, [r3, #1]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	789a      	ldrb	r2, [r3, #2]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	78da      	ldrb	r2, [r3, #3]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	791a      	ldrb	r2, [r3, #4]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	795a      	ldrb	r2, [r3, #5]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	799a      	ldrb	r2, [r3, #6]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	79da      	ldrb	r2, [r3, #7]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	7a1a      	ldrb	r2, [r3, #8]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	721a      	strb	r2, [r3, #8]
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b087      	sub	sp, #28
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	781a      	ldrb	r2, [r3, #0]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	785a      	ldrb	r2, [r3, #1]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	789a      	ldrb	r2, [r3, #2]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	78da      	ldrb	r2, [r3, #3]
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	3304      	adds	r3, #4
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	b29a      	uxth	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	3305      	adds	r3, #5
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	b29b      	uxth	r3, r3
 800670a:	021b      	lsls	r3, r3, #8
 800670c:	b29b      	uxth	r3, r3
 800670e:	4313      	orrs	r3, r2
 8006710:	b29a      	uxth	r2, r3
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	799a      	ldrb	r2, [r3, #6]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	889b      	ldrh	r3, [r3, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d102      	bne.n	800672c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8006726:	2303      	movs	r3, #3
 8006728:	75fb      	strb	r3, [r7, #23]
 800672a:	e033      	b.n	8006794 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	889b      	ldrh	r3, [r3, #4]
 8006730:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006734:	f023 0307 	bic.w	r3, r3, #7
 8006738:	b29a      	uxth	r2, r3
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	889b      	ldrh	r3, [r3, #4]
 8006742:	b21a      	sxth	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3304      	adds	r3, #4
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	b299      	uxth	r1, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3305      	adds	r3, #5
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	b29b      	uxth	r3, r3
 8006754:	021b      	lsls	r3, r3, #8
 8006756:	b29b      	uxth	r3, r3
 8006758:	430b      	orrs	r3, r1
 800675a:	b29b      	uxth	r3, r3
 800675c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006760:	2b00      	cmp	r3, #0
 8006762:	d110      	bne.n	8006786 <USBH_ParseEPDesc+0xbc>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3304      	adds	r3, #4
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	b299      	uxth	r1, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3305      	adds	r3, #5
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	b29b      	uxth	r3, r3
 8006774:	021b      	lsls	r3, r3, #8
 8006776:	b29b      	uxth	r3, r3
 8006778:	430b      	orrs	r3, r1
 800677a:	b29b      	uxth	r3, r3
 800677c:	b21b      	sxth	r3, r3
 800677e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006782:	b21b      	sxth	r3, r3
 8006784:	e001      	b.n	800678a <USBH_ParseEPDesc+0xc0>
 8006786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800678a:	4313      	orrs	r3, r2
 800678c:	b21b      	sxth	r3, r3
 800678e:	b29a      	uxth	r2, r3
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800679a:	2b00      	cmp	r3, #0
 800679c:	d116      	bne.n	80067cc <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	78db      	ldrb	r3, [r3, #3]
 80067a2:	f003 0303 	and.w	r3, r3, #3
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d005      	beq.n	80067b6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	78db      	ldrb	r3, [r3, #3]
 80067ae:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d127      	bne.n	8006806 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	799b      	ldrb	r3, [r3, #6]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <USBH_ParseEPDesc+0xfc>
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	799b      	ldrb	r3, [r3, #6]
 80067c2:	2b10      	cmp	r3, #16
 80067c4:	d91f      	bls.n	8006806 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80067c6:	2303      	movs	r3, #3
 80067c8:	75fb      	strb	r3, [r7, #23]
 80067ca:	e01c      	b.n	8006806 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	78db      	ldrb	r3, [r3, #3]
 80067d0:	f003 0303 	and.w	r3, r3, #3
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d10a      	bne.n	80067ee <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	799b      	ldrb	r3, [r3, #6]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <USBH_ParseEPDesc+0x11e>
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	799b      	ldrb	r3, [r3, #6]
 80067e4:	2b10      	cmp	r3, #16
 80067e6:	d90e      	bls.n	8006806 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80067e8:	2303      	movs	r3, #3
 80067ea:	75fb      	strb	r3, [r7, #23]
 80067ec:	e00b      	b.n	8006806 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	78db      	ldrb	r3, [r3, #3]
 80067f2:	f003 0303 	and.w	r3, r3, #3
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	d105      	bne.n	8006806 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	799b      	ldrb	r3, [r3, #6]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006802:	2303      	movs	r3, #3
 8006804:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8006806:	7dfb      	ldrb	r3, [r7, #23]
}
 8006808:	4618      	mov	r0, r3
 800680a:	371c      	adds	r7, #28
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	4613      	mov	r3, r2
 8006820:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	3301      	adds	r3, #1
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	2b03      	cmp	r3, #3
 800682a:	d120      	bne.n	800686e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	1e9a      	subs	r2, r3, #2
 8006832:	88fb      	ldrh	r3, [r7, #6]
 8006834:	4293      	cmp	r3, r2
 8006836:	bf28      	it	cs
 8006838:	4613      	movcs	r3, r2
 800683a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	3302      	adds	r3, #2
 8006840:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006842:	2300      	movs	r3, #0
 8006844:	82fb      	strh	r3, [r7, #22]
 8006846:	e00b      	b.n	8006860 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006848:	8afb      	ldrh	r3, [r7, #22]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	4413      	add	r3, r2
 800684e:	781a      	ldrb	r2, [r3, #0]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	3301      	adds	r3, #1
 8006858:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800685a:	8afb      	ldrh	r3, [r7, #22]
 800685c:	3302      	adds	r3, #2
 800685e:	82fb      	strh	r3, [r7, #22]
 8006860:	8afa      	ldrh	r2, [r7, #22]
 8006862:	8abb      	ldrh	r3, [r7, #20]
 8006864:	429a      	cmp	r2, r3
 8006866:	d3ef      	bcc.n	8006848 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2200      	movs	r2, #0
 800686c:	701a      	strb	r2, [r3, #0]
  }
}
 800686e:	bf00      	nop
 8006870:	371c      	adds	r7, #28
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800687a:	b480      	push	{r7}
 800687c:	b085      	sub	sp, #20
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	881a      	ldrh	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	b29b      	uxth	r3, r3
 800688e:	4413      	add	r3, r2
 8006890:	b29a      	uxth	r2, r3
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4413      	add	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80068a2:	68fb      	ldr	r3, [r7, #12]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	4613      	mov	r3, r2
 80068bc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80068be:	2301      	movs	r3, #1
 80068c0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	789b      	ldrb	r3, [r3, #2]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d002      	beq.n	80068d0 <USBH_CtlReq+0x20>
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d00f      	beq.n	80068ee <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80068ce:	e027      	b.n	8006920 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	88fa      	ldrh	r2, [r7, #6]
 80068da:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2201      	movs	r2, #1
 80068e0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2202      	movs	r2, #2
 80068e6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80068e8:	2301      	movs	r3, #1
 80068ea:	75fb      	strb	r3, [r7, #23]
      break;
 80068ec:	e018      	b.n	8006920 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 f81c 	bl	800692c <USBH_HandleControl>
 80068f4:	4603      	mov	r3, r0
 80068f6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80068f8:	7dfb      	ldrb	r3, [r7, #23]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <USBH_CtlReq+0x54>
 80068fe:	7dfb      	ldrb	r3, [r7, #23]
 8006900:	2b03      	cmp	r3, #3
 8006902:	d106      	bne.n	8006912 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2201      	movs	r2, #1
 8006908:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	761a      	strb	r2, [r3, #24]
      break;
 8006910:	e005      	b.n	800691e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006912:	7dfb      	ldrb	r3, [r7, #23]
 8006914:	2b02      	cmp	r3, #2
 8006916:	d102      	bne.n	800691e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2201      	movs	r2, #1
 800691c:	709a      	strb	r2, [r3, #2]
      break;
 800691e:	bf00      	nop
  }
  return status;
 8006920:	7dfb      	ldrb	r3, [r7, #23]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
	...

0800692c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af02      	add	r7, sp, #8
 8006932:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006934:	2301      	movs	r3, #1
 8006936:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006938:	2300      	movs	r3, #0
 800693a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	7e1b      	ldrb	r3, [r3, #24]
 8006940:	3b01      	subs	r3, #1
 8006942:	2b0a      	cmp	r3, #10
 8006944:	f200 8156 	bhi.w	8006bf4 <USBH_HandleControl+0x2c8>
 8006948:	a201      	add	r2, pc, #4	; (adr r2, 8006950 <USBH_HandleControl+0x24>)
 800694a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694e:	bf00      	nop
 8006950:	0800697d 	.word	0x0800697d
 8006954:	08006997 	.word	0x08006997
 8006958:	08006a01 	.word	0x08006a01
 800695c:	08006a27 	.word	0x08006a27
 8006960:	08006a5f 	.word	0x08006a5f
 8006964:	08006a89 	.word	0x08006a89
 8006968:	08006adb 	.word	0x08006adb
 800696c:	08006afd 	.word	0x08006afd
 8006970:	08006b39 	.word	0x08006b39
 8006974:	08006b5f 	.word	0x08006b5f
 8006978:	08006b9d 	.word	0x08006b9d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f103 0110 	add.w	r1, r3, #16
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	795b      	ldrb	r3, [r3, #5]
 8006986:	461a      	mov	r2, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f943 	bl	8006c14 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2202      	movs	r2, #2
 8006992:	761a      	strb	r2, [r3, #24]
      break;
 8006994:	e139      	b.n	8006c0a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	795b      	ldrb	r3, [r3, #5]
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fc93 	bl	80072c8 <USBH_LL_GetURBState>
 80069a2:	4603      	mov	r3, r0
 80069a4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80069a6:	7bbb      	ldrb	r3, [r7, #14]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d11e      	bne.n	80069ea <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	7c1b      	ldrb	r3, [r3, #16]
 80069b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80069b4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	8adb      	ldrh	r3, [r3, #22]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00a      	beq.n	80069d4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80069be:	7b7b      	ldrb	r3, [r7, #13]
 80069c0:	2b80      	cmp	r3, #128	; 0x80
 80069c2:	d103      	bne.n	80069cc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2203      	movs	r2, #3
 80069c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80069ca:	e115      	b.n	8006bf8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2205      	movs	r2, #5
 80069d0:	761a      	strb	r2, [r3, #24]
      break;
 80069d2:	e111      	b.n	8006bf8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80069d4:	7b7b      	ldrb	r3, [r7, #13]
 80069d6:	2b80      	cmp	r3, #128	; 0x80
 80069d8:	d103      	bne.n	80069e2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2209      	movs	r2, #9
 80069de:	761a      	strb	r2, [r3, #24]
      break;
 80069e0:	e10a      	b.n	8006bf8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2207      	movs	r2, #7
 80069e6:	761a      	strb	r2, [r3, #24]
      break;
 80069e8:	e106      	b.n	8006bf8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80069ea:	7bbb      	ldrb	r3, [r7, #14]
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d003      	beq.n	80069f8 <USBH_HandleControl+0xcc>
 80069f0:	7bbb      	ldrb	r3, [r7, #14]
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	f040 8100 	bne.w	8006bf8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	220b      	movs	r2, #11
 80069fc:	761a      	strb	r2, [r3, #24]
      break;
 80069fe:	e0fb      	b.n	8006bf8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6899      	ldr	r1, [r3, #8]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	899a      	ldrh	r2, [r3, #12]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	791b      	ldrb	r3, [r3, #4]
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f93a 	bl	8006c92 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2204      	movs	r2, #4
 8006a22:	761a      	strb	r2, [r3, #24]
      break;
 8006a24:	e0f1      	b.n	8006c0a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	791b      	ldrb	r3, [r3, #4]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fc4b 	bl	80072c8 <USBH_LL_GetURBState>
 8006a32:	4603      	mov	r3, r0
 8006a34:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006a36:	7bbb      	ldrb	r3, [r7, #14]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d102      	bne.n	8006a42 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2209      	movs	r2, #9
 8006a40:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006a42:	7bbb      	ldrb	r3, [r7, #14]
 8006a44:	2b05      	cmp	r3, #5
 8006a46:	d102      	bne.n	8006a4e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006a4c:	e0d6      	b.n	8006bfc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006a4e:	7bbb      	ldrb	r3, [r7, #14]
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	f040 80d3 	bne.w	8006bfc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	220b      	movs	r2, #11
 8006a5a:	761a      	strb	r2, [r3, #24]
      break;
 8006a5c:	e0ce      	b.n	8006bfc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6899      	ldr	r1, [r3, #8]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	899a      	ldrh	r2, [r3, #12]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	795b      	ldrb	r3, [r3, #5]
 8006a6a:	2001      	movs	r0, #1
 8006a6c:	9000      	str	r0, [sp, #0]
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f8ea 	bl	8006c48 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2206      	movs	r2, #6
 8006a84:	761a      	strb	r2, [r3, #24]
      break;
 8006a86:	e0c0      	b.n	8006c0a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	795b      	ldrb	r3, [r3, #5]
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fc1a 	bl	80072c8 <USBH_LL_GetURBState>
 8006a94:	4603      	mov	r3, r0
 8006a96:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006a98:	7bbb      	ldrb	r3, [r7, #14]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d103      	bne.n	8006aa6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2207      	movs	r2, #7
 8006aa2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006aa4:	e0ac      	b.n	8006c00 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006aa6:	7bbb      	ldrb	r3, [r7, #14]
 8006aa8:	2b05      	cmp	r3, #5
 8006aaa:	d105      	bne.n	8006ab8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	220c      	movs	r2, #12
 8006ab0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ab6:	e0a3      	b.n	8006c00 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006ab8:	7bbb      	ldrb	r3, [r7, #14]
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d103      	bne.n	8006ac6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2205      	movs	r2, #5
 8006ac2:	761a      	strb	r2, [r3, #24]
      break;
 8006ac4:	e09c      	b.n	8006c00 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006ac6:	7bbb      	ldrb	r3, [r7, #14]
 8006ac8:	2b04      	cmp	r3, #4
 8006aca:	f040 8099 	bne.w	8006c00 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	220b      	movs	r2, #11
 8006ad2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ad8:	e092      	b.n	8006c00 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	791b      	ldrb	r3, [r3, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f8d5 	bl	8006c92 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2208      	movs	r2, #8
 8006af8:	761a      	strb	r2, [r3, #24]

      break;
 8006afa:	e086      	b.n	8006c0a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	791b      	ldrb	r3, [r3, #4]
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fbe0 	bl	80072c8 <USBH_LL_GetURBState>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006b0c:	7bbb      	ldrb	r3, [r7, #14]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d105      	bne.n	8006b1e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	220d      	movs	r2, #13
 8006b16:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006b1c:	e072      	b.n	8006c04 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006b1e:	7bbb      	ldrb	r3, [r7, #14]
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	d103      	bne.n	8006b2c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	220b      	movs	r2, #11
 8006b28:	761a      	strb	r2, [r3, #24]
      break;
 8006b2a:	e06b      	b.n	8006c04 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006b2c:	7bbb      	ldrb	r3, [r7, #14]
 8006b2e:	2b05      	cmp	r3, #5
 8006b30:	d168      	bne.n	8006c04 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006b32:	2303      	movs	r3, #3
 8006b34:	73fb      	strb	r3, [r7, #15]
      break;
 8006b36:	e065      	b.n	8006c04 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	795b      	ldrb	r3, [r3, #5]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	9200      	str	r2, [sp, #0]
 8006b40:	2200      	movs	r2, #0
 8006b42:	2100      	movs	r1, #0
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f87f 	bl	8006c48 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	220a      	movs	r2, #10
 8006b5a:	761a      	strb	r2, [r3, #24]
      break;
 8006b5c:	e055      	b.n	8006c0a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	795b      	ldrb	r3, [r3, #5]
 8006b62:	4619      	mov	r1, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fbaf 	bl	80072c8 <USBH_LL_GetURBState>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006b6e:	7bbb      	ldrb	r3, [r7, #14]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d105      	bne.n	8006b80 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006b74:	2300      	movs	r3, #0
 8006b76:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	220d      	movs	r2, #13
 8006b7c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006b7e:	e043      	b.n	8006c08 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006b80:	7bbb      	ldrb	r3, [r7, #14]
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d103      	bne.n	8006b8e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2209      	movs	r2, #9
 8006b8a:	761a      	strb	r2, [r3, #24]
      break;
 8006b8c:	e03c      	b.n	8006c08 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006b8e:	7bbb      	ldrb	r3, [r7, #14]
 8006b90:	2b04      	cmp	r3, #4
 8006b92:	d139      	bne.n	8006c08 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	220b      	movs	r2, #11
 8006b98:	761a      	strb	r2, [r3, #24]
      break;
 8006b9a:	e035      	b.n	8006c08 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	7e5b      	ldrb	r3, [r3, #25]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	765a      	strb	r2, [r3, #25]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	7e5b      	ldrb	r3, [r3, #25]
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d806      	bhi.n	8006bbe <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006bbc:	e025      	b.n	8006c0a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bc4:	2106      	movs	r1, #6
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	795b      	ldrb	r3, [r3, #5]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f8e8 	bl	8006dac <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	791b      	ldrb	r3, [r3, #4]
 8006be0:	4619      	mov	r1, r3
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f8e2 	bl	8006dac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006bee:	2302      	movs	r3, #2
 8006bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf2:	e00a      	b.n	8006c0a <USBH_HandleControl+0x2de>

    default:
      break;
 8006bf4:	bf00      	nop
 8006bf6:	e008      	b.n	8006c0a <USBH_HandleControl+0x2de>
      break;
 8006bf8:	bf00      	nop
 8006bfa:	e006      	b.n	8006c0a <USBH_HandleControl+0x2de>
      break;
 8006bfc:	bf00      	nop
 8006bfe:	e004      	b.n	8006c0a <USBH_HandleControl+0x2de>
      break;
 8006c00:	bf00      	nop
 8006c02:	e002      	b.n	8006c0a <USBH_HandleControl+0x2de>
      break;
 8006c04:	bf00      	nop
 8006c06:	e000      	b.n	8006c0a <USBH_HandleControl+0x2de>
      break;
 8006c08:	bf00      	nop
  }

  return status;
 8006c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b088      	sub	sp, #32
 8006c18:	af04      	add	r7, sp, #16
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006c22:	79f9      	ldrb	r1, [r7, #7]
 8006c24:	2300      	movs	r3, #0
 8006c26:	9303      	str	r3, [sp, #12]
 8006c28:	2308      	movs	r3, #8
 8006c2a:	9302      	str	r3, [sp, #8]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	9301      	str	r3, [sp, #4]
 8006c30:	2300      	movs	r3, #0
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	2300      	movs	r3, #0
 8006c36:	2200      	movs	r2, #0
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 fb14 	bl	8007266 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b088      	sub	sp, #32
 8006c4c:	af04      	add	r7, sp, #16
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	4611      	mov	r1, r2
 8006c54:	461a      	mov	r2, r3
 8006c56:	460b      	mov	r3, r1
 8006c58:	80fb      	strh	r3, [r7, #6]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006c6c:	7979      	ldrb	r1, [r7, #5]
 8006c6e:	7e3b      	ldrb	r3, [r7, #24]
 8006c70:	9303      	str	r3, [sp, #12]
 8006c72:	88fb      	ldrh	r3, [r7, #6]
 8006c74:	9302      	str	r3, [sp, #8]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	9301      	str	r3, [sp, #4]
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	2300      	movs	r3, #0
 8006c80:	2200      	movs	r2, #0
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 faef 	bl	8007266 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b088      	sub	sp, #32
 8006c96:	af04      	add	r7, sp, #16
 8006c98:	60f8      	str	r0, [r7, #12]
 8006c9a:	60b9      	str	r1, [r7, #8]
 8006c9c:	4611      	mov	r1, r2
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	80fb      	strh	r3, [r7, #6]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006ca8:	7979      	ldrb	r1, [r7, #5]
 8006caa:	2300      	movs	r3, #0
 8006cac:	9303      	str	r3, [sp, #12]
 8006cae:	88fb      	ldrh	r3, [r7, #6]
 8006cb0:	9302      	str	r3, [sp, #8]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	9301      	str	r3, [sp, #4]
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	2300      	movs	r3, #0
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 fad1 	bl	8007266 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006cc4:	2300      	movs	r3, #0

}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b088      	sub	sp, #32
 8006cd2:	af04      	add	r7, sp, #16
 8006cd4:	60f8      	str	r0, [r7, #12]
 8006cd6:	60b9      	str	r1, [r7, #8]
 8006cd8:	4611      	mov	r1, r2
 8006cda:	461a      	mov	r2, r3
 8006cdc:	460b      	mov	r3, r1
 8006cde:	71fb      	strb	r3, [r7, #7]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006ce4:	79fb      	ldrb	r3, [r7, #7]
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	79b9      	ldrb	r1, [r7, #6]
 8006cea:	2200      	movs	r2, #0
 8006cec:	9203      	str	r2, [sp, #12]
 8006cee:	9302      	str	r3, [sp, #8]
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	9301      	str	r3, [sp, #4]
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 fab2 	bl	8007266 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af04      	add	r7, sp, #16
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	4608      	mov	r0, r1
 8006d16:	4611      	mov	r1, r2
 8006d18:	461a      	mov	r2, r3
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	70fb      	strb	r3, [r7, #3]
 8006d1e:	460b      	mov	r3, r1
 8006d20:	70bb      	strb	r3, [r7, #2]
 8006d22:	4613      	mov	r3, r2
 8006d24:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006d26:	7878      	ldrb	r0, [r7, #1]
 8006d28:	78ba      	ldrb	r2, [r7, #2]
 8006d2a:	78f9      	ldrb	r1, [r7, #3]
 8006d2c:	8b3b      	ldrh	r3, [r7, #24]
 8006d2e:	9302      	str	r3, [sp, #8]
 8006d30:	7d3b      	ldrb	r3, [r7, #20]
 8006d32:	9301      	str	r3, [sp, #4]
 8006d34:	7c3b      	ldrb	r3, [r7, #16]
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	4603      	mov	r3, r0
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fa45 	bl	80071ca <USBH_LL_OpenPipe>

  return USBH_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b082      	sub	sp, #8
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	460b      	mov	r3, r1
 8006d54:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8006d56:	78fb      	ldrb	r3, [r7, #3]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fa64 	bl	8007228 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	460b      	mov	r3, r1
 8006d74:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f836 	bl	8006de8 <USBH_GetFreePipe>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006d80:	89fb      	ldrh	r3, [r7, #14]
 8006d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d00a      	beq.n	8006da0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8006d8a:	78fa      	ldrb	r2, [r7, #3]
 8006d8c:	89fb      	ldrh	r3, [r7, #14]
 8006d8e:	f003 030f 	and.w	r3, r3, #15
 8006d92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d96:	6879      	ldr	r1, [r7, #4]
 8006d98:	33e0      	adds	r3, #224	; 0xe0
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	440b      	add	r3, r1
 8006d9e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006da0:	89fb      	ldrh	r3, [r7, #14]
 8006da2:	b2db      	uxtb	r3, r3
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	460b      	mov	r3, r1
 8006db6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006db8:	78fb      	ldrb	r3, [r7, #3]
 8006dba:	2b0f      	cmp	r3, #15
 8006dbc:	d80d      	bhi.n	8006dda <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006dbe:	78fb      	ldrb	r3, [r7, #3]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	33e0      	adds	r3, #224	; 0xe0
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	78fb      	ldrb	r3, [r7, #3]
 8006dcc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006dd0:	6879      	ldr	r1, [r7, #4]
 8006dd2:	33e0      	adds	r3, #224	; 0xe0
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	440b      	add	r3, r1
 8006dd8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006df4:	2300      	movs	r3, #0
 8006df6:	73fb      	strb	r3, [r7, #15]
 8006df8:	e00f      	b.n	8006e1a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	33e0      	adds	r3, #224	; 0xe0
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d102      	bne.n	8006e14 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	e007      	b.n	8006e24 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
 8006e16:	3301      	adds	r3, #1
 8006e18:	73fb      	strb	r3, [r7, #15]
 8006e1a:	7bfb      	ldrb	r3, [r7, #15]
 8006e1c:	2b0f      	cmp	r3, #15
 8006e1e:	d9ec      	bls.n	8006dfa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006e20:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006e34:	2201      	movs	r2, #1
 8006e36:	490e      	ldr	r1, [pc, #56]	; (8006e70 <MX_USB_HOST_Init+0x40>)
 8006e38:	480e      	ldr	r0, [pc, #56]	; (8006e74 <MX_USB_HOST_Init+0x44>)
 8006e3a:	f7fe fbc9 	bl	80055d0 <USBH_Init>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006e44:	f7f9 fc6e 	bl	8000724 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 8006e48:	490b      	ldr	r1, [pc, #44]	; (8006e78 <MX_USB_HOST_Init+0x48>)
 8006e4a:	480a      	ldr	r0, [pc, #40]	; (8006e74 <MX_USB_HOST_Init+0x44>)
 8006e4c:	f7fe fc4e 	bl	80056ec <USBH_RegisterClass>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006e56:	f7f9 fc65 	bl	8000724 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006e5a:	4806      	ldr	r0, [pc, #24]	; (8006e74 <MX_USB_HOST_Init+0x44>)
 8006e5c:	f7fe fcd2 	bl	8005804 <USBH_Start>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006e66:	f7f9 fc5d 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006e6a:	bf00      	nop
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	08006e91 	.word	0x08006e91
 8006e74:	2000013c 	.word	0x2000013c
 8006e78:	2000000c 	.word	0x2000000c

08006e7c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006e80:	4802      	ldr	r0, [pc, #8]	; (8006e8c <MX_USB_HOST_Process+0x10>)
 8006e82:	f7fe fccf 	bl	8005824 <USBH_Process>
}
 8006e86:	bf00      	nop
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	2000013c 	.word	0x2000013c

08006e90 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006e9c:	78fb      	ldrb	r3, [r7, #3]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	d819      	bhi.n	8006ed8 <USBH_UserProcess+0x48>
 8006ea4:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <USBH_UserProcess+0x1c>)
 8006ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eaa:	bf00      	nop
 8006eac:	08006ed9 	.word	0x08006ed9
 8006eb0:	08006ec9 	.word	0x08006ec9
 8006eb4:	08006ed9 	.word	0x08006ed9
 8006eb8:	08006ed1 	.word	0x08006ed1
 8006ebc:	08006ec1 	.word	0x08006ec1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006ec0:	4b09      	ldr	r3, [pc, #36]	; (8006ee8 <USBH_UserProcess+0x58>)
 8006ec2:	2203      	movs	r2, #3
 8006ec4:	701a      	strb	r2, [r3, #0]
  break;
 8006ec6:	e008      	b.n	8006eda <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006ec8:	4b07      	ldr	r3, [pc, #28]	; (8006ee8 <USBH_UserProcess+0x58>)
 8006eca:	2202      	movs	r2, #2
 8006ecc:	701a      	strb	r2, [r3, #0]
  break;
 8006ece:	e004      	b.n	8006eda <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006ed0:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <USBH_UserProcess+0x58>)
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	701a      	strb	r2, [r3, #0]
  break;
 8006ed6:	e000      	b.n	8006eda <USBH_UserProcess+0x4a>

  default:
  break;
 8006ed8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006eda:	bf00      	nop
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	20000514 	.word	0x20000514

08006eec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b08a      	sub	sp, #40	; 0x28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ef4:	f107 0314 	add.w	r3, r7, #20
 8006ef8:	2200      	movs	r2, #0
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	605a      	str	r2, [r3, #4]
 8006efe:	609a      	str	r2, [r3, #8]
 8006f00:	60da      	str	r2, [r3, #12]
 8006f02:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f0c:	d13a      	bne.n	8006f84 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f0e:	2300      	movs	r3, #0
 8006f10:	613b      	str	r3, [r7, #16]
 8006f12:	4b1e      	ldr	r3, [pc, #120]	; (8006f8c <HAL_HCD_MspInit+0xa0>)
 8006f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f16:	4a1d      	ldr	r2, [pc, #116]	; (8006f8c <HAL_HCD_MspInit+0xa0>)
 8006f18:	f043 0301 	orr.w	r3, r3, #1
 8006f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f1e:	4b1b      	ldr	r3, [pc, #108]	; (8006f8c <HAL_HCD_MspInit+0xa0>)
 8006f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	613b      	str	r3, [r7, #16]
 8006f28:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006f2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f30:	2302      	movs	r3, #2
 8006f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f34:	2300      	movs	r3, #0
 8006f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006f3c:	230a      	movs	r3, #10
 8006f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f40:	f107 0314 	add.w	r3, r7, #20
 8006f44:	4619      	mov	r1, r3
 8006f46:	4812      	ldr	r0, [pc, #72]	; (8006f90 <HAL_HCD_MspInit+0xa4>)
 8006f48:	f7f9 ff5a 	bl	8000e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f4c:	4b0f      	ldr	r3, [pc, #60]	; (8006f8c <HAL_HCD_MspInit+0xa0>)
 8006f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f50:	4a0e      	ldr	r2, [pc, #56]	; (8006f8c <HAL_HCD_MspInit+0xa0>)
 8006f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f56:	6353      	str	r3, [r2, #52]	; 0x34
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	4b0b      	ldr	r3, [pc, #44]	; (8006f8c <HAL_HCD_MspInit+0xa0>)
 8006f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f60:	4a0a      	ldr	r2, [pc, #40]	; (8006f8c <HAL_HCD_MspInit+0xa0>)
 8006f62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f66:	6453      	str	r3, [r2, #68]	; 0x44
 8006f68:	4b08      	ldr	r3, [pc, #32]	; (8006f8c <HAL_HCD_MspInit+0xa0>)
 8006f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f70:	60fb      	str	r3, [r7, #12]
 8006f72:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006f74:	2200      	movs	r2, #0
 8006f76:	2100      	movs	r1, #0
 8006f78:	2043      	movs	r0, #67	; 0x43
 8006f7a:	f7f9 ff0a 	bl	8000d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006f7e:	2043      	movs	r0, #67	; 0x43
 8006f80:	f7f9 ff23 	bl	8000dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006f84:	bf00      	nop
 8006f86:	3728      	adds	r7, #40	; 0x28
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	40023800 	.word	0x40023800
 8006f90:	40020000 	.word	0x40020000

08006f94 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7ff f81d 	bl	8005fe2 <USBH_LL_IncTimer>
}
 8006fa8:	bf00      	nop
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7ff f855 	bl	800606e <USBH_LL_Connect>
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7ff f85e 	bl	800609c <USBH_LL_Disconnect>
}
 8006fe0:	bf00      	nop
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	70fb      	strb	r3, [r7, #3]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007012:	4618      	mov	r0, r3
 8007014:	f7ff f80f 	bl	8006036 <USBH_LL_PortEnabled>
}
 8007018:	bf00      	nop
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800702e:	4618      	mov	r0, r3
 8007030:	f7ff f80f 	bl	8006052 <USBH_LL_PortDisabled>
}
 8007034:	bf00      	nop
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800704a:	2b01      	cmp	r3, #1
 800704c:	d12a      	bne.n	80070a4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800704e:	4a18      	ldr	r2, [pc, #96]	; (80070b0 <USBH_LL_Init+0x74>)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a15      	ldr	r2, [pc, #84]	; (80070b0 <USBH_LL_Init+0x74>)
 800705a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800705e:	4b14      	ldr	r3, [pc, #80]	; (80070b0 <USBH_LL_Init+0x74>)
 8007060:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007064:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007066:	4b12      	ldr	r3, [pc, #72]	; (80070b0 <USBH_LL_Init+0x74>)
 8007068:	2208      	movs	r2, #8
 800706a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800706c:	4b10      	ldr	r3, [pc, #64]	; (80070b0 <USBH_LL_Init+0x74>)
 800706e:	2201      	movs	r2, #1
 8007070:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007072:	4b0f      	ldr	r3, [pc, #60]	; (80070b0 <USBH_LL_Init+0x74>)
 8007074:	2200      	movs	r2, #0
 8007076:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007078:	4b0d      	ldr	r3, [pc, #52]	; (80070b0 <USBH_LL_Init+0x74>)
 800707a:	2202      	movs	r2, #2
 800707c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800707e:	4b0c      	ldr	r3, [pc, #48]	; (80070b0 <USBH_LL_Init+0x74>)
 8007080:	2200      	movs	r2, #0
 8007082:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007084:	480a      	ldr	r0, [pc, #40]	; (80070b0 <USBH_LL_Init+0x74>)
 8007086:	f7fa f83f 	bl	8001108 <HAL_HCD_Init>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d001      	beq.n	8007094 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007090:	f7f9 fb48 	bl	8000724 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007094:	4806      	ldr	r0, [pc, #24]	; (80070b0 <USBH_LL_Init+0x74>)
 8007096:	f7fa fc22 	bl	80018de <HAL_HCD_GetCurrentFrame>
 800709a:	4603      	mov	r3, r0
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7fe ff90 	bl	8005fc4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	20000518 	.word	0x20000518

080070b4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fa fb91 	bl	80017f2 <HAL_HCD_Start>
 80070d0:	4603      	mov	r3, r0
 80070d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80070d4:	7bfb      	ldrb	r3, [r7, #15]
 80070d6:	4618      	mov	r0, r3
 80070d8:	f000 f952 	bl	8007380 <USBH_Get_USB_Status>
 80070dc:	4603      	mov	r3, r0
 80070de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007100:	4618      	mov	r0, r3
 8007102:	f7fa fb99 	bl	8001838 <HAL_HCD_Stop>
 8007106:	4603      	mov	r3, r0
 8007108:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800710a:	7bfb      	ldrb	r3, [r7, #15]
 800710c:	4618      	mov	r0, r3
 800710e:	f000 f937 	bl	8007380 <USBH_Get_USB_Status>
 8007112:	4603      	mov	r3, r0
 8007114:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007116:	7bbb      	ldrb	r3, [r7, #14]
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007128:	2301      	movs	r3, #1
 800712a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007132:	4618      	mov	r0, r3
 8007134:	f7fa fbe1 	bl	80018fa <HAL_HCD_GetCurrentSpeed>
 8007138:	4603      	mov	r3, r0
 800713a:	2b02      	cmp	r3, #2
 800713c:	d00c      	beq.n	8007158 <USBH_LL_GetSpeed+0x38>
 800713e:	2b02      	cmp	r3, #2
 8007140:	d80d      	bhi.n	800715e <USBH_LL_GetSpeed+0x3e>
 8007142:	2b00      	cmp	r3, #0
 8007144:	d002      	beq.n	800714c <USBH_LL_GetSpeed+0x2c>
 8007146:	2b01      	cmp	r3, #1
 8007148:	d003      	beq.n	8007152 <USBH_LL_GetSpeed+0x32>
 800714a:	e008      	b.n	800715e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800714c:	2300      	movs	r3, #0
 800714e:	73fb      	strb	r3, [r7, #15]
    break;
 8007150:	e008      	b.n	8007164 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007152:	2301      	movs	r3, #1
 8007154:	73fb      	strb	r3, [r7, #15]
    break;
 8007156:	e005      	b.n	8007164 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007158:	2302      	movs	r3, #2
 800715a:	73fb      	strb	r3, [r7, #15]
    break;
 800715c:	e002      	b.n	8007164 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800715e:	2301      	movs	r3, #1
 8007160:	73fb      	strb	r3, [r7, #15]
    break;
 8007162:	bf00      	nop
  }
  return  speed;
 8007164:	7bfb      	ldrb	r3, [r7, #15]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007184:	4618      	mov	r0, r3
 8007186:	f7fa fb74 	bl	8001872 <HAL_HCD_ResetPort>
 800718a:	4603      	mov	r3, r0
 800718c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800718e:	7bfb      	ldrb	r3, [r7, #15]
 8007190:	4618      	mov	r0, r3
 8007192:	f000 f8f5 	bl	8007380 <USBH_Get_USB_Status>
 8007196:	4603      	mov	r3, r0
 8007198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800719a:	7bbb      	ldrb	r3, [r7, #14]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	460b      	mov	r3, r1
 80071ae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80071b6:	78fa      	ldrb	r2, [r7, #3]
 80071b8:	4611      	mov	r1, r2
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fa fb7b 	bl	80018b6 <HAL_HCD_HC_GetXferCount>
 80071c0:	4603      	mov	r3, r0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80071ca:	b590      	push	{r4, r7, lr}
 80071cc:	b089      	sub	sp, #36	; 0x24
 80071ce:	af04      	add	r7, sp, #16
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	4608      	mov	r0, r1
 80071d4:	4611      	mov	r1, r2
 80071d6:	461a      	mov	r2, r3
 80071d8:	4603      	mov	r3, r0
 80071da:	70fb      	strb	r3, [r7, #3]
 80071dc:	460b      	mov	r3, r1
 80071de:	70bb      	strb	r3, [r7, #2]
 80071e0:	4613      	mov	r3, r2
 80071e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80071f2:	787c      	ldrb	r4, [r7, #1]
 80071f4:	78ba      	ldrb	r2, [r7, #2]
 80071f6:	78f9      	ldrb	r1, [r7, #3]
 80071f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80071fa:	9302      	str	r3, [sp, #8]
 80071fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007200:	9301      	str	r3, [sp, #4]
 8007202:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	4623      	mov	r3, r4
 800720a:	f7f9 ffdf 	bl	80011cc <HAL_HCD_HC_Init>
 800720e:	4603      	mov	r3, r0
 8007210:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007212:	7bfb      	ldrb	r3, [r7, #15]
 8007214:	4618      	mov	r0, r3
 8007216:	f000 f8b3 	bl	8007380 <USBH_Get_USB_Status>
 800721a:	4603      	mov	r3, r0
 800721c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800721e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	bd90      	pop	{r4, r7, pc}

08007228 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	460b      	mov	r3, r1
 8007232:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007238:	2300      	movs	r3, #0
 800723a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007242:	78fa      	ldrb	r2, [r7, #3]
 8007244:	4611      	mov	r1, r2
 8007246:	4618      	mov	r0, r3
 8007248:	f7fa f84f 	bl	80012ea <HAL_HCD_HC_Halt>
 800724c:	4603      	mov	r3, r0
 800724e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007250:	7bfb      	ldrb	r3, [r7, #15]
 8007252:	4618      	mov	r0, r3
 8007254:	f000 f894 	bl	8007380 <USBH_Get_USB_Status>
 8007258:	4603      	mov	r3, r0
 800725a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800725c:	7bbb      	ldrb	r3, [r7, #14]
}
 800725e:	4618      	mov	r0, r3
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007266:	b590      	push	{r4, r7, lr}
 8007268:	b089      	sub	sp, #36	; 0x24
 800726a:	af04      	add	r7, sp, #16
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	4608      	mov	r0, r1
 8007270:	4611      	mov	r1, r2
 8007272:	461a      	mov	r2, r3
 8007274:	4603      	mov	r3, r0
 8007276:	70fb      	strb	r3, [r7, #3]
 8007278:	460b      	mov	r3, r1
 800727a:	70bb      	strb	r3, [r7, #2]
 800727c:	4613      	mov	r3, r2
 800727e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800728e:	787c      	ldrb	r4, [r7, #1]
 8007290:	78ba      	ldrb	r2, [r7, #2]
 8007292:	78f9      	ldrb	r1, [r7, #3]
 8007294:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007298:	9303      	str	r3, [sp, #12]
 800729a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800729c:	9302      	str	r3, [sp, #8]
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	9301      	str	r3, [sp, #4]
 80072a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	4623      	mov	r3, r4
 80072aa:	f7fa f841 	bl	8001330 <HAL_HCD_HC_SubmitRequest>
 80072ae:	4603      	mov	r3, r0
 80072b0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80072b2:	7bfb      	ldrb	r3, [r7, #15]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 f863 	bl	8007380 <USBH_Get_USB_Status>
 80072ba:	4603      	mov	r3, r0
 80072bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072be:	7bbb      	ldrb	r3, [r7, #14]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd90      	pop	{r4, r7, pc}

080072c8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	460b      	mov	r3, r1
 80072d2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80072da:	78fa      	ldrb	r2, [r7, #3]
 80072dc:	4611      	mov	r1, r2
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fa fad5 	bl	800188e <HAL_HCD_HC_GetURBState>
 80072e4:	4603      	mov	r3, r0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b082      	sub	sp, #8
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	460b      	mov	r3, r1
 80072f8:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 80072fa:	20c8      	movs	r0, #200	; 0xc8
 80072fc:	f7f9 fc4a 	bl	8000b94 <HAL_Delay>
  return USBH_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800730a:	b480      	push	{r7}
 800730c:	b085      	sub	sp, #20
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	460b      	mov	r3, r1
 8007314:	70fb      	strb	r3, [r7, #3]
 8007316:	4613      	mov	r3, r2
 8007318:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007320:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007322:	78fb      	ldrb	r3, [r7, #3]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	212c      	movs	r1, #44	; 0x2c
 8007328:	fb01 f303 	mul.w	r3, r1, r3
 800732c:	4413      	add	r3, r2
 800732e:	333b      	adds	r3, #59	; 0x3b
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d009      	beq.n	800734a <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007336:	78fb      	ldrb	r3, [r7, #3]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	212c      	movs	r1, #44	; 0x2c
 800733c:	fb01 f303 	mul.w	r3, r1, r3
 8007340:	4413      	add	r3, r2
 8007342:	3354      	adds	r3, #84	; 0x54
 8007344:	78ba      	ldrb	r2, [r7, #2]
 8007346:	701a      	strb	r2, [r3, #0]
 8007348:	e008      	b.n	800735c <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800734a:	78fb      	ldrb	r3, [r7, #3]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	212c      	movs	r1, #44	; 0x2c
 8007350:	fb01 f303 	mul.w	r3, r1, r3
 8007354:	4413      	add	r3, r2
 8007356:	3355      	adds	r3, #85	; 0x55
 8007358:	78ba      	ldrb	r2, [r7, #2]
 800735a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr

0800736a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b082      	sub	sp, #8
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7f9 fc0e 	bl	8000b94 <HAL_Delay>
}
 8007378:	bf00      	nop
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	4603      	mov	r3, r0
 8007388:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800738e:	79fb      	ldrb	r3, [r7, #7]
 8007390:	2b03      	cmp	r3, #3
 8007392:	d817      	bhi.n	80073c4 <USBH_Get_USB_Status+0x44>
 8007394:	a201      	add	r2, pc, #4	; (adr r2, 800739c <USBH_Get_USB_Status+0x1c>)
 8007396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739a:	bf00      	nop
 800739c:	080073ad 	.word	0x080073ad
 80073a0:	080073b3 	.word	0x080073b3
 80073a4:	080073b9 	.word	0x080073b9
 80073a8:	080073bf 	.word	0x080073bf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80073ac:	2300      	movs	r3, #0
 80073ae:	73fb      	strb	r3, [r7, #15]
    break;
 80073b0:	e00b      	b.n	80073ca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80073b2:	2302      	movs	r3, #2
 80073b4:	73fb      	strb	r3, [r7, #15]
    break;
 80073b6:	e008      	b.n	80073ca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80073b8:	2301      	movs	r3, #1
 80073ba:	73fb      	strb	r3, [r7, #15]
    break;
 80073bc:	e005      	b.n	80073ca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80073be:	2302      	movs	r3, #2
 80073c0:	73fb      	strb	r3, [r7, #15]
    break;
 80073c2:	e002      	b.n	80073ca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80073c4:	2302      	movs	r3, #2
 80073c6:	73fb      	strb	r3, [r7, #15]
    break;
 80073c8:	bf00      	nop
  }
  return usb_status;
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <malloc>:
 80073d8:	4b02      	ldr	r3, [pc, #8]	; (80073e4 <malloc+0xc>)
 80073da:	4601      	mov	r1, r0
 80073dc:	6818      	ldr	r0, [r3, #0]
 80073de:	f000 b82b 	b.w	8007438 <_malloc_r>
 80073e2:	bf00      	nop
 80073e4:	20000084 	.word	0x20000084

080073e8 <free>:
 80073e8:	4b02      	ldr	r3, [pc, #8]	; (80073f4 <free+0xc>)
 80073ea:	4601      	mov	r1, r0
 80073ec:	6818      	ldr	r0, [r3, #0]
 80073ee:	f000 ba53 	b.w	8007898 <_free_r>
 80073f2:	bf00      	nop
 80073f4:	20000084 	.word	0x20000084

080073f8 <sbrk_aligned>:
 80073f8:	b570      	push	{r4, r5, r6, lr}
 80073fa:	4e0e      	ldr	r6, [pc, #56]	; (8007434 <sbrk_aligned+0x3c>)
 80073fc:	460c      	mov	r4, r1
 80073fe:	6831      	ldr	r1, [r6, #0]
 8007400:	4605      	mov	r5, r0
 8007402:	b911      	cbnz	r1, 800740a <sbrk_aligned+0x12>
 8007404:	f000 f9f8 	bl	80077f8 <_sbrk_r>
 8007408:	6030      	str	r0, [r6, #0]
 800740a:	4621      	mov	r1, r4
 800740c:	4628      	mov	r0, r5
 800740e:	f000 f9f3 	bl	80077f8 <_sbrk_r>
 8007412:	1c43      	adds	r3, r0, #1
 8007414:	d00a      	beq.n	800742c <sbrk_aligned+0x34>
 8007416:	1cc4      	adds	r4, r0, #3
 8007418:	f024 0403 	bic.w	r4, r4, #3
 800741c:	42a0      	cmp	r0, r4
 800741e:	d007      	beq.n	8007430 <sbrk_aligned+0x38>
 8007420:	1a21      	subs	r1, r4, r0
 8007422:	4628      	mov	r0, r5
 8007424:	f000 f9e8 	bl	80077f8 <_sbrk_r>
 8007428:	3001      	adds	r0, #1
 800742a:	d101      	bne.n	8007430 <sbrk_aligned+0x38>
 800742c:	f04f 34ff 	mov.w	r4, #4294967295
 8007430:	4620      	mov	r0, r4
 8007432:	bd70      	pop	{r4, r5, r6, pc}
 8007434:	20000820 	.word	0x20000820

08007438 <_malloc_r>:
 8007438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800743c:	1ccd      	adds	r5, r1, #3
 800743e:	f025 0503 	bic.w	r5, r5, #3
 8007442:	3508      	adds	r5, #8
 8007444:	2d0c      	cmp	r5, #12
 8007446:	bf38      	it	cc
 8007448:	250c      	movcc	r5, #12
 800744a:	2d00      	cmp	r5, #0
 800744c:	4607      	mov	r7, r0
 800744e:	db01      	blt.n	8007454 <_malloc_r+0x1c>
 8007450:	42a9      	cmp	r1, r5
 8007452:	d905      	bls.n	8007460 <_malloc_r+0x28>
 8007454:	230c      	movs	r3, #12
 8007456:	603b      	str	r3, [r7, #0]
 8007458:	2600      	movs	r6, #0
 800745a:	4630      	mov	r0, r6
 800745c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007460:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007534 <_malloc_r+0xfc>
 8007464:	f000 f868 	bl	8007538 <__malloc_lock>
 8007468:	f8d8 3000 	ldr.w	r3, [r8]
 800746c:	461c      	mov	r4, r3
 800746e:	bb5c      	cbnz	r4, 80074c8 <_malloc_r+0x90>
 8007470:	4629      	mov	r1, r5
 8007472:	4638      	mov	r0, r7
 8007474:	f7ff ffc0 	bl	80073f8 <sbrk_aligned>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	4604      	mov	r4, r0
 800747c:	d155      	bne.n	800752a <_malloc_r+0xf2>
 800747e:	f8d8 4000 	ldr.w	r4, [r8]
 8007482:	4626      	mov	r6, r4
 8007484:	2e00      	cmp	r6, #0
 8007486:	d145      	bne.n	8007514 <_malloc_r+0xdc>
 8007488:	2c00      	cmp	r4, #0
 800748a:	d048      	beq.n	800751e <_malloc_r+0xe6>
 800748c:	6823      	ldr	r3, [r4, #0]
 800748e:	4631      	mov	r1, r6
 8007490:	4638      	mov	r0, r7
 8007492:	eb04 0903 	add.w	r9, r4, r3
 8007496:	f000 f9af 	bl	80077f8 <_sbrk_r>
 800749a:	4581      	cmp	r9, r0
 800749c:	d13f      	bne.n	800751e <_malloc_r+0xe6>
 800749e:	6821      	ldr	r1, [r4, #0]
 80074a0:	1a6d      	subs	r5, r5, r1
 80074a2:	4629      	mov	r1, r5
 80074a4:	4638      	mov	r0, r7
 80074a6:	f7ff ffa7 	bl	80073f8 <sbrk_aligned>
 80074aa:	3001      	adds	r0, #1
 80074ac:	d037      	beq.n	800751e <_malloc_r+0xe6>
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	442b      	add	r3, r5
 80074b2:	6023      	str	r3, [r4, #0]
 80074b4:	f8d8 3000 	ldr.w	r3, [r8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d038      	beq.n	800752e <_malloc_r+0xf6>
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	42a2      	cmp	r2, r4
 80074c0:	d12b      	bne.n	800751a <_malloc_r+0xe2>
 80074c2:	2200      	movs	r2, #0
 80074c4:	605a      	str	r2, [r3, #4]
 80074c6:	e00f      	b.n	80074e8 <_malloc_r+0xb0>
 80074c8:	6822      	ldr	r2, [r4, #0]
 80074ca:	1b52      	subs	r2, r2, r5
 80074cc:	d41f      	bmi.n	800750e <_malloc_r+0xd6>
 80074ce:	2a0b      	cmp	r2, #11
 80074d0:	d917      	bls.n	8007502 <_malloc_r+0xca>
 80074d2:	1961      	adds	r1, r4, r5
 80074d4:	42a3      	cmp	r3, r4
 80074d6:	6025      	str	r5, [r4, #0]
 80074d8:	bf18      	it	ne
 80074da:	6059      	strne	r1, [r3, #4]
 80074dc:	6863      	ldr	r3, [r4, #4]
 80074de:	bf08      	it	eq
 80074e0:	f8c8 1000 	streq.w	r1, [r8]
 80074e4:	5162      	str	r2, [r4, r5]
 80074e6:	604b      	str	r3, [r1, #4]
 80074e8:	4638      	mov	r0, r7
 80074ea:	f104 060b 	add.w	r6, r4, #11
 80074ee:	f000 f829 	bl	8007544 <__malloc_unlock>
 80074f2:	f026 0607 	bic.w	r6, r6, #7
 80074f6:	1d23      	adds	r3, r4, #4
 80074f8:	1af2      	subs	r2, r6, r3
 80074fa:	d0ae      	beq.n	800745a <_malloc_r+0x22>
 80074fc:	1b9b      	subs	r3, r3, r6
 80074fe:	50a3      	str	r3, [r4, r2]
 8007500:	e7ab      	b.n	800745a <_malloc_r+0x22>
 8007502:	42a3      	cmp	r3, r4
 8007504:	6862      	ldr	r2, [r4, #4]
 8007506:	d1dd      	bne.n	80074c4 <_malloc_r+0x8c>
 8007508:	f8c8 2000 	str.w	r2, [r8]
 800750c:	e7ec      	b.n	80074e8 <_malloc_r+0xb0>
 800750e:	4623      	mov	r3, r4
 8007510:	6864      	ldr	r4, [r4, #4]
 8007512:	e7ac      	b.n	800746e <_malloc_r+0x36>
 8007514:	4634      	mov	r4, r6
 8007516:	6876      	ldr	r6, [r6, #4]
 8007518:	e7b4      	b.n	8007484 <_malloc_r+0x4c>
 800751a:	4613      	mov	r3, r2
 800751c:	e7cc      	b.n	80074b8 <_malloc_r+0x80>
 800751e:	230c      	movs	r3, #12
 8007520:	603b      	str	r3, [r7, #0]
 8007522:	4638      	mov	r0, r7
 8007524:	f000 f80e 	bl	8007544 <__malloc_unlock>
 8007528:	e797      	b.n	800745a <_malloc_r+0x22>
 800752a:	6025      	str	r5, [r4, #0]
 800752c:	e7dc      	b.n	80074e8 <_malloc_r+0xb0>
 800752e:	605b      	str	r3, [r3, #4]
 8007530:	deff      	udf	#255	; 0xff
 8007532:	bf00      	nop
 8007534:	2000081c 	.word	0x2000081c

08007538 <__malloc_lock>:
 8007538:	4801      	ldr	r0, [pc, #4]	; (8007540 <__malloc_lock+0x8>)
 800753a:	f000 b9aa 	b.w	8007892 <__retarget_lock_acquire_recursive>
 800753e:	bf00      	nop
 8007540:	20000964 	.word	0x20000964

08007544 <__malloc_unlock>:
 8007544:	4801      	ldr	r0, [pc, #4]	; (800754c <__malloc_unlock+0x8>)
 8007546:	f000 b9a5 	b.w	8007894 <__retarget_lock_release_recursive>
 800754a:	bf00      	nop
 800754c:	20000964 	.word	0x20000964

08007550 <std>:
 8007550:	2300      	movs	r3, #0
 8007552:	b510      	push	{r4, lr}
 8007554:	4604      	mov	r4, r0
 8007556:	e9c0 3300 	strd	r3, r3, [r0]
 800755a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800755e:	6083      	str	r3, [r0, #8]
 8007560:	8181      	strh	r1, [r0, #12]
 8007562:	6643      	str	r3, [r0, #100]	; 0x64
 8007564:	81c2      	strh	r2, [r0, #14]
 8007566:	6183      	str	r3, [r0, #24]
 8007568:	4619      	mov	r1, r3
 800756a:	2208      	movs	r2, #8
 800756c:	305c      	adds	r0, #92	; 0x5c
 800756e:	f000 f906 	bl	800777e <memset>
 8007572:	4b0d      	ldr	r3, [pc, #52]	; (80075a8 <std+0x58>)
 8007574:	6263      	str	r3, [r4, #36]	; 0x24
 8007576:	4b0d      	ldr	r3, [pc, #52]	; (80075ac <std+0x5c>)
 8007578:	62a3      	str	r3, [r4, #40]	; 0x28
 800757a:	4b0d      	ldr	r3, [pc, #52]	; (80075b0 <std+0x60>)
 800757c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800757e:	4b0d      	ldr	r3, [pc, #52]	; (80075b4 <std+0x64>)
 8007580:	6323      	str	r3, [r4, #48]	; 0x30
 8007582:	4b0d      	ldr	r3, [pc, #52]	; (80075b8 <std+0x68>)
 8007584:	6224      	str	r4, [r4, #32]
 8007586:	429c      	cmp	r4, r3
 8007588:	d006      	beq.n	8007598 <std+0x48>
 800758a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800758e:	4294      	cmp	r4, r2
 8007590:	d002      	beq.n	8007598 <std+0x48>
 8007592:	33d0      	adds	r3, #208	; 0xd0
 8007594:	429c      	cmp	r4, r3
 8007596:	d105      	bne.n	80075a4 <std+0x54>
 8007598:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800759c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075a0:	f000 b976 	b.w	8007890 <__retarget_lock_init_recursive>
 80075a4:	bd10      	pop	{r4, pc}
 80075a6:	bf00      	nop
 80075a8:	080076f9 	.word	0x080076f9
 80075ac:	0800771b 	.word	0x0800771b
 80075b0:	08007753 	.word	0x08007753
 80075b4:	08007777 	.word	0x08007777
 80075b8:	20000824 	.word	0x20000824

080075bc <stdio_exit_handler>:
 80075bc:	4a02      	ldr	r2, [pc, #8]	; (80075c8 <stdio_exit_handler+0xc>)
 80075be:	4903      	ldr	r1, [pc, #12]	; (80075cc <stdio_exit_handler+0x10>)
 80075c0:	4803      	ldr	r0, [pc, #12]	; (80075d0 <stdio_exit_handler+0x14>)
 80075c2:	f000 b869 	b.w	8007698 <_fwalk_sglue>
 80075c6:	bf00      	nop
 80075c8:	2000002c 	.word	0x2000002c
 80075cc:	08007fe5 	.word	0x08007fe5
 80075d0:	20000038 	.word	0x20000038

080075d4 <cleanup_stdio>:
 80075d4:	6841      	ldr	r1, [r0, #4]
 80075d6:	4b0c      	ldr	r3, [pc, #48]	; (8007608 <cleanup_stdio+0x34>)
 80075d8:	4299      	cmp	r1, r3
 80075da:	b510      	push	{r4, lr}
 80075dc:	4604      	mov	r4, r0
 80075de:	d001      	beq.n	80075e4 <cleanup_stdio+0x10>
 80075e0:	f000 fd00 	bl	8007fe4 <_fflush_r>
 80075e4:	68a1      	ldr	r1, [r4, #8]
 80075e6:	4b09      	ldr	r3, [pc, #36]	; (800760c <cleanup_stdio+0x38>)
 80075e8:	4299      	cmp	r1, r3
 80075ea:	d002      	beq.n	80075f2 <cleanup_stdio+0x1e>
 80075ec:	4620      	mov	r0, r4
 80075ee:	f000 fcf9 	bl	8007fe4 <_fflush_r>
 80075f2:	68e1      	ldr	r1, [r4, #12]
 80075f4:	4b06      	ldr	r3, [pc, #24]	; (8007610 <cleanup_stdio+0x3c>)
 80075f6:	4299      	cmp	r1, r3
 80075f8:	d004      	beq.n	8007604 <cleanup_stdio+0x30>
 80075fa:	4620      	mov	r0, r4
 80075fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007600:	f000 bcf0 	b.w	8007fe4 <_fflush_r>
 8007604:	bd10      	pop	{r4, pc}
 8007606:	bf00      	nop
 8007608:	20000824 	.word	0x20000824
 800760c:	2000088c 	.word	0x2000088c
 8007610:	200008f4 	.word	0x200008f4

08007614 <global_stdio_init.part.0>:
 8007614:	b510      	push	{r4, lr}
 8007616:	4b0b      	ldr	r3, [pc, #44]	; (8007644 <global_stdio_init.part.0+0x30>)
 8007618:	4c0b      	ldr	r4, [pc, #44]	; (8007648 <global_stdio_init.part.0+0x34>)
 800761a:	4a0c      	ldr	r2, [pc, #48]	; (800764c <global_stdio_init.part.0+0x38>)
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	4620      	mov	r0, r4
 8007620:	2200      	movs	r2, #0
 8007622:	2104      	movs	r1, #4
 8007624:	f7ff ff94 	bl	8007550 <std>
 8007628:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800762c:	2201      	movs	r2, #1
 800762e:	2109      	movs	r1, #9
 8007630:	f7ff ff8e 	bl	8007550 <std>
 8007634:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007638:	2202      	movs	r2, #2
 800763a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800763e:	2112      	movs	r1, #18
 8007640:	f7ff bf86 	b.w	8007550 <std>
 8007644:	2000095c 	.word	0x2000095c
 8007648:	20000824 	.word	0x20000824
 800764c:	080075bd 	.word	0x080075bd

08007650 <__sfp_lock_acquire>:
 8007650:	4801      	ldr	r0, [pc, #4]	; (8007658 <__sfp_lock_acquire+0x8>)
 8007652:	f000 b91e 	b.w	8007892 <__retarget_lock_acquire_recursive>
 8007656:	bf00      	nop
 8007658:	20000965 	.word	0x20000965

0800765c <__sfp_lock_release>:
 800765c:	4801      	ldr	r0, [pc, #4]	; (8007664 <__sfp_lock_release+0x8>)
 800765e:	f000 b919 	b.w	8007894 <__retarget_lock_release_recursive>
 8007662:	bf00      	nop
 8007664:	20000965 	.word	0x20000965

08007668 <__sinit>:
 8007668:	b510      	push	{r4, lr}
 800766a:	4604      	mov	r4, r0
 800766c:	f7ff fff0 	bl	8007650 <__sfp_lock_acquire>
 8007670:	6a23      	ldr	r3, [r4, #32]
 8007672:	b11b      	cbz	r3, 800767c <__sinit+0x14>
 8007674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007678:	f7ff bff0 	b.w	800765c <__sfp_lock_release>
 800767c:	4b04      	ldr	r3, [pc, #16]	; (8007690 <__sinit+0x28>)
 800767e:	6223      	str	r3, [r4, #32]
 8007680:	4b04      	ldr	r3, [pc, #16]	; (8007694 <__sinit+0x2c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1f5      	bne.n	8007674 <__sinit+0xc>
 8007688:	f7ff ffc4 	bl	8007614 <global_stdio_init.part.0>
 800768c:	e7f2      	b.n	8007674 <__sinit+0xc>
 800768e:	bf00      	nop
 8007690:	080075d5 	.word	0x080075d5
 8007694:	2000095c 	.word	0x2000095c

08007698 <_fwalk_sglue>:
 8007698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800769c:	4607      	mov	r7, r0
 800769e:	4688      	mov	r8, r1
 80076a0:	4614      	mov	r4, r2
 80076a2:	2600      	movs	r6, #0
 80076a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076a8:	f1b9 0901 	subs.w	r9, r9, #1
 80076ac:	d505      	bpl.n	80076ba <_fwalk_sglue+0x22>
 80076ae:	6824      	ldr	r4, [r4, #0]
 80076b0:	2c00      	cmp	r4, #0
 80076b2:	d1f7      	bne.n	80076a4 <_fwalk_sglue+0xc>
 80076b4:	4630      	mov	r0, r6
 80076b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ba:	89ab      	ldrh	r3, [r5, #12]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d907      	bls.n	80076d0 <_fwalk_sglue+0x38>
 80076c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076c4:	3301      	adds	r3, #1
 80076c6:	d003      	beq.n	80076d0 <_fwalk_sglue+0x38>
 80076c8:	4629      	mov	r1, r5
 80076ca:	4638      	mov	r0, r7
 80076cc:	47c0      	blx	r8
 80076ce:	4306      	orrs	r6, r0
 80076d0:	3568      	adds	r5, #104	; 0x68
 80076d2:	e7e9      	b.n	80076a8 <_fwalk_sglue+0x10>

080076d4 <iprintf>:
 80076d4:	b40f      	push	{r0, r1, r2, r3}
 80076d6:	b507      	push	{r0, r1, r2, lr}
 80076d8:	4906      	ldr	r1, [pc, #24]	; (80076f4 <iprintf+0x20>)
 80076da:	ab04      	add	r3, sp, #16
 80076dc:	6808      	ldr	r0, [r1, #0]
 80076de:	f853 2b04 	ldr.w	r2, [r3], #4
 80076e2:	6881      	ldr	r1, [r0, #8]
 80076e4:	9301      	str	r3, [sp, #4]
 80076e6:	f000 f94d 	bl	8007984 <_vfiprintf_r>
 80076ea:	b003      	add	sp, #12
 80076ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80076f0:	b004      	add	sp, #16
 80076f2:	4770      	bx	lr
 80076f4:	20000084 	.word	0x20000084

080076f8 <__sread>:
 80076f8:	b510      	push	{r4, lr}
 80076fa:	460c      	mov	r4, r1
 80076fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007700:	f000 f868 	bl	80077d4 <_read_r>
 8007704:	2800      	cmp	r0, #0
 8007706:	bfab      	itete	ge
 8007708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800770a:	89a3      	ldrhlt	r3, [r4, #12]
 800770c:	181b      	addge	r3, r3, r0
 800770e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007712:	bfac      	ite	ge
 8007714:	6563      	strge	r3, [r4, #84]	; 0x54
 8007716:	81a3      	strhlt	r3, [r4, #12]
 8007718:	bd10      	pop	{r4, pc}

0800771a <__swrite>:
 800771a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800771e:	461f      	mov	r7, r3
 8007720:	898b      	ldrh	r3, [r1, #12]
 8007722:	05db      	lsls	r3, r3, #23
 8007724:	4605      	mov	r5, r0
 8007726:	460c      	mov	r4, r1
 8007728:	4616      	mov	r6, r2
 800772a:	d505      	bpl.n	8007738 <__swrite+0x1e>
 800772c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007730:	2302      	movs	r3, #2
 8007732:	2200      	movs	r2, #0
 8007734:	f000 f83c 	bl	80077b0 <_lseek_r>
 8007738:	89a3      	ldrh	r3, [r4, #12]
 800773a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800773e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007742:	81a3      	strh	r3, [r4, #12]
 8007744:	4632      	mov	r2, r6
 8007746:	463b      	mov	r3, r7
 8007748:	4628      	mov	r0, r5
 800774a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800774e:	f000 b863 	b.w	8007818 <_write_r>

08007752 <__sseek>:
 8007752:	b510      	push	{r4, lr}
 8007754:	460c      	mov	r4, r1
 8007756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800775a:	f000 f829 	bl	80077b0 <_lseek_r>
 800775e:	1c43      	adds	r3, r0, #1
 8007760:	89a3      	ldrh	r3, [r4, #12]
 8007762:	bf15      	itete	ne
 8007764:	6560      	strne	r0, [r4, #84]	; 0x54
 8007766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800776a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800776e:	81a3      	strheq	r3, [r4, #12]
 8007770:	bf18      	it	ne
 8007772:	81a3      	strhne	r3, [r4, #12]
 8007774:	bd10      	pop	{r4, pc}

08007776 <__sclose>:
 8007776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800777a:	f000 b809 	b.w	8007790 <_close_r>

0800777e <memset>:
 800777e:	4402      	add	r2, r0
 8007780:	4603      	mov	r3, r0
 8007782:	4293      	cmp	r3, r2
 8007784:	d100      	bne.n	8007788 <memset+0xa>
 8007786:	4770      	bx	lr
 8007788:	f803 1b01 	strb.w	r1, [r3], #1
 800778c:	e7f9      	b.n	8007782 <memset+0x4>
	...

08007790 <_close_r>:
 8007790:	b538      	push	{r3, r4, r5, lr}
 8007792:	4d06      	ldr	r5, [pc, #24]	; (80077ac <_close_r+0x1c>)
 8007794:	2300      	movs	r3, #0
 8007796:	4604      	mov	r4, r0
 8007798:	4608      	mov	r0, r1
 800779a:	602b      	str	r3, [r5, #0]
 800779c:	f7f9 f85d 	bl	800085a <_close>
 80077a0:	1c43      	adds	r3, r0, #1
 80077a2:	d102      	bne.n	80077aa <_close_r+0x1a>
 80077a4:	682b      	ldr	r3, [r5, #0]
 80077a6:	b103      	cbz	r3, 80077aa <_close_r+0x1a>
 80077a8:	6023      	str	r3, [r4, #0]
 80077aa:	bd38      	pop	{r3, r4, r5, pc}
 80077ac:	20000960 	.word	0x20000960

080077b0 <_lseek_r>:
 80077b0:	b538      	push	{r3, r4, r5, lr}
 80077b2:	4d07      	ldr	r5, [pc, #28]	; (80077d0 <_lseek_r+0x20>)
 80077b4:	4604      	mov	r4, r0
 80077b6:	4608      	mov	r0, r1
 80077b8:	4611      	mov	r1, r2
 80077ba:	2200      	movs	r2, #0
 80077bc:	602a      	str	r2, [r5, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	f7f9 f872 	bl	80008a8 <_lseek>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d102      	bne.n	80077ce <_lseek_r+0x1e>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	b103      	cbz	r3, 80077ce <_lseek_r+0x1e>
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	bd38      	pop	{r3, r4, r5, pc}
 80077d0:	20000960 	.word	0x20000960

080077d4 <_read_r>:
 80077d4:	b538      	push	{r3, r4, r5, lr}
 80077d6:	4d07      	ldr	r5, [pc, #28]	; (80077f4 <_read_r+0x20>)
 80077d8:	4604      	mov	r4, r0
 80077da:	4608      	mov	r0, r1
 80077dc:	4611      	mov	r1, r2
 80077de:	2200      	movs	r2, #0
 80077e0:	602a      	str	r2, [r5, #0]
 80077e2:	461a      	mov	r2, r3
 80077e4:	f7f9 f800 	bl	80007e8 <_read>
 80077e8:	1c43      	adds	r3, r0, #1
 80077ea:	d102      	bne.n	80077f2 <_read_r+0x1e>
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	b103      	cbz	r3, 80077f2 <_read_r+0x1e>
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	bd38      	pop	{r3, r4, r5, pc}
 80077f4:	20000960 	.word	0x20000960

080077f8 <_sbrk_r>:
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	4d06      	ldr	r5, [pc, #24]	; (8007814 <_sbrk_r+0x1c>)
 80077fc:	2300      	movs	r3, #0
 80077fe:	4604      	mov	r4, r0
 8007800:	4608      	mov	r0, r1
 8007802:	602b      	str	r3, [r5, #0]
 8007804:	f7f9 f85e 	bl	80008c4 <_sbrk>
 8007808:	1c43      	adds	r3, r0, #1
 800780a:	d102      	bne.n	8007812 <_sbrk_r+0x1a>
 800780c:	682b      	ldr	r3, [r5, #0]
 800780e:	b103      	cbz	r3, 8007812 <_sbrk_r+0x1a>
 8007810:	6023      	str	r3, [r4, #0]
 8007812:	bd38      	pop	{r3, r4, r5, pc}
 8007814:	20000960 	.word	0x20000960

08007818 <_write_r>:
 8007818:	b538      	push	{r3, r4, r5, lr}
 800781a:	4d07      	ldr	r5, [pc, #28]	; (8007838 <_write_r+0x20>)
 800781c:	4604      	mov	r4, r0
 800781e:	4608      	mov	r0, r1
 8007820:	4611      	mov	r1, r2
 8007822:	2200      	movs	r2, #0
 8007824:	602a      	str	r2, [r5, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	f7f8 fffb 	bl	8000822 <_write>
 800782c:	1c43      	adds	r3, r0, #1
 800782e:	d102      	bne.n	8007836 <_write_r+0x1e>
 8007830:	682b      	ldr	r3, [r5, #0]
 8007832:	b103      	cbz	r3, 8007836 <_write_r+0x1e>
 8007834:	6023      	str	r3, [r4, #0]
 8007836:	bd38      	pop	{r3, r4, r5, pc}
 8007838:	20000960 	.word	0x20000960

0800783c <__errno>:
 800783c:	4b01      	ldr	r3, [pc, #4]	; (8007844 <__errno+0x8>)
 800783e:	6818      	ldr	r0, [r3, #0]
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	20000084 	.word	0x20000084

08007848 <__libc_init_array>:
 8007848:	b570      	push	{r4, r5, r6, lr}
 800784a:	4d0d      	ldr	r5, [pc, #52]	; (8007880 <__libc_init_array+0x38>)
 800784c:	4c0d      	ldr	r4, [pc, #52]	; (8007884 <__libc_init_array+0x3c>)
 800784e:	1b64      	subs	r4, r4, r5
 8007850:	10a4      	asrs	r4, r4, #2
 8007852:	2600      	movs	r6, #0
 8007854:	42a6      	cmp	r6, r4
 8007856:	d109      	bne.n	800786c <__libc_init_array+0x24>
 8007858:	4d0b      	ldr	r5, [pc, #44]	; (8007888 <__libc_init_array+0x40>)
 800785a:	4c0c      	ldr	r4, [pc, #48]	; (800788c <__libc_init_array+0x44>)
 800785c:	f000 fd04 	bl	8008268 <_init>
 8007860:	1b64      	subs	r4, r4, r5
 8007862:	10a4      	asrs	r4, r4, #2
 8007864:	2600      	movs	r6, #0
 8007866:	42a6      	cmp	r6, r4
 8007868:	d105      	bne.n	8007876 <__libc_init_array+0x2e>
 800786a:	bd70      	pop	{r4, r5, r6, pc}
 800786c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007870:	4798      	blx	r3
 8007872:	3601      	adds	r6, #1
 8007874:	e7ee      	b.n	8007854 <__libc_init_array+0xc>
 8007876:	f855 3b04 	ldr.w	r3, [r5], #4
 800787a:	4798      	blx	r3
 800787c:	3601      	adds	r6, #1
 800787e:	e7f2      	b.n	8007866 <__libc_init_array+0x1e>
 8007880:	08008404 	.word	0x08008404
 8007884:	08008404 	.word	0x08008404
 8007888:	08008404 	.word	0x08008404
 800788c:	08008408 	.word	0x08008408

08007890 <__retarget_lock_init_recursive>:
 8007890:	4770      	bx	lr

08007892 <__retarget_lock_acquire_recursive>:
 8007892:	4770      	bx	lr

08007894 <__retarget_lock_release_recursive>:
 8007894:	4770      	bx	lr
	...

08007898 <_free_r>:
 8007898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800789a:	2900      	cmp	r1, #0
 800789c:	d044      	beq.n	8007928 <_free_r+0x90>
 800789e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078a2:	9001      	str	r0, [sp, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f1a1 0404 	sub.w	r4, r1, #4
 80078aa:	bfb8      	it	lt
 80078ac:	18e4      	addlt	r4, r4, r3
 80078ae:	f7ff fe43 	bl	8007538 <__malloc_lock>
 80078b2:	4a1e      	ldr	r2, [pc, #120]	; (800792c <_free_r+0x94>)
 80078b4:	9801      	ldr	r0, [sp, #4]
 80078b6:	6813      	ldr	r3, [r2, #0]
 80078b8:	b933      	cbnz	r3, 80078c8 <_free_r+0x30>
 80078ba:	6063      	str	r3, [r4, #4]
 80078bc:	6014      	str	r4, [r2, #0]
 80078be:	b003      	add	sp, #12
 80078c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078c4:	f7ff be3e 	b.w	8007544 <__malloc_unlock>
 80078c8:	42a3      	cmp	r3, r4
 80078ca:	d908      	bls.n	80078de <_free_r+0x46>
 80078cc:	6825      	ldr	r5, [r4, #0]
 80078ce:	1961      	adds	r1, r4, r5
 80078d0:	428b      	cmp	r3, r1
 80078d2:	bf01      	itttt	eq
 80078d4:	6819      	ldreq	r1, [r3, #0]
 80078d6:	685b      	ldreq	r3, [r3, #4]
 80078d8:	1949      	addeq	r1, r1, r5
 80078da:	6021      	streq	r1, [r4, #0]
 80078dc:	e7ed      	b.n	80078ba <_free_r+0x22>
 80078de:	461a      	mov	r2, r3
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	b10b      	cbz	r3, 80078e8 <_free_r+0x50>
 80078e4:	42a3      	cmp	r3, r4
 80078e6:	d9fa      	bls.n	80078de <_free_r+0x46>
 80078e8:	6811      	ldr	r1, [r2, #0]
 80078ea:	1855      	adds	r5, r2, r1
 80078ec:	42a5      	cmp	r5, r4
 80078ee:	d10b      	bne.n	8007908 <_free_r+0x70>
 80078f0:	6824      	ldr	r4, [r4, #0]
 80078f2:	4421      	add	r1, r4
 80078f4:	1854      	adds	r4, r2, r1
 80078f6:	42a3      	cmp	r3, r4
 80078f8:	6011      	str	r1, [r2, #0]
 80078fa:	d1e0      	bne.n	80078be <_free_r+0x26>
 80078fc:	681c      	ldr	r4, [r3, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	6053      	str	r3, [r2, #4]
 8007902:	440c      	add	r4, r1
 8007904:	6014      	str	r4, [r2, #0]
 8007906:	e7da      	b.n	80078be <_free_r+0x26>
 8007908:	d902      	bls.n	8007910 <_free_r+0x78>
 800790a:	230c      	movs	r3, #12
 800790c:	6003      	str	r3, [r0, #0]
 800790e:	e7d6      	b.n	80078be <_free_r+0x26>
 8007910:	6825      	ldr	r5, [r4, #0]
 8007912:	1961      	adds	r1, r4, r5
 8007914:	428b      	cmp	r3, r1
 8007916:	bf04      	itt	eq
 8007918:	6819      	ldreq	r1, [r3, #0]
 800791a:	685b      	ldreq	r3, [r3, #4]
 800791c:	6063      	str	r3, [r4, #4]
 800791e:	bf04      	itt	eq
 8007920:	1949      	addeq	r1, r1, r5
 8007922:	6021      	streq	r1, [r4, #0]
 8007924:	6054      	str	r4, [r2, #4]
 8007926:	e7ca      	b.n	80078be <_free_r+0x26>
 8007928:	b003      	add	sp, #12
 800792a:	bd30      	pop	{r4, r5, pc}
 800792c:	2000081c 	.word	0x2000081c

08007930 <__sfputc_r>:
 8007930:	6893      	ldr	r3, [r2, #8]
 8007932:	3b01      	subs	r3, #1
 8007934:	2b00      	cmp	r3, #0
 8007936:	b410      	push	{r4}
 8007938:	6093      	str	r3, [r2, #8]
 800793a:	da08      	bge.n	800794e <__sfputc_r+0x1e>
 800793c:	6994      	ldr	r4, [r2, #24]
 800793e:	42a3      	cmp	r3, r4
 8007940:	db01      	blt.n	8007946 <__sfputc_r+0x16>
 8007942:	290a      	cmp	r1, #10
 8007944:	d103      	bne.n	800794e <__sfputc_r+0x1e>
 8007946:	f85d 4b04 	ldr.w	r4, [sp], #4
 800794a:	f000 bb73 	b.w	8008034 <__swbuf_r>
 800794e:	6813      	ldr	r3, [r2, #0]
 8007950:	1c58      	adds	r0, r3, #1
 8007952:	6010      	str	r0, [r2, #0]
 8007954:	7019      	strb	r1, [r3, #0]
 8007956:	4608      	mov	r0, r1
 8007958:	f85d 4b04 	ldr.w	r4, [sp], #4
 800795c:	4770      	bx	lr

0800795e <__sfputs_r>:
 800795e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007960:	4606      	mov	r6, r0
 8007962:	460f      	mov	r7, r1
 8007964:	4614      	mov	r4, r2
 8007966:	18d5      	adds	r5, r2, r3
 8007968:	42ac      	cmp	r4, r5
 800796a:	d101      	bne.n	8007970 <__sfputs_r+0x12>
 800796c:	2000      	movs	r0, #0
 800796e:	e007      	b.n	8007980 <__sfputs_r+0x22>
 8007970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007974:	463a      	mov	r2, r7
 8007976:	4630      	mov	r0, r6
 8007978:	f7ff ffda 	bl	8007930 <__sfputc_r>
 800797c:	1c43      	adds	r3, r0, #1
 800797e:	d1f3      	bne.n	8007968 <__sfputs_r+0xa>
 8007980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007984 <_vfiprintf_r>:
 8007984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007988:	460d      	mov	r5, r1
 800798a:	b09d      	sub	sp, #116	; 0x74
 800798c:	4614      	mov	r4, r2
 800798e:	4698      	mov	r8, r3
 8007990:	4606      	mov	r6, r0
 8007992:	b118      	cbz	r0, 800799c <_vfiprintf_r+0x18>
 8007994:	6a03      	ldr	r3, [r0, #32]
 8007996:	b90b      	cbnz	r3, 800799c <_vfiprintf_r+0x18>
 8007998:	f7ff fe66 	bl	8007668 <__sinit>
 800799c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800799e:	07d9      	lsls	r1, r3, #31
 80079a0:	d405      	bmi.n	80079ae <_vfiprintf_r+0x2a>
 80079a2:	89ab      	ldrh	r3, [r5, #12]
 80079a4:	059a      	lsls	r2, r3, #22
 80079a6:	d402      	bmi.n	80079ae <_vfiprintf_r+0x2a>
 80079a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079aa:	f7ff ff72 	bl	8007892 <__retarget_lock_acquire_recursive>
 80079ae:	89ab      	ldrh	r3, [r5, #12]
 80079b0:	071b      	lsls	r3, r3, #28
 80079b2:	d501      	bpl.n	80079b8 <_vfiprintf_r+0x34>
 80079b4:	692b      	ldr	r3, [r5, #16]
 80079b6:	b99b      	cbnz	r3, 80079e0 <_vfiprintf_r+0x5c>
 80079b8:	4629      	mov	r1, r5
 80079ba:	4630      	mov	r0, r6
 80079bc:	f000 fb78 	bl	80080b0 <__swsetup_r>
 80079c0:	b170      	cbz	r0, 80079e0 <_vfiprintf_r+0x5c>
 80079c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079c4:	07dc      	lsls	r4, r3, #31
 80079c6:	d504      	bpl.n	80079d2 <_vfiprintf_r+0x4e>
 80079c8:	f04f 30ff 	mov.w	r0, #4294967295
 80079cc:	b01d      	add	sp, #116	; 0x74
 80079ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d2:	89ab      	ldrh	r3, [r5, #12]
 80079d4:	0598      	lsls	r0, r3, #22
 80079d6:	d4f7      	bmi.n	80079c8 <_vfiprintf_r+0x44>
 80079d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079da:	f7ff ff5b 	bl	8007894 <__retarget_lock_release_recursive>
 80079de:	e7f3      	b.n	80079c8 <_vfiprintf_r+0x44>
 80079e0:	2300      	movs	r3, #0
 80079e2:	9309      	str	r3, [sp, #36]	; 0x24
 80079e4:	2320      	movs	r3, #32
 80079e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80079ee:	2330      	movs	r3, #48	; 0x30
 80079f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007ba4 <_vfiprintf_r+0x220>
 80079f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079f8:	f04f 0901 	mov.w	r9, #1
 80079fc:	4623      	mov	r3, r4
 80079fe:	469a      	mov	sl, r3
 8007a00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a04:	b10a      	cbz	r2, 8007a0a <_vfiprintf_r+0x86>
 8007a06:	2a25      	cmp	r2, #37	; 0x25
 8007a08:	d1f9      	bne.n	80079fe <_vfiprintf_r+0x7a>
 8007a0a:	ebba 0b04 	subs.w	fp, sl, r4
 8007a0e:	d00b      	beq.n	8007a28 <_vfiprintf_r+0xa4>
 8007a10:	465b      	mov	r3, fp
 8007a12:	4622      	mov	r2, r4
 8007a14:	4629      	mov	r1, r5
 8007a16:	4630      	mov	r0, r6
 8007a18:	f7ff ffa1 	bl	800795e <__sfputs_r>
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	f000 80a9 	beq.w	8007b74 <_vfiprintf_r+0x1f0>
 8007a22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a24:	445a      	add	r2, fp
 8007a26:	9209      	str	r2, [sp, #36]	; 0x24
 8007a28:	f89a 3000 	ldrb.w	r3, [sl]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 80a1 	beq.w	8007b74 <_vfiprintf_r+0x1f0>
 8007a32:	2300      	movs	r3, #0
 8007a34:	f04f 32ff 	mov.w	r2, #4294967295
 8007a38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a3c:	f10a 0a01 	add.w	sl, sl, #1
 8007a40:	9304      	str	r3, [sp, #16]
 8007a42:	9307      	str	r3, [sp, #28]
 8007a44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a48:	931a      	str	r3, [sp, #104]	; 0x68
 8007a4a:	4654      	mov	r4, sl
 8007a4c:	2205      	movs	r2, #5
 8007a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a52:	4854      	ldr	r0, [pc, #336]	; (8007ba4 <_vfiprintf_r+0x220>)
 8007a54:	f7f8 fbc4 	bl	80001e0 <memchr>
 8007a58:	9a04      	ldr	r2, [sp, #16]
 8007a5a:	b9d8      	cbnz	r0, 8007a94 <_vfiprintf_r+0x110>
 8007a5c:	06d1      	lsls	r1, r2, #27
 8007a5e:	bf44      	itt	mi
 8007a60:	2320      	movmi	r3, #32
 8007a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a66:	0713      	lsls	r3, r2, #28
 8007a68:	bf44      	itt	mi
 8007a6a:	232b      	movmi	r3, #43	; 0x2b
 8007a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a70:	f89a 3000 	ldrb.w	r3, [sl]
 8007a74:	2b2a      	cmp	r3, #42	; 0x2a
 8007a76:	d015      	beq.n	8007aa4 <_vfiprintf_r+0x120>
 8007a78:	9a07      	ldr	r2, [sp, #28]
 8007a7a:	4654      	mov	r4, sl
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	f04f 0c0a 	mov.w	ip, #10
 8007a82:	4621      	mov	r1, r4
 8007a84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a88:	3b30      	subs	r3, #48	; 0x30
 8007a8a:	2b09      	cmp	r3, #9
 8007a8c:	d94d      	bls.n	8007b2a <_vfiprintf_r+0x1a6>
 8007a8e:	b1b0      	cbz	r0, 8007abe <_vfiprintf_r+0x13a>
 8007a90:	9207      	str	r2, [sp, #28]
 8007a92:	e014      	b.n	8007abe <_vfiprintf_r+0x13a>
 8007a94:	eba0 0308 	sub.w	r3, r0, r8
 8007a98:	fa09 f303 	lsl.w	r3, r9, r3
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	9304      	str	r3, [sp, #16]
 8007aa0:	46a2      	mov	sl, r4
 8007aa2:	e7d2      	b.n	8007a4a <_vfiprintf_r+0xc6>
 8007aa4:	9b03      	ldr	r3, [sp, #12]
 8007aa6:	1d19      	adds	r1, r3, #4
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	9103      	str	r1, [sp, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	bfbb      	ittet	lt
 8007ab0:	425b      	neglt	r3, r3
 8007ab2:	f042 0202 	orrlt.w	r2, r2, #2
 8007ab6:	9307      	strge	r3, [sp, #28]
 8007ab8:	9307      	strlt	r3, [sp, #28]
 8007aba:	bfb8      	it	lt
 8007abc:	9204      	strlt	r2, [sp, #16]
 8007abe:	7823      	ldrb	r3, [r4, #0]
 8007ac0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ac2:	d10c      	bne.n	8007ade <_vfiprintf_r+0x15a>
 8007ac4:	7863      	ldrb	r3, [r4, #1]
 8007ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ac8:	d134      	bne.n	8007b34 <_vfiprintf_r+0x1b0>
 8007aca:	9b03      	ldr	r3, [sp, #12]
 8007acc:	1d1a      	adds	r2, r3, #4
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	9203      	str	r2, [sp, #12]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	bfb8      	it	lt
 8007ad6:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ada:	3402      	adds	r4, #2
 8007adc:	9305      	str	r3, [sp, #20]
 8007ade:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007bb4 <_vfiprintf_r+0x230>
 8007ae2:	7821      	ldrb	r1, [r4, #0]
 8007ae4:	2203      	movs	r2, #3
 8007ae6:	4650      	mov	r0, sl
 8007ae8:	f7f8 fb7a 	bl	80001e0 <memchr>
 8007aec:	b138      	cbz	r0, 8007afe <_vfiprintf_r+0x17a>
 8007aee:	9b04      	ldr	r3, [sp, #16]
 8007af0:	eba0 000a 	sub.w	r0, r0, sl
 8007af4:	2240      	movs	r2, #64	; 0x40
 8007af6:	4082      	lsls	r2, r0
 8007af8:	4313      	orrs	r3, r2
 8007afa:	3401      	adds	r4, #1
 8007afc:	9304      	str	r3, [sp, #16]
 8007afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b02:	4829      	ldr	r0, [pc, #164]	; (8007ba8 <_vfiprintf_r+0x224>)
 8007b04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b08:	2206      	movs	r2, #6
 8007b0a:	f7f8 fb69 	bl	80001e0 <memchr>
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	d03f      	beq.n	8007b92 <_vfiprintf_r+0x20e>
 8007b12:	4b26      	ldr	r3, [pc, #152]	; (8007bac <_vfiprintf_r+0x228>)
 8007b14:	bb1b      	cbnz	r3, 8007b5e <_vfiprintf_r+0x1da>
 8007b16:	9b03      	ldr	r3, [sp, #12]
 8007b18:	3307      	adds	r3, #7
 8007b1a:	f023 0307 	bic.w	r3, r3, #7
 8007b1e:	3308      	adds	r3, #8
 8007b20:	9303      	str	r3, [sp, #12]
 8007b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b24:	443b      	add	r3, r7
 8007b26:	9309      	str	r3, [sp, #36]	; 0x24
 8007b28:	e768      	b.n	80079fc <_vfiprintf_r+0x78>
 8007b2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b2e:	460c      	mov	r4, r1
 8007b30:	2001      	movs	r0, #1
 8007b32:	e7a6      	b.n	8007a82 <_vfiprintf_r+0xfe>
 8007b34:	2300      	movs	r3, #0
 8007b36:	3401      	adds	r4, #1
 8007b38:	9305      	str	r3, [sp, #20]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	f04f 0c0a 	mov.w	ip, #10
 8007b40:	4620      	mov	r0, r4
 8007b42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b46:	3a30      	subs	r2, #48	; 0x30
 8007b48:	2a09      	cmp	r2, #9
 8007b4a:	d903      	bls.n	8007b54 <_vfiprintf_r+0x1d0>
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d0c6      	beq.n	8007ade <_vfiprintf_r+0x15a>
 8007b50:	9105      	str	r1, [sp, #20]
 8007b52:	e7c4      	b.n	8007ade <_vfiprintf_r+0x15a>
 8007b54:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b58:	4604      	mov	r4, r0
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e7f0      	b.n	8007b40 <_vfiprintf_r+0x1bc>
 8007b5e:	ab03      	add	r3, sp, #12
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	462a      	mov	r2, r5
 8007b64:	4b12      	ldr	r3, [pc, #72]	; (8007bb0 <_vfiprintf_r+0x22c>)
 8007b66:	a904      	add	r1, sp, #16
 8007b68:	4630      	mov	r0, r6
 8007b6a:	f3af 8000 	nop.w
 8007b6e:	4607      	mov	r7, r0
 8007b70:	1c78      	adds	r0, r7, #1
 8007b72:	d1d6      	bne.n	8007b22 <_vfiprintf_r+0x19e>
 8007b74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b76:	07d9      	lsls	r1, r3, #31
 8007b78:	d405      	bmi.n	8007b86 <_vfiprintf_r+0x202>
 8007b7a:	89ab      	ldrh	r3, [r5, #12]
 8007b7c:	059a      	lsls	r2, r3, #22
 8007b7e:	d402      	bmi.n	8007b86 <_vfiprintf_r+0x202>
 8007b80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b82:	f7ff fe87 	bl	8007894 <__retarget_lock_release_recursive>
 8007b86:	89ab      	ldrh	r3, [r5, #12]
 8007b88:	065b      	lsls	r3, r3, #25
 8007b8a:	f53f af1d 	bmi.w	80079c8 <_vfiprintf_r+0x44>
 8007b8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b90:	e71c      	b.n	80079cc <_vfiprintf_r+0x48>
 8007b92:	ab03      	add	r3, sp, #12
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	462a      	mov	r2, r5
 8007b98:	4b05      	ldr	r3, [pc, #20]	; (8007bb0 <_vfiprintf_r+0x22c>)
 8007b9a:	a904      	add	r1, sp, #16
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	f000 f879 	bl	8007c94 <_printf_i>
 8007ba2:	e7e4      	b.n	8007b6e <_vfiprintf_r+0x1ea>
 8007ba4:	080083c8 	.word	0x080083c8
 8007ba8:	080083d2 	.word	0x080083d2
 8007bac:	00000000 	.word	0x00000000
 8007bb0:	0800795f 	.word	0x0800795f
 8007bb4:	080083ce 	.word	0x080083ce

08007bb8 <_printf_common>:
 8007bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bbc:	4616      	mov	r6, r2
 8007bbe:	4699      	mov	r9, r3
 8007bc0:	688a      	ldr	r2, [r1, #8]
 8007bc2:	690b      	ldr	r3, [r1, #16]
 8007bc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	bfb8      	it	lt
 8007bcc:	4613      	movlt	r3, r2
 8007bce:	6033      	str	r3, [r6, #0]
 8007bd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007bd4:	4607      	mov	r7, r0
 8007bd6:	460c      	mov	r4, r1
 8007bd8:	b10a      	cbz	r2, 8007bde <_printf_common+0x26>
 8007bda:	3301      	adds	r3, #1
 8007bdc:	6033      	str	r3, [r6, #0]
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	0699      	lsls	r1, r3, #26
 8007be2:	bf42      	ittt	mi
 8007be4:	6833      	ldrmi	r3, [r6, #0]
 8007be6:	3302      	addmi	r3, #2
 8007be8:	6033      	strmi	r3, [r6, #0]
 8007bea:	6825      	ldr	r5, [r4, #0]
 8007bec:	f015 0506 	ands.w	r5, r5, #6
 8007bf0:	d106      	bne.n	8007c00 <_printf_common+0x48>
 8007bf2:	f104 0a19 	add.w	sl, r4, #25
 8007bf6:	68e3      	ldr	r3, [r4, #12]
 8007bf8:	6832      	ldr	r2, [r6, #0]
 8007bfa:	1a9b      	subs	r3, r3, r2
 8007bfc:	42ab      	cmp	r3, r5
 8007bfe:	dc26      	bgt.n	8007c4e <_printf_common+0x96>
 8007c00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c04:	1e13      	subs	r3, r2, #0
 8007c06:	6822      	ldr	r2, [r4, #0]
 8007c08:	bf18      	it	ne
 8007c0a:	2301      	movne	r3, #1
 8007c0c:	0692      	lsls	r2, r2, #26
 8007c0e:	d42b      	bmi.n	8007c68 <_printf_common+0xb0>
 8007c10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c14:	4649      	mov	r1, r9
 8007c16:	4638      	mov	r0, r7
 8007c18:	47c0      	blx	r8
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	d01e      	beq.n	8007c5c <_printf_common+0xa4>
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	6922      	ldr	r2, [r4, #16]
 8007c22:	f003 0306 	and.w	r3, r3, #6
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	bf02      	ittt	eq
 8007c2a:	68e5      	ldreq	r5, [r4, #12]
 8007c2c:	6833      	ldreq	r3, [r6, #0]
 8007c2e:	1aed      	subeq	r5, r5, r3
 8007c30:	68a3      	ldr	r3, [r4, #8]
 8007c32:	bf0c      	ite	eq
 8007c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c38:	2500      	movne	r5, #0
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	bfc4      	itt	gt
 8007c3e:	1a9b      	subgt	r3, r3, r2
 8007c40:	18ed      	addgt	r5, r5, r3
 8007c42:	2600      	movs	r6, #0
 8007c44:	341a      	adds	r4, #26
 8007c46:	42b5      	cmp	r5, r6
 8007c48:	d11a      	bne.n	8007c80 <_printf_common+0xc8>
 8007c4a:	2000      	movs	r0, #0
 8007c4c:	e008      	b.n	8007c60 <_printf_common+0xa8>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	4652      	mov	r2, sl
 8007c52:	4649      	mov	r1, r9
 8007c54:	4638      	mov	r0, r7
 8007c56:	47c0      	blx	r8
 8007c58:	3001      	adds	r0, #1
 8007c5a:	d103      	bne.n	8007c64 <_printf_common+0xac>
 8007c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c64:	3501      	adds	r5, #1
 8007c66:	e7c6      	b.n	8007bf6 <_printf_common+0x3e>
 8007c68:	18e1      	adds	r1, r4, r3
 8007c6a:	1c5a      	adds	r2, r3, #1
 8007c6c:	2030      	movs	r0, #48	; 0x30
 8007c6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c72:	4422      	add	r2, r4
 8007c74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c7c:	3302      	adds	r3, #2
 8007c7e:	e7c7      	b.n	8007c10 <_printf_common+0x58>
 8007c80:	2301      	movs	r3, #1
 8007c82:	4622      	mov	r2, r4
 8007c84:	4649      	mov	r1, r9
 8007c86:	4638      	mov	r0, r7
 8007c88:	47c0      	blx	r8
 8007c8a:	3001      	adds	r0, #1
 8007c8c:	d0e6      	beq.n	8007c5c <_printf_common+0xa4>
 8007c8e:	3601      	adds	r6, #1
 8007c90:	e7d9      	b.n	8007c46 <_printf_common+0x8e>
	...

08007c94 <_printf_i>:
 8007c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c98:	7e0f      	ldrb	r7, [r1, #24]
 8007c9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c9c:	2f78      	cmp	r7, #120	; 0x78
 8007c9e:	4691      	mov	r9, r2
 8007ca0:	4680      	mov	r8, r0
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	469a      	mov	sl, r3
 8007ca6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007caa:	d807      	bhi.n	8007cbc <_printf_i+0x28>
 8007cac:	2f62      	cmp	r7, #98	; 0x62
 8007cae:	d80a      	bhi.n	8007cc6 <_printf_i+0x32>
 8007cb0:	2f00      	cmp	r7, #0
 8007cb2:	f000 80d4 	beq.w	8007e5e <_printf_i+0x1ca>
 8007cb6:	2f58      	cmp	r7, #88	; 0x58
 8007cb8:	f000 80c0 	beq.w	8007e3c <_printf_i+0x1a8>
 8007cbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007cc4:	e03a      	b.n	8007d3c <_printf_i+0xa8>
 8007cc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007cca:	2b15      	cmp	r3, #21
 8007ccc:	d8f6      	bhi.n	8007cbc <_printf_i+0x28>
 8007cce:	a101      	add	r1, pc, #4	; (adr r1, 8007cd4 <_printf_i+0x40>)
 8007cd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cd4:	08007d2d 	.word	0x08007d2d
 8007cd8:	08007d41 	.word	0x08007d41
 8007cdc:	08007cbd 	.word	0x08007cbd
 8007ce0:	08007cbd 	.word	0x08007cbd
 8007ce4:	08007cbd 	.word	0x08007cbd
 8007ce8:	08007cbd 	.word	0x08007cbd
 8007cec:	08007d41 	.word	0x08007d41
 8007cf0:	08007cbd 	.word	0x08007cbd
 8007cf4:	08007cbd 	.word	0x08007cbd
 8007cf8:	08007cbd 	.word	0x08007cbd
 8007cfc:	08007cbd 	.word	0x08007cbd
 8007d00:	08007e45 	.word	0x08007e45
 8007d04:	08007d6d 	.word	0x08007d6d
 8007d08:	08007dff 	.word	0x08007dff
 8007d0c:	08007cbd 	.word	0x08007cbd
 8007d10:	08007cbd 	.word	0x08007cbd
 8007d14:	08007e67 	.word	0x08007e67
 8007d18:	08007cbd 	.word	0x08007cbd
 8007d1c:	08007d6d 	.word	0x08007d6d
 8007d20:	08007cbd 	.word	0x08007cbd
 8007d24:	08007cbd 	.word	0x08007cbd
 8007d28:	08007e07 	.word	0x08007e07
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	1d1a      	adds	r2, r3, #4
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	602a      	str	r2, [r5, #0]
 8007d34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e09f      	b.n	8007e80 <_printf_i+0x1ec>
 8007d40:	6820      	ldr	r0, [r4, #0]
 8007d42:	682b      	ldr	r3, [r5, #0]
 8007d44:	0607      	lsls	r7, r0, #24
 8007d46:	f103 0104 	add.w	r1, r3, #4
 8007d4a:	6029      	str	r1, [r5, #0]
 8007d4c:	d501      	bpl.n	8007d52 <_printf_i+0xbe>
 8007d4e:	681e      	ldr	r6, [r3, #0]
 8007d50:	e003      	b.n	8007d5a <_printf_i+0xc6>
 8007d52:	0646      	lsls	r6, r0, #25
 8007d54:	d5fb      	bpl.n	8007d4e <_printf_i+0xba>
 8007d56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007d5a:	2e00      	cmp	r6, #0
 8007d5c:	da03      	bge.n	8007d66 <_printf_i+0xd2>
 8007d5e:	232d      	movs	r3, #45	; 0x2d
 8007d60:	4276      	negs	r6, r6
 8007d62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d66:	485a      	ldr	r0, [pc, #360]	; (8007ed0 <_printf_i+0x23c>)
 8007d68:	230a      	movs	r3, #10
 8007d6a:	e012      	b.n	8007d92 <_printf_i+0xfe>
 8007d6c:	682b      	ldr	r3, [r5, #0]
 8007d6e:	6820      	ldr	r0, [r4, #0]
 8007d70:	1d19      	adds	r1, r3, #4
 8007d72:	6029      	str	r1, [r5, #0]
 8007d74:	0605      	lsls	r5, r0, #24
 8007d76:	d501      	bpl.n	8007d7c <_printf_i+0xe8>
 8007d78:	681e      	ldr	r6, [r3, #0]
 8007d7a:	e002      	b.n	8007d82 <_printf_i+0xee>
 8007d7c:	0641      	lsls	r1, r0, #25
 8007d7e:	d5fb      	bpl.n	8007d78 <_printf_i+0xe4>
 8007d80:	881e      	ldrh	r6, [r3, #0]
 8007d82:	4853      	ldr	r0, [pc, #332]	; (8007ed0 <_printf_i+0x23c>)
 8007d84:	2f6f      	cmp	r7, #111	; 0x6f
 8007d86:	bf0c      	ite	eq
 8007d88:	2308      	moveq	r3, #8
 8007d8a:	230a      	movne	r3, #10
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d92:	6865      	ldr	r5, [r4, #4]
 8007d94:	60a5      	str	r5, [r4, #8]
 8007d96:	2d00      	cmp	r5, #0
 8007d98:	bfa2      	ittt	ge
 8007d9a:	6821      	ldrge	r1, [r4, #0]
 8007d9c:	f021 0104 	bicge.w	r1, r1, #4
 8007da0:	6021      	strge	r1, [r4, #0]
 8007da2:	b90e      	cbnz	r6, 8007da8 <_printf_i+0x114>
 8007da4:	2d00      	cmp	r5, #0
 8007da6:	d04b      	beq.n	8007e40 <_printf_i+0x1ac>
 8007da8:	4615      	mov	r5, r2
 8007daa:	fbb6 f1f3 	udiv	r1, r6, r3
 8007dae:	fb03 6711 	mls	r7, r3, r1, r6
 8007db2:	5dc7      	ldrb	r7, [r0, r7]
 8007db4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007db8:	4637      	mov	r7, r6
 8007dba:	42bb      	cmp	r3, r7
 8007dbc:	460e      	mov	r6, r1
 8007dbe:	d9f4      	bls.n	8007daa <_printf_i+0x116>
 8007dc0:	2b08      	cmp	r3, #8
 8007dc2:	d10b      	bne.n	8007ddc <_printf_i+0x148>
 8007dc4:	6823      	ldr	r3, [r4, #0]
 8007dc6:	07de      	lsls	r6, r3, #31
 8007dc8:	d508      	bpl.n	8007ddc <_printf_i+0x148>
 8007dca:	6923      	ldr	r3, [r4, #16]
 8007dcc:	6861      	ldr	r1, [r4, #4]
 8007dce:	4299      	cmp	r1, r3
 8007dd0:	bfde      	ittt	le
 8007dd2:	2330      	movle	r3, #48	; 0x30
 8007dd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007dd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ddc:	1b52      	subs	r2, r2, r5
 8007dde:	6122      	str	r2, [r4, #16]
 8007de0:	f8cd a000 	str.w	sl, [sp]
 8007de4:	464b      	mov	r3, r9
 8007de6:	aa03      	add	r2, sp, #12
 8007de8:	4621      	mov	r1, r4
 8007dea:	4640      	mov	r0, r8
 8007dec:	f7ff fee4 	bl	8007bb8 <_printf_common>
 8007df0:	3001      	adds	r0, #1
 8007df2:	d14a      	bne.n	8007e8a <_printf_i+0x1f6>
 8007df4:	f04f 30ff 	mov.w	r0, #4294967295
 8007df8:	b004      	add	sp, #16
 8007dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	f043 0320 	orr.w	r3, r3, #32
 8007e04:	6023      	str	r3, [r4, #0]
 8007e06:	4833      	ldr	r0, [pc, #204]	; (8007ed4 <_printf_i+0x240>)
 8007e08:	2778      	movs	r7, #120	; 0x78
 8007e0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	6829      	ldr	r1, [r5, #0]
 8007e12:	061f      	lsls	r7, r3, #24
 8007e14:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e18:	d402      	bmi.n	8007e20 <_printf_i+0x18c>
 8007e1a:	065f      	lsls	r7, r3, #25
 8007e1c:	bf48      	it	mi
 8007e1e:	b2b6      	uxthmi	r6, r6
 8007e20:	07df      	lsls	r7, r3, #31
 8007e22:	bf48      	it	mi
 8007e24:	f043 0320 	orrmi.w	r3, r3, #32
 8007e28:	6029      	str	r1, [r5, #0]
 8007e2a:	bf48      	it	mi
 8007e2c:	6023      	strmi	r3, [r4, #0]
 8007e2e:	b91e      	cbnz	r6, 8007e38 <_printf_i+0x1a4>
 8007e30:	6823      	ldr	r3, [r4, #0]
 8007e32:	f023 0320 	bic.w	r3, r3, #32
 8007e36:	6023      	str	r3, [r4, #0]
 8007e38:	2310      	movs	r3, #16
 8007e3a:	e7a7      	b.n	8007d8c <_printf_i+0xf8>
 8007e3c:	4824      	ldr	r0, [pc, #144]	; (8007ed0 <_printf_i+0x23c>)
 8007e3e:	e7e4      	b.n	8007e0a <_printf_i+0x176>
 8007e40:	4615      	mov	r5, r2
 8007e42:	e7bd      	b.n	8007dc0 <_printf_i+0x12c>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	6826      	ldr	r6, [r4, #0]
 8007e48:	6961      	ldr	r1, [r4, #20]
 8007e4a:	1d18      	adds	r0, r3, #4
 8007e4c:	6028      	str	r0, [r5, #0]
 8007e4e:	0635      	lsls	r5, r6, #24
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	d501      	bpl.n	8007e58 <_printf_i+0x1c4>
 8007e54:	6019      	str	r1, [r3, #0]
 8007e56:	e002      	b.n	8007e5e <_printf_i+0x1ca>
 8007e58:	0670      	lsls	r0, r6, #25
 8007e5a:	d5fb      	bpl.n	8007e54 <_printf_i+0x1c0>
 8007e5c:	8019      	strh	r1, [r3, #0]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	6123      	str	r3, [r4, #16]
 8007e62:	4615      	mov	r5, r2
 8007e64:	e7bc      	b.n	8007de0 <_printf_i+0x14c>
 8007e66:	682b      	ldr	r3, [r5, #0]
 8007e68:	1d1a      	adds	r2, r3, #4
 8007e6a:	602a      	str	r2, [r5, #0]
 8007e6c:	681d      	ldr	r5, [r3, #0]
 8007e6e:	6862      	ldr	r2, [r4, #4]
 8007e70:	2100      	movs	r1, #0
 8007e72:	4628      	mov	r0, r5
 8007e74:	f7f8 f9b4 	bl	80001e0 <memchr>
 8007e78:	b108      	cbz	r0, 8007e7e <_printf_i+0x1ea>
 8007e7a:	1b40      	subs	r0, r0, r5
 8007e7c:	6060      	str	r0, [r4, #4]
 8007e7e:	6863      	ldr	r3, [r4, #4]
 8007e80:	6123      	str	r3, [r4, #16]
 8007e82:	2300      	movs	r3, #0
 8007e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e88:	e7aa      	b.n	8007de0 <_printf_i+0x14c>
 8007e8a:	6923      	ldr	r3, [r4, #16]
 8007e8c:	462a      	mov	r2, r5
 8007e8e:	4649      	mov	r1, r9
 8007e90:	4640      	mov	r0, r8
 8007e92:	47d0      	blx	sl
 8007e94:	3001      	adds	r0, #1
 8007e96:	d0ad      	beq.n	8007df4 <_printf_i+0x160>
 8007e98:	6823      	ldr	r3, [r4, #0]
 8007e9a:	079b      	lsls	r3, r3, #30
 8007e9c:	d413      	bmi.n	8007ec6 <_printf_i+0x232>
 8007e9e:	68e0      	ldr	r0, [r4, #12]
 8007ea0:	9b03      	ldr	r3, [sp, #12]
 8007ea2:	4298      	cmp	r0, r3
 8007ea4:	bfb8      	it	lt
 8007ea6:	4618      	movlt	r0, r3
 8007ea8:	e7a6      	b.n	8007df8 <_printf_i+0x164>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	4632      	mov	r2, r6
 8007eae:	4649      	mov	r1, r9
 8007eb0:	4640      	mov	r0, r8
 8007eb2:	47d0      	blx	sl
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	d09d      	beq.n	8007df4 <_printf_i+0x160>
 8007eb8:	3501      	adds	r5, #1
 8007eba:	68e3      	ldr	r3, [r4, #12]
 8007ebc:	9903      	ldr	r1, [sp, #12]
 8007ebe:	1a5b      	subs	r3, r3, r1
 8007ec0:	42ab      	cmp	r3, r5
 8007ec2:	dcf2      	bgt.n	8007eaa <_printf_i+0x216>
 8007ec4:	e7eb      	b.n	8007e9e <_printf_i+0x20a>
 8007ec6:	2500      	movs	r5, #0
 8007ec8:	f104 0619 	add.w	r6, r4, #25
 8007ecc:	e7f5      	b.n	8007eba <_printf_i+0x226>
 8007ece:	bf00      	nop
 8007ed0:	080083d9 	.word	0x080083d9
 8007ed4:	080083ea 	.word	0x080083ea

08007ed8 <__sflush_r>:
 8007ed8:	898a      	ldrh	r2, [r1, #12]
 8007eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ede:	4605      	mov	r5, r0
 8007ee0:	0710      	lsls	r0, r2, #28
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	d458      	bmi.n	8007f98 <__sflush_r+0xc0>
 8007ee6:	684b      	ldr	r3, [r1, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	dc05      	bgt.n	8007ef8 <__sflush_r+0x20>
 8007eec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	dc02      	bgt.n	8007ef8 <__sflush_r+0x20>
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007efa:	2e00      	cmp	r6, #0
 8007efc:	d0f9      	beq.n	8007ef2 <__sflush_r+0x1a>
 8007efe:	2300      	movs	r3, #0
 8007f00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f04:	682f      	ldr	r7, [r5, #0]
 8007f06:	6a21      	ldr	r1, [r4, #32]
 8007f08:	602b      	str	r3, [r5, #0]
 8007f0a:	d032      	beq.n	8007f72 <__sflush_r+0x9a>
 8007f0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f0e:	89a3      	ldrh	r3, [r4, #12]
 8007f10:	075a      	lsls	r2, r3, #29
 8007f12:	d505      	bpl.n	8007f20 <__sflush_r+0x48>
 8007f14:	6863      	ldr	r3, [r4, #4]
 8007f16:	1ac0      	subs	r0, r0, r3
 8007f18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f1a:	b10b      	cbz	r3, 8007f20 <__sflush_r+0x48>
 8007f1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f1e:	1ac0      	subs	r0, r0, r3
 8007f20:	2300      	movs	r3, #0
 8007f22:	4602      	mov	r2, r0
 8007f24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f26:	6a21      	ldr	r1, [r4, #32]
 8007f28:	4628      	mov	r0, r5
 8007f2a:	47b0      	blx	r6
 8007f2c:	1c43      	adds	r3, r0, #1
 8007f2e:	89a3      	ldrh	r3, [r4, #12]
 8007f30:	d106      	bne.n	8007f40 <__sflush_r+0x68>
 8007f32:	6829      	ldr	r1, [r5, #0]
 8007f34:	291d      	cmp	r1, #29
 8007f36:	d82b      	bhi.n	8007f90 <__sflush_r+0xb8>
 8007f38:	4a29      	ldr	r2, [pc, #164]	; (8007fe0 <__sflush_r+0x108>)
 8007f3a:	410a      	asrs	r2, r1
 8007f3c:	07d6      	lsls	r6, r2, #31
 8007f3e:	d427      	bmi.n	8007f90 <__sflush_r+0xb8>
 8007f40:	2200      	movs	r2, #0
 8007f42:	6062      	str	r2, [r4, #4]
 8007f44:	04d9      	lsls	r1, r3, #19
 8007f46:	6922      	ldr	r2, [r4, #16]
 8007f48:	6022      	str	r2, [r4, #0]
 8007f4a:	d504      	bpl.n	8007f56 <__sflush_r+0x7e>
 8007f4c:	1c42      	adds	r2, r0, #1
 8007f4e:	d101      	bne.n	8007f54 <__sflush_r+0x7c>
 8007f50:	682b      	ldr	r3, [r5, #0]
 8007f52:	b903      	cbnz	r3, 8007f56 <__sflush_r+0x7e>
 8007f54:	6560      	str	r0, [r4, #84]	; 0x54
 8007f56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f58:	602f      	str	r7, [r5, #0]
 8007f5a:	2900      	cmp	r1, #0
 8007f5c:	d0c9      	beq.n	8007ef2 <__sflush_r+0x1a>
 8007f5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f62:	4299      	cmp	r1, r3
 8007f64:	d002      	beq.n	8007f6c <__sflush_r+0x94>
 8007f66:	4628      	mov	r0, r5
 8007f68:	f7ff fc96 	bl	8007898 <_free_r>
 8007f6c:	2000      	movs	r0, #0
 8007f6e:	6360      	str	r0, [r4, #52]	; 0x34
 8007f70:	e7c0      	b.n	8007ef4 <__sflush_r+0x1c>
 8007f72:	2301      	movs	r3, #1
 8007f74:	4628      	mov	r0, r5
 8007f76:	47b0      	blx	r6
 8007f78:	1c41      	adds	r1, r0, #1
 8007f7a:	d1c8      	bne.n	8007f0e <__sflush_r+0x36>
 8007f7c:	682b      	ldr	r3, [r5, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d0c5      	beq.n	8007f0e <__sflush_r+0x36>
 8007f82:	2b1d      	cmp	r3, #29
 8007f84:	d001      	beq.n	8007f8a <__sflush_r+0xb2>
 8007f86:	2b16      	cmp	r3, #22
 8007f88:	d101      	bne.n	8007f8e <__sflush_r+0xb6>
 8007f8a:	602f      	str	r7, [r5, #0]
 8007f8c:	e7b1      	b.n	8007ef2 <__sflush_r+0x1a>
 8007f8e:	89a3      	ldrh	r3, [r4, #12]
 8007f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f94:	81a3      	strh	r3, [r4, #12]
 8007f96:	e7ad      	b.n	8007ef4 <__sflush_r+0x1c>
 8007f98:	690f      	ldr	r7, [r1, #16]
 8007f9a:	2f00      	cmp	r7, #0
 8007f9c:	d0a9      	beq.n	8007ef2 <__sflush_r+0x1a>
 8007f9e:	0793      	lsls	r3, r2, #30
 8007fa0:	680e      	ldr	r6, [r1, #0]
 8007fa2:	bf08      	it	eq
 8007fa4:	694b      	ldreq	r3, [r1, #20]
 8007fa6:	600f      	str	r7, [r1, #0]
 8007fa8:	bf18      	it	ne
 8007faa:	2300      	movne	r3, #0
 8007fac:	eba6 0807 	sub.w	r8, r6, r7
 8007fb0:	608b      	str	r3, [r1, #8]
 8007fb2:	f1b8 0f00 	cmp.w	r8, #0
 8007fb6:	dd9c      	ble.n	8007ef2 <__sflush_r+0x1a>
 8007fb8:	6a21      	ldr	r1, [r4, #32]
 8007fba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007fbc:	4643      	mov	r3, r8
 8007fbe:	463a      	mov	r2, r7
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	47b0      	blx	r6
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	dc06      	bgt.n	8007fd6 <__sflush_r+0xfe>
 8007fc8:	89a3      	ldrh	r3, [r4, #12]
 8007fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fce:	81a3      	strh	r3, [r4, #12]
 8007fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd4:	e78e      	b.n	8007ef4 <__sflush_r+0x1c>
 8007fd6:	4407      	add	r7, r0
 8007fd8:	eba8 0800 	sub.w	r8, r8, r0
 8007fdc:	e7e9      	b.n	8007fb2 <__sflush_r+0xda>
 8007fde:	bf00      	nop
 8007fe0:	dfbffffe 	.word	0xdfbffffe

08007fe4 <_fflush_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	690b      	ldr	r3, [r1, #16]
 8007fe8:	4605      	mov	r5, r0
 8007fea:	460c      	mov	r4, r1
 8007fec:	b913      	cbnz	r3, 8007ff4 <_fflush_r+0x10>
 8007fee:	2500      	movs	r5, #0
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	bd38      	pop	{r3, r4, r5, pc}
 8007ff4:	b118      	cbz	r0, 8007ffe <_fflush_r+0x1a>
 8007ff6:	6a03      	ldr	r3, [r0, #32]
 8007ff8:	b90b      	cbnz	r3, 8007ffe <_fflush_r+0x1a>
 8007ffa:	f7ff fb35 	bl	8007668 <__sinit>
 8007ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0f3      	beq.n	8007fee <_fflush_r+0xa>
 8008006:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008008:	07d0      	lsls	r0, r2, #31
 800800a:	d404      	bmi.n	8008016 <_fflush_r+0x32>
 800800c:	0599      	lsls	r1, r3, #22
 800800e:	d402      	bmi.n	8008016 <_fflush_r+0x32>
 8008010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008012:	f7ff fc3e 	bl	8007892 <__retarget_lock_acquire_recursive>
 8008016:	4628      	mov	r0, r5
 8008018:	4621      	mov	r1, r4
 800801a:	f7ff ff5d 	bl	8007ed8 <__sflush_r>
 800801e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008020:	07da      	lsls	r2, r3, #31
 8008022:	4605      	mov	r5, r0
 8008024:	d4e4      	bmi.n	8007ff0 <_fflush_r+0xc>
 8008026:	89a3      	ldrh	r3, [r4, #12]
 8008028:	059b      	lsls	r3, r3, #22
 800802a:	d4e1      	bmi.n	8007ff0 <_fflush_r+0xc>
 800802c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800802e:	f7ff fc31 	bl	8007894 <__retarget_lock_release_recursive>
 8008032:	e7dd      	b.n	8007ff0 <_fflush_r+0xc>

08008034 <__swbuf_r>:
 8008034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008036:	460e      	mov	r6, r1
 8008038:	4614      	mov	r4, r2
 800803a:	4605      	mov	r5, r0
 800803c:	b118      	cbz	r0, 8008046 <__swbuf_r+0x12>
 800803e:	6a03      	ldr	r3, [r0, #32]
 8008040:	b90b      	cbnz	r3, 8008046 <__swbuf_r+0x12>
 8008042:	f7ff fb11 	bl	8007668 <__sinit>
 8008046:	69a3      	ldr	r3, [r4, #24]
 8008048:	60a3      	str	r3, [r4, #8]
 800804a:	89a3      	ldrh	r3, [r4, #12]
 800804c:	071a      	lsls	r2, r3, #28
 800804e:	d525      	bpl.n	800809c <__swbuf_r+0x68>
 8008050:	6923      	ldr	r3, [r4, #16]
 8008052:	b31b      	cbz	r3, 800809c <__swbuf_r+0x68>
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	6922      	ldr	r2, [r4, #16]
 8008058:	1a98      	subs	r0, r3, r2
 800805a:	6963      	ldr	r3, [r4, #20]
 800805c:	b2f6      	uxtb	r6, r6
 800805e:	4283      	cmp	r3, r0
 8008060:	4637      	mov	r7, r6
 8008062:	dc04      	bgt.n	800806e <__swbuf_r+0x3a>
 8008064:	4621      	mov	r1, r4
 8008066:	4628      	mov	r0, r5
 8008068:	f7ff ffbc 	bl	8007fe4 <_fflush_r>
 800806c:	b9e0      	cbnz	r0, 80080a8 <__swbuf_r+0x74>
 800806e:	68a3      	ldr	r3, [r4, #8]
 8008070:	3b01      	subs	r3, #1
 8008072:	60a3      	str	r3, [r4, #8]
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	1c5a      	adds	r2, r3, #1
 8008078:	6022      	str	r2, [r4, #0]
 800807a:	701e      	strb	r6, [r3, #0]
 800807c:	6962      	ldr	r2, [r4, #20]
 800807e:	1c43      	adds	r3, r0, #1
 8008080:	429a      	cmp	r2, r3
 8008082:	d004      	beq.n	800808e <__swbuf_r+0x5a>
 8008084:	89a3      	ldrh	r3, [r4, #12]
 8008086:	07db      	lsls	r3, r3, #31
 8008088:	d506      	bpl.n	8008098 <__swbuf_r+0x64>
 800808a:	2e0a      	cmp	r6, #10
 800808c:	d104      	bne.n	8008098 <__swbuf_r+0x64>
 800808e:	4621      	mov	r1, r4
 8008090:	4628      	mov	r0, r5
 8008092:	f7ff ffa7 	bl	8007fe4 <_fflush_r>
 8008096:	b938      	cbnz	r0, 80080a8 <__swbuf_r+0x74>
 8008098:	4638      	mov	r0, r7
 800809a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800809c:	4621      	mov	r1, r4
 800809e:	4628      	mov	r0, r5
 80080a0:	f000 f806 	bl	80080b0 <__swsetup_r>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	d0d5      	beq.n	8008054 <__swbuf_r+0x20>
 80080a8:	f04f 37ff 	mov.w	r7, #4294967295
 80080ac:	e7f4      	b.n	8008098 <__swbuf_r+0x64>
	...

080080b0 <__swsetup_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	4b2a      	ldr	r3, [pc, #168]	; (800815c <__swsetup_r+0xac>)
 80080b4:	4605      	mov	r5, r0
 80080b6:	6818      	ldr	r0, [r3, #0]
 80080b8:	460c      	mov	r4, r1
 80080ba:	b118      	cbz	r0, 80080c4 <__swsetup_r+0x14>
 80080bc:	6a03      	ldr	r3, [r0, #32]
 80080be:	b90b      	cbnz	r3, 80080c4 <__swsetup_r+0x14>
 80080c0:	f7ff fad2 	bl	8007668 <__sinit>
 80080c4:	89a3      	ldrh	r3, [r4, #12]
 80080c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080ca:	0718      	lsls	r0, r3, #28
 80080cc:	d422      	bmi.n	8008114 <__swsetup_r+0x64>
 80080ce:	06d9      	lsls	r1, r3, #27
 80080d0:	d407      	bmi.n	80080e2 <__swsetup_r+0x32>
 80080d2:	2309      	movs	r3, #9
 80080d4:	602b      	str	r3, [r5, #0]
 80080d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80080da:	81a3      	strh	r3, [r4, #12]
 80080dc:	f04f 30ff 	mov.w	r0, #4294967295
 80080e0:	e034      	b.n	800814c <__swsetup_r+0x9c>
 80080e2:	0758      	lsls	r0, r3, #29
 80080e4:	d512      	bpl.n	800810c <__swsetup_r+0x5c>
 80080e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080e8:	b141      	cbz	r1, 80080fc <__swsetup_r+0x4c>
 80080ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080ee:	4299      	cmp	r1, r3
 80080f0:	d002      	beq.n	80080f8 <__swsetup_r+0x48>
 80080f2:	4628      	mov	r0, r5
 80080f4:	f7ff fbd0 	bl	8007898 <_free_r>
 80080f8:	2300      	movs	r3, #0
 80080fa:	6363      	str	r3, [r4, #52]	; 0x34
 80080fc:	89a3      	ldrh	r3, [r4, #12]
 80080fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008102:	81a3      	strh	r3, [r4, #12]
 8008104:	2300      	movs	r3, #0
 8008106:	6063      	str	r3, [r4, #4]
 8008108:	6923      	ldr	r3, [r4, #16]
 800810a:	6023      	str	r3, [r4, #0]
 800810c:	89a3      	ldrh	r3, [r4, #12]
 800810e:	f043 0308 	orr.w	r3, r3, #8
 8008112:	81a3      	strh	r3, [r4, #12]
 8008114:	6923      	ldr	r3, [r4, #16]
 8008116:	b94b      	cbnz	r3, 800812c <__swsetup_r+0x7c>
 8008118:	89a3      	ldrh	r3, [r4, #12]
 800811a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800811e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008122:	d003      	beq.n	800812c <__swsetup_r+0x7c>
 8008124:	4621      	mov	r1, r4
 8008126:	4628      	mov	r0, r5
 8008128:	f000 f840 	bl	80081ac <__smakebuf_r>
 800812c:	89a0      	ldrh	r0, [r4, #12]
 800812e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008132:	f010 0301 	ands.w	r3, r0, #1
 8008136:	d00a      	beq.n	800814e <__swsetup_r+0x9e>
 8008138:	2300      	movs	r3, #0
 800813a:	60a3      	str	r3, [r4, #8]
 800813c:	6963      	ldr	r3, [r4, #20]
 800813e:	425b      	negs	r3, r3
 8008140:	61a3      	str	r3, [r4, #24]
 8008142:	6923      	ldr	r3, [r4, #16]
 8008144:	b943      	cbnz	r3, 8008158 <__swsetup_r+0xa8>
 8008146:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800814a:	d1c4      	bne.n	80080d6 <__swsetup_r+0x26>
 800814c:	bd38      	pop	{r3, r4, r5, pc}
 800814e:	0781      	lsls	r1, r0, #30
 8008150:	bf58      	it	pl
 8008152:	6963      	ldrpl	r3, [r4, #20]
 8008154:	60a3      	str	r3, [r4, #8]
 8008156:	e7f4      	b.n	8008142 <__swsetup_r+0x92>
 8008158:	2000      	movs	r0, #0
 800815a:	e7f7      	b.n	800814c <__swsetup_r+0x9c>
 800815c:	20000084 	.word	0x20000084

08008160 <__swhatbuf_r>:
 8008160:	b570      	push	{r4, r5, r6, lr}
 8008162:	460c      	mov	r4, r1
 8008164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008168:	2900      	cmp	r1, #0
 800816a:	b096      	sub	sp, #88	; 0x58
 800816c:	4615      	mov	r5, r2
 800816e:	461e      	mov	r6, r3
 8008170:	da0d      	bge.n	800818e <__swhatbuf_r+0x2e>
 8008172:	89a3      	ldrh	r3, [r4, #12]
 8008174:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008178:	f04f 0100 	mov.w	r1, #0
 800817c:	bf0c      	ite	eq
 800817e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008182:	2340      	movne	r3, #64	; 0x40
 8008184:	2000      	movs	r0, #0
 8008186:	6031      	str	r1, [r6, #0]
 8008188:	602b      	str	r3, [r5, #0]
 800818a:	b016      	add	sp, #88	; 0x58
 800818c:	bd70      	pop	{r4, r5, r6, pc}
 800818e:	466a      	mov	r2, sp
 8008190:	f000 f848 	bl	8008224 <_fstat_r>
 8008194:	2800      	cmp	r0, #0
 8008196:	dbec      	blt.n	8008172 <__swhatbuf_r+0x12>
 8008198:	9901      	ldr	r1, [sp, #4]
 800819a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800819e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80081a2:	4259      	negs	r1, r3
 80081a4:	4159      	adcs	r1, r3
 80081a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081aa:	e7eb      	b.n	8008184 <__swhatbuf_r+0x24>

080081ac <__smakebuf_r>:
 80081ac:	898b      	ldrh	r3, [r1, #12]
 80081ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081b0:	079d      	lsls	r5, r3, #30
 80081b2:	4606      	mov	r6, r0
 80081b4:	460c      	mov	r4, r1
 80081b6:	d507      	bpl.n	80081c8 <__smakebuf_r+0x1c>
 80081b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081bc:	6023      	str	r3, [r4, #0]
 80081be:	6123      	str	r3, [r4, #16]
 80081c0:	2301      	movs	r3, #1
 80081c2:	6163      	str	r3, [r4, #20]
 80081c4:	b002      	add	sp, #8
 80081c6:	bd70      	pop	{r4, r5, r6, pc}
 80081c8:	ab01      	add	r3, sp, #4
 80081ca:	466a      	mov	r2, sp
 80081cc:	f7ff ffc8 	bl	8008160 <__swhatbuf_r>
 80081d0:	9900      	ldr	r1, [sp, #0]
 80081d2:	4605      	mov	r5, r0
 80081d4:	4630      	mov	r0, r6
 80081d6:	f7ff f92f 	bl	8007438 <_malloc_r>
 80081da:	b948      	cbnz	r0, 80081f0 <__smakebuf_r+0x44>
 80081dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081e0:	059a      	lsls	r2, r3, #22
 80081e2:	d4ef      	bmi.n	80081c4 <__smakebuf_r+0x18>
 80081e4:	f023 0303 	bic.w	r3, r3, #3
 80081e8:	f043 0302 	orr.w	r3, r3, #2
 80081ec:	81a3      	strh	r3, [r4, #12]
 80081ee:	e7e3      	b.n	80081b8 <__smakebuf_r+0xc>
 80081f0:	89a3      	ldrh	r3, [r4, #12]
 80081f2:	6020      	str	r0, [r4, #0]
 80081f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081f8:	81a3      	strh	r3, [r4, #12]
 80081fa:	9b00      	ldr	r3, [sp, #0]
 80081fc:	6163      	str	r3, [r4, #20]
 80081fe:	9b01      	ldr	r3, [sp, #4]
 8008200:	6120      	str	r0, [r4, #16]
 8008202:	b15b      	cbz	r3, 800821c <__smakebuf_r+0x70>
 8008204:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008208:	4630      	mov	r0, r6
 800820a:	f000 f81d 	bl	8008248 <_isatty_r>
 800820e:	b128      	cbz	r0, 800821c <__smakebuf_r+0x70>
 8008210:	89a3      	ldrh	r3, [r4, #12]
 8008212:	f023 0303 	bic.w	r3, r3, #3
 8008216:	f043 0301 	orr.w	r3, r3, #1
 800821a:	81a3      	strh	r3, [r4, #12]
 800821c:	89a3      	ldrh	r3, [r4, #12]
 800821e:	431d      	orrs	r5, r3
 8008220:	81a5      	strh	r5, [r4, #12]
 8008222:	e7cf      	b.n	80081c4 <__smakebuf_r+0x18>

08008224 <_fstat_r>:
 8008224:	b538      	push	{r3, r4, r5, lr}
 8008226:	4d07      	ldr	r5, [pc, #28]	; (8008244 <_fstat_r+0x20>)
 8008228:	2300      	movs	r3, #0
 800822a:	4604      	mov	r4, r0
 800822c:	4608      	mov	r0, r1
 800822e:	4611      	mov	r1, r2
 8008230:	602b      	str	r3, [r5, #0]
 8008232:	f7f8 fb1e 	bl	8000872 <_fstat>
 8008236:	1c43      	adds	r3, r0, #1
 8008238:	d102      	bne.n	8008240 <_fstat_r+0x1c>
 800823a:	682b      	ldr	r3, [r5, #0]
 800823c:	b103      	cbz	r3, 8008240 <_fstat_r+0x1c>
 800823e:	6023      	str	r3, [r4, #0]
 8008240:	bd38      	pop	{r3, r4, r5, pc}
 8008242:	bf00      	nop
 8008244:	20000960 	.word	0x20000960

08008248 <_isatty_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	4d06      	ldr	r5, [pc, #24]	; (8008264 <_isatty_r+0x1c>)
 800824c:	2300      	movs	r3, #0
 800824e:	4604      	mov	r4, r0
 8008250:	4608      	mov	r0, r1
 8008252:	602b      	str	r3, [r5, #0]
 8008254:	f7f8 fb1d 	bl	8000892 <_isatty>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	d102      	bne.n	8008262 <_isatty_r+0x1a>
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	b103      	cbz	r3, 8008262 <_isatty_r+0x1a>
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	20000960 	.word	0x20000960

08008268 <_init>:
 8008268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826a:	bf00      	nop
 800826c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800826e:	bc08      	pop	{r3}
 8008270:	469e      	mov	lr, r3
 8008272:	4770      	bx	lr

08008274 <_fini>:
 8008274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008276:	bf00      	nop
 8008278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800827a:	bc08      	pop	{r3}
 800827c:	469e      	mov	lr, r3
 800827e:	4770      	bx	lr
