
Working_USB_Device_key_ijection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009214  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08009320  08009320  00019320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093dc  080093dc  000201b4  2**0
                  CONTENTS
  4 .ARM          00000000  080093dc  080093dc  000201b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080093dc  080093dc  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093dc  080093dc  000193dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093e0  080093e0  000193e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b4  20000000  080093e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a04  200001b4  08009598  000201b4  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20000bb8  08009598  00020bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201dd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010402  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003184  00000000  00000000  00030622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  000337a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a51  00000000  00000000  00034580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a74a  00000000  00000000  00034fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013239  00000000  00000000  0004f71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088c86  00000000  00000000  00062954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003dc4  00000000  00000000  000eb5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000ef3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001b4 	.word	0x200001b4
 8000128:	00000000 	.word	0x00000000
 800012c:	08009308 	.word	0x08009308

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001b8 	.word	0x200001b8
 8000148:	08009308 	.word	0x08009308

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b14      	ldr	r3, [pc, #80]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a13      	ldr	r2, [pc, #76]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	60fb      	str	r3, [r7, #12]
 8000168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b0e      	ldr	r3, [pc, #56]	; (80001a4 <MX_GPIO_Init+0x58>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a0d      	ldr	r2, [pc, #52]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b0b      	ldr	r3, [pc, #44]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	60bb      	str	r3, [r7, #8]
 8000180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000182:	4b08      	ldr	r3, [pc, #32]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a07      	ldr	r2, [pc, #28]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000188:	f043 0308 	orr.w	r3, r3, #8
 800018c:	6193      	str	r3, [r2, #24]
 800018e:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	f003 0308 	and.w	r3, r3, #8
 8000196:	607b      	str	r3, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]

}
 800019a:	bf00      	nop
 800019c:	3714      	adds	r7, #20
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	40021000 	.word	0x40021000

080001a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ac:	f000 fba4 	bl	80008f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b0:	f000 f820 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b4:	f7ff ffca 	bl	800014c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80001b8:	f007 fdac 	bl	8007d14 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 80001bc:	f000 fa7a 	bl	80006b4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80001c0:	f000 faa2 	bl	8000708 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, uartBuffer, sizeof(uartBuffer));
 80001c4:	220f      	movs	r2, #15
 80001c6:	4906      	ldr	r1, [pc, #24]	; (80001e0 <main+0x38>)
 80001c8:	4806      	ldr	r0, [pc, #24]	; (80001e4 <main+0x3c>)
 80001ca:	f003 fa2c 	bl	8003626 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, KeyInjectionUartBuffer, sizeof(KeyInjectionUartBuffer));
 80001ce:	2208      	movs	r2, #8
 80001d0:	4905      	ldr	r1, [pc, #20]	; (80001e8 <main+0x40>)
 80001d2:	4806      	ldr	r0, [pc, #24]	; (80001ec <main+0x44>)
 80001d4:	f003 fa27 	bl	8003626 <HAL_UART_Receive_IT>
  printf("Started");
 80001d8:	4805      	ldr	r0, [pc, #20]	; (80001f0 <main+0x48>)
 80001da:	f008 fa17 	bl	800860c <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001de:	e7fe      	b.n	80001de <main+0x36>
 80001e0:	200001e8 	.word	0x200001e8
 80001e4:	20000254 	.word	0x20000254
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	2000020c 	.word	0x2000020c
 80001f0:	08009320 	.word	0x08009320

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b094      	sub	sp, #80	; 0x50
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001fe:	2228      	movs	r2, #40	; 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f008 fa57 	bl	80086b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	f107 0314 	add.w	r3, r7, #20
 800020c:	2200      	movs	r2, #0
 800020e:	601a      	str	r2, [r3, #0]
 8000210:	605a      	str	r2, [r3, #4]
 8000212:	609a      	str	r2, [r3, #8]
 8000214:	60da      	str	r2, [r3, #12]
 8000216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000224:	2301      	movs	r3, #1
 8000226:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000228:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800022c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800022e:	2300      	movs	r3, #0
 8000230:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000232:	2301      	movs	r3, #1
 8000234:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000236:	2302      	movs	r3, #2
 8000238:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800023a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800023e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000240:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000244:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000246:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800024a:	4618      	mov	r0, r3
 800024c:	f002 fc52 	bl	8002af4 <HAL_RCC_OscConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000256:	f000 f909 	bl	800046c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025a:	230f      	movs	r3, #15
 800025c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800025e:	2302      	movs	r3, #2
 8000260:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000270:	f107 0314 	add.w	r3, r7, #20
 8000274:	2102      	movs	r1, #2
 8000276:	4618      	mov	r0, r3
 8000278:	f002 febe 	bl	8002ff8 <HAL_RCC_ClockConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000282:	f000 f8f3 	bl	800046c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000286:	2310      	movs	r3, #16
 8000288:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800028a:	2300      	movs	r3, #0
 800028c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	4618      	mov	r0, r3
 8000292:	f003 f83f 	bl	8003314 <HAL_RCCEx_PeriphCLKConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800029c:	f000 f8e6 	bl	800046c <Error_Handler>
  }
}
 80002a0:	bf00      	nop
 80002a2:	3750      	adds	r7, #80	; 0x50
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <ConvertToKeyboardHID>:
}




void ConvertToKeyboardHID(const HID_KEYBD_Info_TypeDef *hostData, keyboardHID *deviceData) {
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	6039      	str	r1, [r7, #0]
    // Clear the deviceData struct
    *deviceData = (keyboardHID){0};
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	461a      	mov	r2, r3
 80002b6:	2300      	movs	r3, #0
 80002b8:	6013      	str	r3, [r2, #0]
 80002ba:	6053      	str	r3, [r2, #4]

    // Set the MODIFIER byte
    deviceData->MODIFIER = (hostData->lctrl ? 0x01 : 0) |
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	785b      	ldrb	r3, [r3, #1]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	bf14      	ite	ne
 80002c4:	2301      	movne	r3, #1
 80002c6:	2300      	moveq	r3, #0
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	b25b      	sxtb	r3, r3
                           (hostData->lshift ? 0x02 : 0) |
 80002cc:	687a      	ldr	r2, [r7, #4]
 80002ce:	7892      	ldrb	r2, [r2, #2]
    deviceData->MODIFIER = (hostData->lctrl ? 0x01 : 0) |
 80002d0:	2a00      	cmp	r2, #0
 80002d2:	d001      	beq.n	80002d8 <ConvertToKeyboardHID+0x30>
 80002d4:	2202      	movs	r2, #2
 80002d6:	e000      	b.n	80002da <ConvertToKeyboardHID+0x32>
 80002d8:	2200      	movs	r2, #0
 80002da:	4313      	orrs	r3, r2
 80002dc:	b25b      	sxtb	r3, r3
                           (hostData->lalt ? 0x04 : 0) |
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	78d2      	ldrb	r2, [r2, #3]
                           (hostData->lshift ? 0x02 : 0) |
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d001      	beq.n	80002ea <ConvertToKeyboardHID+0x42>
 80002e6:	2204      	movs	r2, #4
 80002e8:	e000      	b.n	80002ec <ConvertToKeyboardHID+0x44>
 80002ea:	2200      	movs	r2, #0
 80002ec:	4313      	orrs	r3, r2
 80002ee:	b25b      	sxtb	r3, r3
                           (hostData->lgui ? 0x08 : 0) |
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	7912      	ldrb	r2, [r2, #4]
                           (hostData->lalt ? 0x04 : 0) |
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	d001      	beq.n	80002fc <ConvertToKeyboardHID+0x54>
 80002f8:	2208      	movs	r2, #8
 80002fa:	e000      	b.n	80002fe <ConvertToKeyboardHID+0x56>
 80002fc:	2200      	movs	r2, #0
 80002fe:	4313      	orrs	r3, r2
 8000300:	b25b      	sxtb	r3, r3
                           (hostData->rctrl ? 0x10 : 0) |
 8000302:	687a      	ldr	r2, [r7, #4]
 8000304:	7952      	ldrb	r2, [r2, #5]
                           (hostData->lgui ? 0x08 : 0) |
 8000306:	2a00      	cmp	r2, #0
 8000308:	d001      	beq.n	800030e <ConvertToKeyboardHID+0x66>
 800030a:	2210      	movs	r2, #16
 800030c:	e000      	b.n	8000310 <ConvertToKeyboardHID+0x68>
 800030e:	2200      	movs	r2, #0
 8000310:	4313      	orrs	r3, r2
 8000312:	b25b      	sxtb	r3, r3
                           (hostData->rshift ? 0x20 : 0) |
 8000314:	687a      	ldr	r2, [r7, #4]
 8000316:	7992      	ldrb	r2, [r2, #6]
                           (hostData->rctrl ? 0x10 : 0) |
 8000318:	2a00      	cmp	r2, #0
 800031a:	d001      	beq.n	8000320 <ConvertToKeyboardHID+0x78>
 800031c:	2220      	movs	r2, #32
 800031e:	e000      	b.n	8000322 <ConvertToKeyboardHID+0x7a>
 8000320:	2200      	movs	r2, #0
 8000322:	4313      	orrs	r3, r2
 8000324:	b25b      	sxtb	r3, r3
                           (hostData->ralt ? 0x40 : 0) |
 8000326:	687a      	ldr	r2, [r7, #4]
 8000328:	79d2      	ldrb	r2, [r2, #7]
                           (hostData->rshift ? 0x20 : 0) |
 800032a:	2a00      	cmp	r2, #0
 800032c:	d001      	beq.n	8000332 <ConvertToKeyboardHID+0x8a>
 800032e:	2240      	movs	r2, #64	; 0x40
 8000330:	e000      	b.n	8000334 <ConvertToKeyboardHID+0x8c>
 8000332:	2200      	movs	r2, #0
 8000334:	4313      	orrs	r3, r2
 8000336:	b25b      	sxtb	r3, r3
                           (hostData->rgui ? 0x80 : 0);
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	7a12      	ldrb	r2, [r2, #8]
                           (hostData->ralt ? 0x40 : 0) |
 800033c:	2a00      	cmp	r2, #0
 800033e:	d002      	beq.n	8000346 <ConvertToKeyboardHID+0x9e>
 8000340:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8000344:	e000      	b.n	8000348 <ConvertToKeyboardHID+0xa0>
 8000346:	2200      	movs	r2, #0
 8000348:	4313      	orrs	r3, r2
 800034a:	b25b      	sxtb	r3, r3
 800034c:	b2da      	uxtb	r2, r3
    deviceData->MODIFIER = (hostData->lctrl ? 0x01 : 0) |
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	701a      	strb	r2, [r3, #0]

    // RESERVED byte is typically set to 0
    deviceData->RESERVED = 0;
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	2200      	movs	r2, #0
 8000356:	705a      	strb	r2, [r3, #1]

    // Copy the keys
    if (hostData->keys[0]) deviceData->KEYCODE1 = hostData->keys[0];
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	7a5b      	ldrb	r3, [r3, #9]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d003      	beq.n	8000368 <ConvertToKeyboardHID+0xc0>
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	7a5a      	ldrb	r2, [r3, #9]
 8000364:	683b      	ldr	r3, [r7, #0]
 8000366:	709a      	strb	r2, [r3, #2]
    if (hostData->keys[1]) deviceData->KEYCODE2 = hostData->keys[1];
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	7a9b      	ldrb	r3, [r3, #10]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d003      	beq.n	8000378 <ConvertToKeyboardHID+0xd0>
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	7a9a      	ldrb	r2, [r3, #10]
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	70da      	strb	r2, [r3, #3]
    if (hostData->keys[2]) deviceData->KEYCODE3 = hostData->keys[2];
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	7adb      	ldrb	r3, [r3, #11]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d003      	beq.n	8000388 <ConvertToKeyboardHID+0xe0>
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	7ada      	ldrb	r2, [r3, #11]
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	711a      	strb	r2, [r3, #4]
    if (hostData->keys[3]) deviceData->KEYCODE4 = hostData->keys[3];
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	7b1b      	ldrb	r3, [r3, #12]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d003      	beq.n	8000398 <ConvertToKeyboardHID+0xf0>
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	7b1a      	ldrb	r2, [r3, #12]
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	715a      	strb	r2, [r3, #5]
    if (hostData->keys[4]) deviceData->KEYCODE5 = hostData->keys[4];
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	7b5b      	ldrb	r3, [r3, #13]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d003      	beq.n	80003a8 <ConvertToKeyboardHID+0x100>
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	7b5a      	ldrb	r2, [r3, #13]
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	719a      	strb	r2, [r3, #6]
    if (hostData->keys[5]) deviceData->KEYCODE6 = hostData->keys[5];
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	7b9b      	ldrb	r3, [r3, #14]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d003      	beq.n	80003b8 <ConvertToKeyboardHID+0x110>
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	7b9a      	ldrb	r2, [r3, #14]
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	71da      	strb	r2, [r3, #7]
}
 80003b8:	bf00      	nop
 80003ba:	3714      	adds	r7, #20
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr
	...

080003c4 <HAL_UART_RxCpltCallback>:


//
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003c4:	b590      	push	{r4, r7, lr}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
    // Check if the callback comes from UART3
    if(huart->Instance == USART3)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a1c      	ldr	r2, [pc, #112]	; (8000444 <HAL_UART_RxCpltCallback+0x80>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d11d      	bne.n	8000412 <HAL_UART_RxCpltCallback+0x4e>
    {
        memcpy(&keyboardInfo, uartBuffer, sizeof(HID_KEYBD_Info_TypeDef));
 80003d6:	4a1c      	ldr	r2, [pc, #112]	; (8000448 <HAL_UART_RxCpltCallback+0x84>)
 80003d8:	4b1c      	ldr	r3, [pc, #112]	; (800044c <HAL_UART_RxCpltCallback+0x88>)
 80003da:	4614      	mov	r4, r2
 80003dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003de:	c407      	stmia	r4!, {r0, r1, r2}
 80003e0:	8023      	strh	r3, [r4, #0]
 80003e2:	3402      	adds	r4, #2
 80003e4:	0c1b      	lsrs	r3, r3, #16
 80003e6:	7023      	strb	r3, [r4, #0]
        ConvertToKeyboardHID(&keyboardInfo, &keyboardhid);
 80003e8:	4919      	ldr	r1, [pc, #100]	; (8000450 <HAL_UART_RxCpltCallback+0x8c>)
 80003ea:	4817      	ldr	r0, [pc, #92]	; (8000448 <HAL_UART_RxCpltCallback+0x84>)
 80003ec:	f7ff ff5c 	bl	80002a8 <ConvertToKeyboardHID>
        USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 80003f0:	2208      	movs	r2, #8
 80003f2:	4917      	ldr	r1, [pc, #92]	; (8000450 <HAL_UART_RxCpltCallback+0x8c>)
 80003f4:	4817      	ldr	r0, [pc, #92]	; (8000454 <HAL_UART_RxCpltCallback+0x90>)
 80003f6:	f006 fb9d 	bl	8006b34 <USBD_HID_SendReport>
        HAL_UART_Transmit(&huart3, uartBuffer, sizeof(uartBuffer), HAL_MAX_DELAY);
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
 80003fe:	220f      	movs	r2, #15
 8000400:	4912      	ldr	r1, [pc, #72]	; (800044c <HAL_UART_RxCpltCallback+0x88>)
 8000402:	4815      	ldr	r0, [pc, #84]	; (8000458 <HAL_UART_RxCpltCallback+0x94>)
 8000404:	f003 f88c 	bl	8003520 <HAL_UART_Transmit>
        HAL_UART_Receive_IT(&huart3, uartBuffer, sizeof(uartBuffer));
 8000408:	220f      	movs	r2, #15
 800040a:	4910      	ldr	r1, [pc, #64]	; (800044c <HAL_UART_RxCpltCallback+0x88>)
 800040c:	4812      	ldr	r0, [pc, #72]	; (8000458 <HAL_UART_RxCpltCallback+0x94>)
 800040e:	f003 f90a 	bl	8003626 <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a11      	ldr	r2, [pc, #68]	; (800045c <HAL_UART_RxCpltCallback+0x98>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d10f      	bne.n	800043c <HAL_UART_RxCpltCallback+0x78>
    {
        memcpy(&KeyInjectionHID, KeyInjectionUartBuffer, sizeof(keyboardHID));
 800041c:	4b10      	ldr	r3, [pc, #64]	; (8000460 <HAL_UART_RxCpltCallback+0x9c>)
 800041e:	4a11      	ldr	r2, [pc, #68]	; (8000464 <HAL_UART_RxCpltCallback+0xa0>)
 8000420:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000424:	e883 0003 	stmia.w	r3, {r0, r1}
    	USBD_HID_SendReport(&hUsbDeviceFS, &KeyInjectionHID, sizeof (uartBuffer));
 8000428:	220f      	movs	r2, #15
 800042a:	490d      	ldr	r1, [pc, #52]	; (8000460 <HAL_UART_RxCpltCallback+0x9c>)
 800042c:	4809      	ldr	r0, [pc, #36]	; (8000454 <HAL_UART_RxCpltCallback+0x90>)
 800042e:	f006 fb81 	bl	8006b34 <USBD_HID_SendReport>
    	HAL_UART_Receive_IT(&huart2, KeyInjectionUartBuffer, sizeof(KeyInjectionUartBuffer));
 8000432:	2208      	movs	r2, #8
 8000434:	490b      	ldr	r1, [pc, #44]	; (8000464 <HAL_UART_RxCpltCallback+0xa0>)
 8000436:	480c      	ldr	r0, [pc, #48]	; (8000468 <HAL_UART_RxCpltCallback+0xa4>)
 8000438:	f003 f8f5 	bl	8003626 <HAL_UART_Receive_IT>
    }

}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	bd90      	pop	{r4, r7, pc}
 8000444:	40004800 	.word	0x40004800
 8000448:	200001d0 	.word	0x200001d0
 800044c:	200001e8 	.word	0x200001e8
 8000450:	200001e0 	.word	0x200001e0
 8000454:	200002a4 	.word	0x200002a4
 8000458:	20000254 	.word	0x20000254
 800045c:	40004400 	.word	0x40004400
 8000460:	20000200 	.word	0x20000200
 8000464:	200001f8 	.word	0x200001f8
 8000468:	2000020c 	.word	0x2000020c

0800046c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000470:	b672      	cpsid	i
}
 8000472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000474:	e7fe      	b.n	8000474 <Error_Handler+0x8>
	...

08000478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800047e:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <HAL_MspInit+0x5c>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	4a14      	ldr	r2, [pc, #80]	; (80004d4 <HAL_MspInit+0x5c>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	6193      	str	r3, [r2, #24]
 800048a:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <HAL_MspInit+0x5c>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	60bb      	str	r3, [r7, #8]
 8000494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000496:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <HAL_MspInit+0x5c>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <HAL_MspInit+0x5c>)
 800049c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a0:	61d3      	str	r3, [r2, #28]
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <HAL_MspInit+0x5c>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ae:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <HAL_MspInit+0x60>)
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <HAL_MspInit+0x60>)
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40010000 	.word	0x40010000

080004dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <NMI_Handler+0x4>

080004e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e6:	e7fe      	b.n	80004e6 <HardFault_Handler+0x4>

080004e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <MemManage_Handler+0x4>

080004ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <BusFault_Handler+0x4>

080004f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <UsageFault_Handler+0x4>

080004fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr

08000506 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr

08000512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr

0800051e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000522:	f000 fa2f 	bl	8000984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000532:	f000 feac 	bl	800128e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000768 	.word	0x20000768

08000540 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <USART2_IRQHandler+0x10>)
 8000546:	f003 f893 	bl	8003670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	2000020c 	.word	0x2000020c

08000554 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000558:	4802      	ldr	r0, [pc, #8]	; (8000564 <USART3_IRQHandler+0x10>)
 800055a:	f003 f889 	bl	8003670 <HAL_UART_IRQHandler>

  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000254 	.word	0x20000254

08000568 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]
 8000578:	e00a      	b.n	8000590 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800057a:	f3af 8000 	nop.w
 800057e:	4601      	mov	r1, r0
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	1c5a      	adds	r2, r3, #1
 8000584:	60ba      	str	r2, [r7, #8]
 8000586:	b2ca      	uxtb	r2, r1
 8000588:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	3301      	adds	r3, #1
 800058e:	617b      	str	r3, [r7, #20]
 8000590:	697a      	ldr	r2, [r7, #20]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	429a      	cmp	r2, r3
 8000596:	dbf0      	blt.n	800057a <_read+0x12>
  }

  return len;
 8000598:	687b      	ldr	r3, [r7, #4]
}
 800059a:	4618      	mov	r0, r3
 800059c:	3718      	adds	r7, #24
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b086      	sub	sp, #24
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	60f8      	str	r0, [r7, #12]
 80005aa:	60b9      	str	r1, [r7, #8]
 80005ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
 80005b2:	e009      	b.n	80005c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	1c5a      	adds	r2, r3, #1
 80005b8:	60ba      	str	r2, [r7, #8]
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 f963 	bl	8000888 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	3301      	adds	r3, #1
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	697a      	ldr	r2, [r7, #20]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	dbf1      	blt.n	80005b4 <_write+0x12>
  }
  return len;
 80005d0:	687b      	ldr	r3, [r7, #4]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3718      	adds	r7, #24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <_close>:

int _close(int file)
{
 80005da:	b480      	push	{r7}
 80005dc:	b083      	sub	sp, #12
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000600:	605a      	str	r2, [r3, #4]
  return 0;
 8000602:	2300      	movs	r3, #0
}
 8000604:	4618      	mov	r0, r3
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr

0800060e <_isatty>:

int _isatty(int file)
{
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000616:	2301      	movs	r3, #1
}
 8000618:	4618      	mov	r0, r3
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr

08000622 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000622:	b480      	push	{r7}
 8000624:	b085      	sub	sp, #20
 8000626:	af00      	add	r7, sp, #0
 8000628:	60f8      	str	r0, [r7, #12]
 800062a:	60b9      	str	r1, [r7, #8]
 800062c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800062e:	2300      	movs	r3, #0
}
 8000630:	4618      	mov	r0, r3
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr
	...

0800063c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000644:	4a14      	ldr	r2, [pc, #80]	; (8000698 <_sbrk+0x5c>)
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <_sbrk+0x60>)
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <_sbrk+0x64>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d102      	bne.n	800065e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <_sbrk+0x64>)
 800065a:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <_sbrk+0x68>)
 800065c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <_sbrk+0x64>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	693a      	ldr	r2, [r7, #16]
 8000668:	429a      	cmp	r2, r3
 800066a:	d207      	bcs.n	800067c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800066c:	f008 f872 	bl	8008754 <__errno>
 8000670:	4603      	mov	r3, r0
 8000672:	220c      	movs	r2, #12
 8000674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	e009      	b.n	8000690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <_sbrk+0x64>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000682:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <_sbrk+0x64>)
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	4a05      	ldr	r2, [pc, #20]	; (80006a0 <_sbrk+0x64>)
 800068c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800068e:	68fb      	ldr	r3, [r7, #12]
}
 8000690:	4618      	mov	r0, r3
 8000692:	3718      	adds	r7, #24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20005000 	.word	0x20005000
 800069c:	00002000 	.word	0x00002000
 80006a0:	20000208 	.word	0x20000208
 80006a4:	20000bb8 	.word	0x20000bb8

080006a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <MX_USART2_UART_Init+0x50>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_USART2_UART_Init+0x4c>)
 80006ec:	f002 fec8 	bl	8003480 <HAL_UART_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006f6:	f7ff feb9 	bl	800046c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	2000020c 	.word	0x2000020c
 8000704:	40004400 	.word	0x40004400

08000708 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <MX_USART3_UART_Init+0x50>)
 8000710:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_USART3_UART_Init+0x4c>)
 8000740:	f002 fe9e 	bl	8003480 <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800074a:	f7ff fe8f 	bl	800046c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000254 	.word	0x20000254
 8000758:	40004800 	.word	0x40004800

0800075c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 0318 	add.w	r3, r7, #24
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a3f      	ldr	r2, [pc, #252]	; (8000874 <HAL_UART_MspInit+0x118>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d138      	bne.n	80007ee <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800077c:	4b3e      	ldr	r3, [pc, #248]	; (8000878 <HAL_UART_MspInit+0x11c>)
 800077e:	69db      	ldr	r3, [r3, #28]
 8000780:	4a3d      	ldr	r2, [pc, #244]	; (8000878 <HAL_UART_MspInit+0x11c>)
 8000782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000786:	61d3      	str	r3, [r2, #28]
 8000788:	4b3b      	ldr	r3, [pc, #236]	; (8000878 <HAL_UART_MspInit+0x11c>)
 800078a:	69db      	ldr	r3, [r3, #28]
 800078c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000794:	4b38      	ldr	r3, [pc, #224]	; (8000878 <HAL_UART_MspInit+0x11c>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a37      	ldr	r2, [pc, #220]	; (8000878 <HAL_UART_MspInit+0x11c>)
 800079a:	f043 0304 	orr.w	r3, r3, #4
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b35      	ldr	r3, [pc, #212]	; (8000878 <HAL_UART_MspInit+0x11c>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007ac:	2304      	movs	r3, #4
 80007ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b4:	2303      	movs	r3, #3
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	f107 0318 	add.w	r3, r7, #24
 80007bc:	4619      	mov	r1, r3
 80007be:	482f      	ldr	r0, [pc, #188]	; (800087c <HAL_UART_MspInit+0x120>)
 80007c0:	f000 fabc 	bl	8000d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007c4:	2308      	movs	r3, #8
 80007c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 0318 	add.w	r3, r7, #24
 80007d4:	4619      	mov	r1, r3
 80007d6:	4829      	ldr	r0, [pc, #164]	; (800087c <HAL_UART_MspInit+0x120>)
 80007d8:	f000 fab0 	bl	8000d3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	2026      	movs	r0, #38	; 0x26
 80007e2:	f000 f9c2 	bl	8000b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007e6:	2026      	movs	r0, #38	; 0x26
 80007e8:	f000 f9db 	bl	8000ba2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80007ec:	e03e      	b.n	800086c <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART3)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a23      	ldr	r2, [pc, #140]	; (8000880 <HAL_UART_MspInit+0x124>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d139      	bne.n	800086c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART3_CLK_ENABLE();
 80007f8:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <HAL_UART_MspInit+0x11c>)
 80007fa:	69db      	ldr	r3, [r3, #28]
 80007fc:	4a1e      	ldr	r2, [pc, #120]	; (8000878 <HAL_UART_MspInit+0x11c>)
 80007fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000802:	61d3      	str	r3, [r2, #28]
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <HAL_UART_MspInit+0x11c>)
 8000806:	69db      	ldr	r3, [r3, #28]
 8000808:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000810:	4b19      	ldr	r3, [pc, #100]	; (8000878 <HAL_UART_MspInit+0x11c>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a18      	ldr	r2, [pc, #96]	; (8000878 <HAL_UART_MspInit+0x11c>)
 8000816:	f043 0308 	orr.w	r3, r3, #8
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <HAL_UART_MspInit+0x11c>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0308 	and.w	r3, r3, #8
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000832:	2303      	movs	r3, #3
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 0318 	add.w	r3, r7, #24
 800083a:	4619      	mov	r1, r3
 800083c:	4811      	ldr	r0, [pc, #68]	; (8000884 <HAL_UART_MspInit+0x128>)
 800083e:	f000 fa7d 	bl	8000d3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000842:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000850:	f107 0318 	add.w	r3, r7, #24
 8000854:	4619      	mov	r1, r3
 8000856:	480b      	ldr	r0, [pc, #44]	; (8000884 <HAL_UART_MspInit+0x128>)
 8000858:	f000 fa70 	bl	8000d3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800085c:	2200      	movs	r2, #0
 800085e:	2100      	movs	r1, #0
 8000860:	2027      	movs	r0, #39	; 0x27
 8000862:	f000 f982 	bl	8000b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000866:	2027      	movs	r0, #39	; 0x27
 8000868:	f000 f99b 	bl	8000ba2 <HAL_NVIC_EnableIRQ>
}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40004400 	.word	0x40004400
 8000878:	40021000 	.word	0x40021000
 800087c:	40010800 	.word	0x40010800
 8000880:	40004800 	.word	0x40004800
 8000884:	40010c00 	.word	0x40010c00

08000888 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,(uint8_t*)&ch,1,10);
 8000890:	1d39      	adds	r1, r7, #4
 8000892:	230a      	movs	r3, #10
 8000894:	2201      	movs	r2, #1
 8000896:	4804      	ldr	r0, [pc, #16]	; (80008a8 <__io_putchar+0x20>)
 8000898:	f002 fe42 	bl	8003520 <HAL_UART_Transmit>
	return ch;
 800089c:	687b      	ldr	r3, [r7, #4]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000254 	.word	0x20000254

080008ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008ac:	f7ff fefc 	bl	80006a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b0:	480b      	ldr	r0, [pc, #44]	; (80008e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008b2:	490c      	ldr	r1, [pc, #48]	; (80008e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008b4:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b8:	e002      	b.n	80008c0 <LoopCopyDataInit>

080008ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008be:	3304      	adds	r3, #4

080008c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c4:	d3f9      	bcc.n	80008ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c6:	4a09      	ldr	r2, [pc, #36]	; (80008ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008c8:	4c09      	ldr	r4, [pc, #36]	; (80008f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008cc:	e001      	b.n	80008d2 <LoopFillZerobss>

080008ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d0:	3204      	adds	r2, #4

080008d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d4:	d3fb      	bcc.n	80008ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008d6:	f007 ff43 	bl	8008760 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008da:	f7ff fc65 	bl	80001a8 <main>
  bx lr
 80008de:	4770      	bx	lr
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e4:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 80008e8:	080093e4 	.word	0x080093e4
  ldr r2, =_sbss
 80008ec:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 80008f0:	20000bb8 	.word	0x20000bb8

080008f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC1_2_IRQHandler>
	...

080008f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <HAL_Init+0x28>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a07      	ldr	r2, [pc, #28]	; (8000920 <HAL_Init+0x28>)
 8000902:	f043 0310 	orr.w	r3, r3, #16
 8000906:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000908:	2003      	movs	r0, #3
 800090a:	f000 f923 	bl	8000b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800090e:	200f      	movs	r0, #15
 8000910:	f000 f808 	bl	8000924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000914:	f7ff fdb0 	bl	8000478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40022000 	.word	0x40022000

08000924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_InitTick+0x54>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_InitTick+0x58>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4619      	mov	r1, r3
 8000936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093a:	fbb3 f3f1 	udiv	r3, r3, r1
 800093e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f93b 	bl	8000bbe <HAL_SYSTICK_Config>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	e00e      	b.n	8000970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2b0f      	cmp	r3, #15
 8000956:	d80a      	bhi.n	800096e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000958:	2200      	movs	r2, #0
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	f04f 30ff 	mov.w	r0, #4294967295
 8000960:	f000 f903 	bl	8000b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000964:	4a06      	ldr	r2, [pc, #24]	; (8000980 <HAL_InitTick+0x5c>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800096a:	2300      	movs	r3, #0
 800096c:	e000      	b.n	8000970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
}
 8000970:	4618      	mov	r0, r3
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000000 	.word	0x20000000
 800097c:	20000008 	.word	0x20000008
 8000980:	20000004 	.word	0x20000004

08000984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <HAL_IncTick+0x1c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	461a      	mov	r2, r3
 800098e:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <HAL_IncTick+0x20>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4413      	add	r3, r2
 8000994:	4a03      	ldr	r2, [pc, #12]	; (80009a4 <HAL_IncTick+0x20>)
 8000996:	6013      	str	r3, [r2, #0]
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr
 80009a0:	20000008 	.word	0x20000008
 80009a4:	2000029c 	.word	0x2000029c

080009a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return uwTick;
 80009ac:	4b02      	ldr	r3, [pc, #8]	; (80009b8 <HAL_GetTick+0x10>)
 80009ae:	681b      	ldr	r3, [r3, #0]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	2000029c 	.word	0x2000029c

080009bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ee:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	60d3      	str	r3, [r2, #12]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <__NVIC_GetPriorityGrouping+0x18>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	f003 0307 	and.w	r3, r3, #7
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	db0b      	blt.n	8000a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	f003 021f 	and.w	r2, r3, #31
 8000a38:	4906      	ldr	r1, [pc, #24]	; (8000a54 <__NVIC_EnableIRQ+0x34>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	095b      	lsrs	r3, r3, #5
 8000a40:	2001      	movs	r0, #1
 8000a42:	fa00 f202 	lsl.w	r2, r0, r2
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	e000e100 	.word	0xe000e100

08000a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	db0a      	blt.n	8000a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	490c      	ldr	r1, [pc, #48]	; (8000aa4 <__NVIC_SetPriority+0x4c>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	0112      	lsls	r2, r2, #4
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a80:	e00a      	b.n	8000a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4908      	ldr	r1, [pc, #32]	; (8000aa8 <__NVIC_SetPriority+0x50>)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	3b04      	subs	r3, #4
 8000a90:	0112      	lsls	r2, r2, #4
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	440b      	add	r3, r1
 8000a96:	761a      	strb	r2, [r3, #24]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000e100 	.word	0xe000e100
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	; 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f1c3 0307 	rsb	r3, r3, #7
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	bf28      	it	cs
 8000aca:	2304      	movcs	r3, #4
 8000acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d902      	bls.n	8000adc <NVIC_EncodePriority+0x30>
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3b03      	subs	r3, #3
 8000ada:	e000      	b.n	8000ade <NVIC_EncodePriority+0x32>
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43da      	mvns	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	401a      	ands	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af4:	f04f 31ff 	mov.w	r1, #4294967295
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	43d9      	mvns	r1, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	4313      	orrs	r3, r2
         );
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3724      	adds	r7, #36	; 0x24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b20:	d301      	bcc.n	8000b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b22:	2301      	movs	r3, #1
 8000b24:	e00f      	b.n	8000b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <SysTick_Config+0x40>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2e:	210f      	movs	r1, #15
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	f7ff ff90 	bl	8000a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <SysTick_Config+0x40>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3e:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <SysTick_Config+0x40>)
 8000b40:	2207      	movs	r2, #7
 8000b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	e000e010 	.word	0xe000e010

08000b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff ff2d 	bl	80009bc <__NVIC_SetPriorityGrouping>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b086      	sub	sp, #24
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	4603      	mov	r3, r0
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
 8000b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b7c:	f7ff ff42 	bl	8000a04 <__NVIC_GetPriorityGrouping>
 8000b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	68b9      	ldr	r1, [r7, #8]
 8000b86:	6978      	ldr	r0, [r7, #20]
 8000b88:	f7ff ff90 	bl	8000aac <NVIC_EncodePriority>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b92:	4611      	mov	r1, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff5f 	bl	8000a58 <__NVIC_SetPriority>
}
 8000b9a:	bf00      	nop
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff35 	bl	8000a20 <__NVIC_EnableIRQ>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff ffa2 	bl	8000b10 <SysTick_Config>
 8000bcc:	4603      	mov	r3, r0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b085      	sub	sp, #20
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d008      	beq.n	8000c00 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2204      	movs	r2, #4
 8000bf2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e020      	b.n	8000c42 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f022 020e 	bic.w	r2, r2, #14
 8000c0e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f022 0201 	bic.w	r2, r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c28:	2101      	movs	r1, #1
 8000c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2201      	movs	r2, #1
 8000c34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr

08000c4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d005      	beq.n	8000c70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2204      	movs	r2, #4
 8000c68:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	73fb      	strb	r3, [r7, #15]
 8000c6e:	e051      	b.n	8000d14 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f022 020e 	bic.w	r2, r2, #14
 8000c7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f022 0201 	bic.w	r2, r2, #1
 8000c8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a22      	ldr	r2, [pc, #136]	; (8000d20 <HAL_DMA_Abort_IT+0xd4>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d029      	beq.n	8000cee <HAL_DMA_Abort_IT+0xa2>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a21      	ldr	r2, [pc, #132]	; (8000d24 <HAL_DMA_Abort_IT+0xd8>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d022      	beq.n	8000cea <HAL_DMA_Abort_IT+0x9e>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a1f      	ldr	r2, [pc, #124]	; (8000d28 <HAL_DMA_Abort_IT+0xdc>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d01a      	beq.n	8000ce4 <HAL_DMA_Abort_IT+0x98>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a1e      	ldr	r2, [pc, #120]	; (8000d2c <HAL_DMA_Abort_IT+0xe0>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d012      	beq.n	8000cde <HAL_DMA_Abort_IT+0x92>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <HAL_DMA_Abort_IT+0xe4>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d00a      	beq.n	8000cd8 <HAL_DMA_Abort_IT+0x8c>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <HAL_DMA_Abort_IT+0xe8>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d102      	bne.n	8000cd2 <HAL_DMA_Abort_IT+0x86>
 8000ccc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cd0:	e00e      	b.n	8000cf0 <HAL_DMA_Abort_IT+0xa4>
 8000cd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cd6:	e00b      	b.n	8000cf0 <HAL_DMA_Abort_IT+0xa4>
 8000cd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cdc:	e008      	b.n	8000cf0 <HAL_DMA_Abort_IT+0xa4>
 8000cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce2:	e005      	b.n	8000cf0 <HAL_DMA_Abort_IT+0xa4>
 8000ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce8:	e002      	b.n	8000cf0 <HAL_DMA_Abort_IT+0xa4>
 8000cea:	2310      	movs	r3, #16
 8000cec:	e000      	b.n	8000cf0 <HAL_DMA_Abort_IT+0xa4>
 8000cee:	2301      	movs	r3, #1
 8000cf0:	4a11      	ldr	r2, [pc, #68]	; (8000d38 <HAL_DMA_Abort_IT+0xec>)
 8000cf2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d003      	beq.n	8000d14 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	4798      	blx	r3
    } 
  }
  return status;
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40020008 	.word	0x40020008
 8000d24:	4002001c 	.word	0x4002001c
 8000d28:	40020030 	.word	0x40020030
 8000d2c:	40020044 	.word	0x40020044
 8000d30:	40020058 	.word	0x40020058
 8000d34:	4002006c 	.word	0x4002006c
 8000d38:	40020000 	.word	0x40020000

08000d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b08b      	sub	sp, #44	; 0x2c
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4e:	e169      	b.n	8001024 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d50:	2201      	movs	r2, #1
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	69fa      	ldr	r2, [r7, #28]
 8000d60:	4013      	ands	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	f040 8158 	bne.w	800101e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	4a9a      	ldr	r2, [pc, #616]	; (8000fdc <HAL_GPIO_Init+0x2a0>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d05e      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
 8000d78:	4a98      	ldr	r2, [pc, #608]	; (8000fdc <HAL_GPIO_Init+0x2a0>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d875      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000d7e:	4a98      	ldr	r2, [pc, #608]	; (8000fe0 <HAL_GPIO_Init+0x2a4>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d058      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
 8000d84:	4a96      	ldr	r2, [pc, #600]	; (8000fe0 <HAL_GPIO_Init+0x2a4>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d86f      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000d8a:	4a96      	ldr	r2, [pc, #600]	; (8000fe4 <HAL_GPIO_Init+0x2a8>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d052      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
 8000d90:	4a94      	ldr	r2, [pc, #592]	; (8000fe4 <HAL_GPIO_Init+0x2a8>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d869      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000d96:	4a94      	ldr	r2, [pc, #592]	; (8000fe8 <HAL_GPIO_Init+0x2ac>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d04c      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
 8000d9c:	4a92      	ldr	r2, [pc, #584]	; (8000fe8 <HAL_GPIO_Init+0x2ac>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d863      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000da2:	4a92      	ldr	r2, [pc, #584]	; (8000fec <HAL_GPIO_Init+0x2b0>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d046      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
 8000da8:	4a90      	ldr	r2, [pc, #576]	; (8000fec <HAL_GPIO_Init+0x2b0>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d85d      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000dae:	2b12      	cmp	r3, #18
 8000db0:	d82a      	bhi.n	8000e08 <HAL_GPIO_Init+0xcc>
 8000db2:	2b12      	cmp	r3, #18
 8000db4:	d859      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000db6:	a201      	add	r2, pc, #4	; (adr r2, 8000dbc <HAL_GPIO_Init+0x80>)
 8000db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dbc:	08000e37 	.word	0x08000e37
 8000dc0:	08000e11 	.word	0x08000e11
 8000dc4:	08000e23 	.word	0x08000e23
 8000dc8:	08000e65 	.word	0x08000e65
 8000dcc:	08000e6b 	.word	0x08000e6b
 8000dd0:	08000e6b 	.word	0x08000e6b
 8000dd4:	08000e6b 	.word	0x08000e6b
 8000dd8:	08000e6b 	.word	0x08000e6b
 8000ddc:	08000e6b 	.word	0x08000e6b
 8000de0:	08000e6b 	.word	0x08000e6b
 8000de4:	08000e6b 	.word	0x08000e6b
 8000de8:	08000e6b 	.word	0x08000e6b
 8000dec:	08000e6b 	.word	0x08000e6b
 8000df0:	08000e6b 	.word	0x08000e6b
 8000df4:	08000e6b 	.word	0x08000e6b
 8000df8:	08000e6b 	.word	0x08000e6b
 8000dfc:	08000e6b 	.word	0x08000e6b
 8000e00:	08000e19 	.word	0x08000e19
 8000e04:	08000e2d 	.word	0x08000e2d
 8000e08:	4a79      	ldr	r2, [pc, #484]	; (8000ff0 <HAL_GPIO_Init+0x2b4>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d013      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e0e:	e02c      	b.n	8000e6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	623b      	str	r3, [r7, #32]
          break;
 8000e16:	e029      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	623b      	str	r3, [r7, #32]
          break;
 8000e20:	e024      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	3308      	adds	r3, #8
 8000e28:	623b      	str	r3, [r7, #32]
          break;
 8000e2a:	e01f      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	330c      	adds	r3, #12
 8000e32:	623b      	str	r3, [r7, #32]
          break;
 8000e34:	e01a      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d102      	bne.n	8000e44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e3e:	2304      	movs	r3, #4
 8000e40:	623b      	str	r3, [r7, #32]
          break;
 8000e42:	e013      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d105      	bne.n	8000e58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69fa      	ldr	r2, [r7, #28]
 8000e54:	611a      	str	r2, [r3, #16]
          break;
 8000e56:	e009      	b.n	8000e6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69fa      	ldr	r2, [r7, #28]
 8000e60:	615a      	str	r2, [r3, #20]
          break;
 8000e62:	e003      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
          break;
 8000e68:	e000      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          break;
 8000e6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	2bff      	cmp	r3, #255	; 0xff
 8000e70:	d801      	bhi.n	8000e76 <HAL_GPIO_Init+0x13a>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	e001      	b.n	8000e7a <HAL_GPIO_Init+0x13e>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	2bff      	cmp	r3, #255	; 0xff
 8000e80:	d802      	bhi.n	8000e88 <HAL_GPIO_Init+0x14c>
 8000e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	e002      	b.n	8000e8e <HAL_GPIO_Init+0x152>
 8000e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8a:	3b08      	subs	r3, #8
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	210f      	movs	r1, #15
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	6a39      	ldr	r1, [r7, #32]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f000 80b1 	beq.w	800101e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ebc:	4b4d      	ldr	r3, [pc, #308]	; (8000ff4 <HAL_GPIO_Init+0x2b8>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a4c      	ldr	r2, [pc, #304]	; (8000ff4 <HAL_GPIO_Init+0x2b8>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b4a      	ldr	r3, [pc, #296]	; (8000ff4 <HAL_GPIO_Init+0x2b8>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ed4:	4a48      	ldr	r2, [pc, #288]	; (8000ff8 <HAL_GPIO_Init+0x2bc>)
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	089b      	lsrs	r3, r3, #2
 8000eda:	3302      	adds	r3, #2
 8000edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	220f      	movs	r2, #15
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a40      	ldr	r2, [pc, #256]	; (8000ffc <HAL_GPIO_Init+0x2c0>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d013      	beq.n	8000f28 <HAL_GPIO_Init+0x1ec>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a3f      	ldr	r2, [pc, #252]	; (8001000 <HAL_GPIO_Init+0x2c4>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d00d      	beq.n	8000f24 <HAL_GPIO_Init+0x1e8>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a3e      	ldr	r2, [pc, #248]	; (8001004 <HAL_GPIO_Init+0x2c8>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d007      	beq.n	8000f20 <HAL_GPIO_Init+0x1e4>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a3d      	ldr	r2, [pc, #244]	; (8001008 <HAL_GPIO_Init+0x2cc>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d101      	bne.n	8000f1c <HAL_GPIO_Init+0x1e0>
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e006      	b.n	8000f2a <HAL_GPIO_Init+0x1ee>
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	e004      	b.n	8000f2a <HAL_GPIO_Init+0x1ee>
 8000f20:	2302      	movs	r3, #2
 8000f22:	e002      	b.n	8000f2a <HAL_GPIO_Init+0x1ee>
 8000f24:	2301      	movs	r3, #1
 8000f26:	e000      	b.n	8000f2a <HAL_GPIO_Init+0x1ee>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f2c:	f002 0203 	and.w	r2, r2, #3
 8000f30:	0092      	lsls	r2, r2, #2
 8000f32:	4093      	lsls	r3, r2
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f3a:	492f      	ldr	r1, [pc, #188]	; (8000ff8 <HAL_GPIO_Init+0x2bc>)
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3e:	089b      	lsrs	r3, r3, #2
 8000f40:	3302      	adds	r3, #2
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d006      	beq.n	8000f62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f54:	4b2d      	ldr	r3, [pc, #180]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	492c      	ldr	r1, [pc, #176]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	608b      	str	r3, [r1, #8]
 8000f60:	e006      	b.n	8000f70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f62:	4b2a      	ldr	r3, [pc, #168]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	4928      	ldr	r1, [pc, #160]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d006      	beq.n	8000f8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f7c:	4b23      	ldr	r3, [pc, #140]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	4922      	ldr	r1, [pc, #136]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	60cb      	str	r3, [r1, #12]
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f8a:	4b20      	ldr	r3, [pc, #128]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	491e      	ldr	r1, [pc, #120]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000f94:	4013      	ands	r3, r2
 8000f96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d006      	beq.n	8000fb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	4918      	ldr	r1, [pc, #96]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	604b      	str	r3, [r1, #4]
 8000fb0:	e006      	b.n	8000fc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fb2:	4b16      	ldr	r3, [pc, #88]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	4914      	ldr	r1, [pc, #80]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d021      	beq.n	8001010 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	490e      	ldr	r1, [pc, #56]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	600b      	str	r3, [r1, #0]
 8000fd8:	e021      	b.n	800101e <HAL_GPIO_Init+0x2e2>
 8000fda:	bf00      	nop
 8000fdc:	10320000 	.word	0x10320000
 8000fe0:	10310000 	.word	0x10310000
 8000fe4:	10220000 	.word	0x10220000
 8000fe8:	10210000 	.word	0x10210000
 8000fec:	10120000 	.word	0x10120000
 8000ff0:	10110000 	.word	0x10110000
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40010000 	.word	0x40010000
 8000ffc:	40010800 	.word	0x40010800
 8001000:	40010c00 	.word	0x40010c00
 8001004:	40011000 	.word	0x40011000
 8001008:	40011400 	.word	0x40011400
 800100c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <HAL_GPIO_Init+0x304>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	43db      	mvns	r3, r3
 8001018:	4909      	ldr	r1, [pc, #36]	; (8001040 <HAL_GPIO_Init+0x304>)
 800101a:	4013      	ands	r3, r2
 800101c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	3301      	adds	r3, #1
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	fa22 f303 	lsr.w	r3, r2, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	f47f ae8e 	bne.w	8000d50 <HAL_GPIO_Init+0x14>
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	372c      	adds	r7, #44	; 0x2c
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	40010400 	.word	0x40010400

08001044 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001046:	b08b      	sub	sp, #44	; 0x2c
 8001048:	af06      	add	r7, sp, #24
 800104a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e0f1      	b.n	800123a <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d106      	bne.n	8001070 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f006 ff86 	bl	8007f7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2203      	movs	r2, #3
 8001074:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f003 f89d 	bl	80041bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	687e      	ldr	r6, [r7, #4]
 800108a:	466d      	mov	r5, sp
 800108c:	f106 0410 	add.w	r4, r6, #16
 8001090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001092:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001094:	6823      	ldr	r3, [r4, #0]
 8001096:	602b      	str	r3, [r5, #0]
 8001098:	1d33      	adds	r3, r6, #4
 800109a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800109c:	6838      	ldr	r0, [r7, #0]
 800109e:	f003 f867 	bl	8004170 <USB_CoreInit>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2202      	movs	r2, #2
 80010ac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e0c2      	b.n	800123a <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 f898 	bl	80041f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	e040      	b.n	8001148 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	440b      	add	r3, r1
 80010d6:	3301      	adds	r3, #1
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	1c5a      	adds	r2, r3, #1
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	440b      	add	r3, r1
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	1c5a      	adds	r2, r3, #1
 80010f6:	4613      	mov	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	440b      	add	r3, r1
 8001100:	3303      	adds	r3, #3
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001106:	7bfa      	ldrb	r2, [r7, #15]
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	440b      	add	r3, r1
 8001114:	3338      	adds	r3, #56	; 0x38
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	440b      	add	r3, r1
 8001128:	333c      	adds	r3, #60	; 0x3c
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800112e:	7bfa      	ldrb	r2, [r7, #15]
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	440b      	add	r3, r1
 800113c:	3340      	adds	r3, #64	; 0x40
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	3301      	adds	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	7bfa      	ldrb	r2, [r7, #15]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	429a      	cmp	r2, r3
 8001150:	d3b9      	bcc.n	80010c6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001152:	2300      	movs	r3, #0
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	e044      	b.n	80011e2 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001158:	7bfa      	ldrb	r2, [r7, #15]
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	440b      	add	r3, r1
 8001166:	f203 1369 	addw	r3, r3, #361	; 0x169
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	440b      	add	r3, r1
 800117c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001180:	7bfa      	ldrb	r2, [r7, #15]
 8001182:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001184:	7bfa      	ldrb	r2, [r7, #15]
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	4613      	mov	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	440b      	add	r3, r1
 8001192:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	440b      	add	r3, r1
 80011a8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	440b      	add	r3, r1
 80011be:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011c6:	7bfa      	ldrb	r2, [r7, #15]
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	440b      	add	r3, r1
 80011d4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	3301      	adds	r3, #1
 80011e0:	73fb      	strb	r3, [r7, #15]
 80011e2:	7bfa      	ldrb	r2, [r7, #15]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d3b5      	bcc.n	8001158 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	687e      	ldr	r6, [r7, #4]
 80011f4:	466d      	mov	r5, sp
 80011f6:	f106 0410 	add.w	r4, r6, #16
 80011fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011fe:	6823      	ldr	r3, [r4, #0]
 8001200:	602b      	str	r3, [r5, #0]
 8001202:	1d33      	adds	r3, r6, #4
 8001204:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001206:	6838      	ldr	r0, [r7, #0]
 8001208:	f002 fffe 	bl	8004208 <USB_DevInit>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d005      	beq.n	800121e <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2202      	movs	r2, #2
 8001216:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e00d      	b.n	800123a <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f005 fa7f 	bl	8006736 <USB_DevDisconnect>

  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001242 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001250:	2b01      	cmp	r3, #1
 8001252:	d101      	bne.n	8001258 <HAL_PCD_Start+0x16>
 8001254:	2302      	movs	r3, #2
 8001256:	e016      	b.n	8001286 <HAL_PCD_Start+0x44>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2201      	movs	r2, #1
 800125c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f002 ff93 	bl	8004190 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800126a:	2101      	movs	r1, #1
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f007 f8d4 	bl	800841a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f005 fa53 	bl	8006722 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b088      	sub	sp, #32
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f005 fa55 	bl	800674a <USB_ReadInterrupts>
 80012a0:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 fb04 	bl	80018ba <PCD_EP_ISR_Handler>

    return;
 80012b2:	e119      	b.n	80014e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d013      	beq.n	80012e6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012d0:	b292      	uxth	r2, r2
 80012d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f006 fecb 	bl	8008072 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80012dc:	2100      	movs	r1, #0
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 f905 	bl	80014ee <HAL_PCD_SetAddress>

    return;
 80012e4:	e100      	b.n	80014e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00c      	beq.n	800130a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001302:	b292      	uxth	r2, r2
 8001304:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001308:	e0ee      	b.n	80014e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00c      	beq.n	800132e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800131c:	b29a      	uxth	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001326:	b292      	uxth	r2, r2
 8001328:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800132c:	e0dc      	b.n	80014e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d027      	beq.n	8001388 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001340:	b29a      	uxth	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0204 	bic.w	r2, r2, #4
 800134a:	b292      	uxth	r2, r2
 800134c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001358:	b29a      	uxth	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0208 	bic.w	r2, r2, #8
 8001362:	b292      	uxth	r2, r2
 8001364:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f006 febb 	bl	80080e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001376:	b29a      	uxth	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001380:	b292      	uxth	r2, r2
 8001382:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001386:	e0af      	b.n	80014e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 8083 	beq.w	800149a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001394:	2300      	movs	r3, #0
 8001396:	77fb      	strb	r3, [r7, #31]
 8001398:	e010      	b.n	80013bc <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	7ffb      	ldrb	r3, [r7, #31]
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	441a      	add	r2, r3
 80013a6:	7ffb      	ldrb	r3, [r7, #31]
 80013a8:	8812      	ldrh	r2, [r2, #0]
 80013aa:	b292      	uxth	r2, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	3320      	adds	r3, #32
 80013b0:	443b      	add	r3, r7
 80013b2:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80013b6:	7ffb      	ldrb	r3, [r7, #31]
 80013b8:	3301      	adds	r3, #1
 80013ba:	77fb      	strb	r3, [r7, #31]
 80013bc:	7ffb      	ldrb	r3, [r7, #31]
 80013be:	2b07      	cmp	r3, #7
 80013c0:	d9eb      	bls.n	800139a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f042 0201 	orr.w	r2, r2, #1
 80013d4:	b292      	uxth	r2, r2
 80013d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0201 	bic.w	r2, r2, #1
 80013ec:	b292      	uxth	r2, r2
 80013ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80013f2:	bf00      	nop
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f6      	beq.n	80013f4 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800140e:	b29a      	uxth	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001418:	b292      	uxth	r2, r2
 800141a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800141e:	2300      	movs	r3, #0
 8001420:	77fb      	strb	r3, [r7, #31]
 8001422:	e00f      	b.n	8001444 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001424:	7ffb      	ldrb	r3, [r7, #31]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	4611      	mov	r1, r2
 800142c:	7ffa      	ldrb	r2, [r7, #31]
 800142e:	0092      	lsls	r2, r2, #2
 8001430:	440a      	add	r2, r1
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	3320      	adds	r3, #32
 8001436:	443b      	add	r3, r7
 8001438:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800143c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800143e:	7ffb      	ldrb	r3, [r7, #31]
 8001440:	3301      	adds	r3, #1
 8001442:	77fb      	strb	r3, [r7, #31]
 8001444:	7ffb      	ldrb	r3, [r7, #31]
 8001446:	2b07      	cmp	r3, #7
 8001448:	d9ec      	bls.n	8001424 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001452:	b29a      	uxth	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f042 0208 	orr.w	r2, r2, #8
 800145c:	b292      	uxth	r2, r2
 800145e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800146a:	b29a      	uxth	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001474:	b292      	uxth	r2, r2
 8001476:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001482:	b29a      	uxth	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f042 0204 	orr.w	r2, r2, #4
 800148c:	b292      	uxth	r2, r2
 800148e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f006 fe0c 	bl	80080b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001498:	e026      	b.n	80014e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00f      	beq.n	80014c4 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014b6:	b292      	uxth	r2, r2
 80014b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f006 fdca 	bl	8008056 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80014c2:	e011      	b.n	80014e8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00c      	beq.n	80014e8 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014e0:	b292      	uxth	r2, r2
 80014e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80014e6:	bf00      	nop
  }
}
 80014e8:	3720      	adds	r7, #32
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	460b      	mov	r3, r1
 80014f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <HAL_PCD_SetAddress+0x1a>
 8001504:	2302      	movs	r3, #2
 8001506:	e013      	b.n	8001530 <HAL_PCD_SetAddress+0x42>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	78fa      	ldrb	r2, [r7, #3]
 8001514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	78fa      	ldrb	r2, [r7, #3]
 800151e:	4611      	mov	r1, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f005 f8eb 	bl	80066fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	4608      	mov	r0, r1
 8001542:	4611      	mov	r1, r2
 8001544:	461a      	mov	r2, r3
 8001546:	4603      	mov	r3, r0
 8001548:	70fb      	strb	r3, [r7, #3]
 800154a:	460b      	mov	r3, r1
 800154c:	803b      	strh	r3, [r7, #0]
 800154e:	4613      	mov	r3, r2
 8001550:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001556:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800155a:	2b00      	cmp	r3, #0
 800155c:	da0e      	bge.n	800157c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800155e:	78fb      	ldrb	r3, [r7, #3]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	1c5a      	adds	r2, r3, #1
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2201      	movs	r2, #1
 8001578:	705a      	strb	r2, [r3, #1]
 800157a:	e00e      	b.n	800159a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	f003 0207 	and.w	r2, r3, #7
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2200      	movs	r2, #0
 8001598:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80015a6:	883a      	ldrh	r2, [r7, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	78ba      	ldrb	r2, [r7, #2]
 80015b0:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80015b2:	78bb      	ldrb	r3, [r7, #2]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d102      	bne.n	80015be <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <HAL_PCD_EP_Open+0x94>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e00e      	b.n	80015ea <HAL_PCD_EP_Open+0xb2>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68f9      	ldr	r1, [r7, #12]
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 fe34 	bl	8004248 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80015e8:	7afb      	ldrb	r3, [r7, #11]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	460b      	mov	r3, r1
 80015fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001602:	2b00      	cmp	r3, #0
 8001604:	da0e      	bge.n	8001624 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001606:	78fb      	ldrb	r3, [r7, #3]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2201      	movs	r2, #1
 8001620:	705a      	strb	r2, [r3, #1]
 8001622:	e00e      	b.n	8001642 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	f003 0207 	and.w	r2, r3, #7
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2200      	movs	r2, #0
 8001640:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	b2da      	uxtb	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001654:	2b01      	cmp	r3, #1
 8001656:	d101      	bne.n	800165c <HAL_PCD_EP_Close+0x6a>
 8001658:	2302      	movs	r3, #2
 800165a:	e00e      	b.n	800167a <HAL_PCD_EP_Close+0x88>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68f9      	ldr	r1, [r7, #12]
 800166a:	4618      	mov	r0, r3
 800166c:	f003 f9ac 	bl	80049c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	60f8      	str	r0, [r7, #12]
 800168a:	607a      	str	r2, [r7, #4]
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	460b      	mov	r3, r1
 8001690:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001692:	7afb      	ldrb	r3, [r7, #11]
 8001694:	f003 0207 	and.w	r2, r3, #7
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	4413      	add	r3, r2
 80016a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2200      	movs	r2, #0
 80016ba:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	2200      	movs	r2, #0
 80016c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016c2:	7afb      	ldrb	r3, [r7, #11]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6979      	ldr	r1, [r7, #20]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 fb63 	bl	8004da0 <USB_EPStartXfer>

  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	607a      	str	r2, [r7, #4]
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	460b      	mov	r3, r1
 80016f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016f4:	7afb      	ldrb	r3, [r7, #11]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	4413      	add	r3, r2
 8001708:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2201      	movs	r2, #1
 800172e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001730:	7afb      	ldrb	r3, [r7, #11]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	b2da      	uxtb	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6979      	ldr	r1, [r7, #20]
 8001742:	4618      	mov	r0, r3
 8001744:	f003 fb2c 	bl	8004da0 <USB_EPStartXfer>

  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	460b      	mov	r3, r1
 800175c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	f003 0207 	and.w	r2, r3, #7
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	429a      	cmp	r2, r3
 800176a:	d901      	bls.n	8001770 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e04c      	b.n	800180a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001774:	2b00      	cmp	r3, #0
 8001776:	da0e      	bge.n	8001796 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	4413      	add	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2201      	movs	r2, #1
 8001792:	705a      	strb	r2, [r3, #1]
 8001794:	e00c      	b.n	80017b0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001796:	78fa      	ldrb	r2, [r7, #3]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	4413      	add	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2201      	movs	r2, #1
 80017b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_PCD_EP_SetStall+0x7e>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e01c      	b.n	800180a <HAL_PCD_EP_SetStall+0xb8>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68f9      	ldr	r1, [r7, #12]
 80017de:	4618      	mov	r0, r3
 80017e0:	f004 fe8f 	bl	8006502 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d108      	bne.n	8001800 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80017f8:	4619      	mov	r1, r3
 80017fa:	4610      	mov	r0, r2
 80017fc:	f004 ffb4 	bl	8006768 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b084      	sub	sp, #16
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	460b      	mov	r3, r1
 800181c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	f003 020f 	and.w	r2, r3, #15
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	d901      	bls.n	8001830 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e040      	b.n	80018b2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001834:	2b00      	cmp	r3, #0
 8001836:	da0e      	bge.n	8001856 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	4413      	add	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2201      	movs	r2, #1
 8001852:	705a      	strb	r2, [r3, #1]
 8001854:	e00e      	b.n	8001874 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	f003 0207 	and.w	r2, r3, #7
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	4413      	add	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2200      	movs	r2, #0
 8001872:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2200      	movs	r2, #0
 8001878:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	b2da      	uxtb	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_PCD_EP_ClrStall+0x82>
 8001890:	2302      	movs	r3, #2
 8001892:	e00e      	b.n	80018b2 <HAL_PCD_EP_ClrStall+0xa0>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68f9      	ldr	r1, [r7, #12]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f004 fe7d 	bl	80065a2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b096      	sub	sp, #88	; 0x58
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80018c2:	e3bf      	b.n	8002044 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80018d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80018de:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f040 8179 	bne.w	8001bda <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80018e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80018ec:	f003 0310 	and.w	r3, r3, #16
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d152      	bne.n	800199a <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001904:	81fb      	strh	r3, [r7, #14]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	89fb      	ldrh	r3, [r7, #14]
 800190c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001914:	b29b      	uxth	r3, r3
 8001916:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3328      	adds	r3, #40	; 0x28
 800191c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001926:	b29b      	uxth	r3, r3
 8001928:	461a      	mov	r2, r3
 800192a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	4413      	add	r3, r2
 8001932:	3302      	adds	r3, #2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6812      	ldr	r2, [r2, #0]
 800193a:	4413      	add	r3, r2
 800193c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001948:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800194a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800194c:	695a      	ldr	r2, [r3, #20]
 800194e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	441a      	add	r2, r3
 8001954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001956:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001958:	2100      	movs	r1, #0
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f006 fb61 	bl	8008022 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 836b 	beq.w	8002044 <PCD_EP_ISR_Handler+0x78a>
 800196e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	2b00      	cmp	r3, #0
 8001974:	f040 8366 	bne.w	8002044 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800197e:	b2db      	uxtb	r3, r3
 8001980:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001984:	b2da      	uxtb	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	b292      	uxth	r2, r2
 800198c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001998:	e354      	b.n	8002044 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019a0:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80019ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80019b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d034      	beq.n	8001a22 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4413      	add	r3, r2
 80019cc:	3306      	adds	r3, #6
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	4413      	add	r3, r2
 80019d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019e2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80019ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80019f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	f004 ff06 	bl	8006808 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a08:	4013      	ands	r3, r2
 8001a0a:	823b      	strh	r3, [r7, #16]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	8a3a      	ldrh	r2, [r7, #16]
 8001a12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a16:	b292      	uxth	r2, r2
 8001a18:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f006 fad4 	bl	8007fc8 <HAL_PCD_SetupStageCallback>
 8001a20:	e310      	b.n	8002044 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a22:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f280 830c 	bge.w	8002044 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a38:	4013      	ands	r3, r2
 8001a3a:	83fb      	strh	r3, [r7, #30]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	8bfa      	ldrh	r2, [r7, #30]
 8001a42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a46:	b292      	uxth	r2, r2
 8001a48:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	3306      	adds	r3, #6
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6812      	ldr	r2, [r2, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a74:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d019      	beq.n	8001ab2 <PCD_EP_ISR_Handler+0x1f8>
 8001a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d015      	beq.n	8001ab2 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6818      	ldr	r0, [r3, #0]
 8001a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8c:	6959      	ldr	r1, [r3, #20]
 8001a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a90:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a94:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	f004 feb6 	bl	8006808 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a9e:	695a      	ldr	r2, [r3, #20]
 8001aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	441a      	add	r2, r3
 8001aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001aaa:	2100      	movs	r1, #0
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f006 fa9d 	bl	8007fec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001abc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f040 82bd 	bne.w	8002044 <PCD_EP_ISR_Handler+0x78a>
 8001aca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ace:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001ad2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001ad6:	f000 82b5 	beq.w	8002044 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	61bb      	str	r3, [r7, #24]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	4413      	add	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	801a      	strh	r2, [r3, #0]
 8001b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	2b3e      	cmp	r3, #62	; 0x3e
 8001b10:	d91d      	bls.n	8001b4e <PCD_EP_ISR_Handler+0x294>
 8001b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	095b      	lsrs	r3, r3, #5
 8001b18:	647b      	str	r3, [r7, #68]	; 0x44
 8001b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d102      	bne.n	8001b2c <PCD_EP_ISR_Handler+0x272>
 8001b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	647b      	str	r3, [r7, #68]	; 0x44
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	029b      	lsls	r3, r3, #10
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	801a      	strh	r2, [r3, #0]
 8001b4c:	e026      	b.n	8001b9c <PCD_EP_ISR_Handler+0x2e2>
 8001b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10a      	bne.n	8001b6c <PCD_EP_ISR_Handler+0x2b2>
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	801a      	strh	r2, [r3, #0]
 8001b6a:	e017      	b.n	8001b9c <PCD_EP_ISR_Handler+0x2e2>
 8001b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	085b      	lsrs	r3, r3, #1
 8001b72:	647b      	str	r3, [r7, #68]	; 0x44
 8001b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <PCD_EP_ISR_Handler+0x2cc>
 8001b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b82:	3301      	adds	r3, #1
 8001b84:	647b      	str	r3, [r7, #68]	; 0x44
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	029b      	lsls	r3, r3, #10
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	4313      	orrs	r3, r2
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bac:	827b      	strh	r3, [r7, #18]
 8001bae:	8a7b      	ldrh	r3, [r7, #18]
 8001bb0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001bb4:	827b      	strh	r3, [r7, #18]
 8001bb6:	8a7b      	ldrh	r3, [r7, #18]
 8001bb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001bbc:	827b      	strh	r3, [r7, #18]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	8a7b      	ldrh	r3, [r7, #18]
 8001bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	8013      	strh	r3, [r2, #0]
 8001bd8:	e234      	b.n	8002044 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001bee:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f280 80fc 	bge.w	8001df0 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c0e:	4013      	ands	r3, r2
 8001c10:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001c26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c2a:	b292      	uxth	r2, r2
 8001c2c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c2e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c46:	7b1b      	ldrb	r3, [r3, #12]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d125      	bne.n	8001c98 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	461a      	mov	r2, r3
 8001c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4413      	add	r3, r2
 8001c60:	3306      	adds	r3, #6
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	4413      	add	r3, r2
 8001c6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c74:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001c78:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 8092 	beq.w	8001da6 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c88:	6959      	ldr	r1, [r3, #20]
 8001c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8c:	88da      	ldrh	r2, [r3, #6]
 8001c8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c92:	f004 fdb9 	bl	8006808 <USB_ReadPMA>
 8001c96:	e086      	b.n	8001da6 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9a:	78db      	ldrb	r3, [r3, #3]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d10a      	bne.n	8001cb6 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001ca0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f9d9 	bl	8002060 <HAL_PCD_EP_DB_Receive>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001cb4:	e077      	b.n	8001da6 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cd0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	441a      	add	r2, r3
 8001ce2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cf2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d024      	beq.n	8001d5e <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4413      	add	r3, r2
 8001d28:	3302      	adds	r3, #2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	4413      	add	r3, r2
 8001d32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d3c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001d40:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d02e      	beq.n	8001da6 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d4e:	6959      	ldr	r1, [r3, #20]
 8001d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d52:	891a      	ldrh	r2, [r3, #8]
 8001d54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d58:	f004 fd56 	bl	8006808 <USB_ReadPMA>
 8001d5c:	e023      	b.n	8001da6 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4413      	add	r3, r2
 8001d72:	3306      	adds	r3, #6
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d86:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001d8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d009      	beq.n	8001da6 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d98:	6959      	ldr	r1, [r3, #20]
 8001d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d9c:	895a      	ldrh	r2, [r3, #10]
 8001d9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001da2:	f004 fd31 	bl	8006808 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da8:	69da      	ldr	r2, [r3, #28]
 8001daa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001dae:	441a      	add	r2, r3
 8001db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db6:	695a      	ldr	r2, [r3, #20]
 8001db8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001dbc:	441a      	add	r2, r3
 8001dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d005      	beq.n	8001dd6 <PCD_EP_ISR_Handler+0x51c>
 8001dca:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d206      	bcs.n	8001de4 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f006 f905 	bl	8007fec <HAL_PCD_DataOutStageCallback>
 8001de2:	e005      	b.n	8001df0 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001dea:	4618      	mov	r0, r3
 8001dec:	f002 ffd8 	bl	8004da0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001df0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 8123 	beq.w	8002044 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001dfe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	4413      	add	r3, r2
 8001e10:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e2c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	441a      	add	r2, r3
 8001e3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e50:	78db      	ldrb	r3, [r3, #3]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	f040 80a2 	bne.w	8001f9c <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001e5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e60:	7b1b      	ldrb	r3, [r3, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8093 	beq.w	8001f8e <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e68:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d046      	beq.n	8001f02 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e76:	785b      	ldrb	r3, [r3, #1]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d126      	bne.n	8001eca <PCD_EP_ISR_Handler+0x610>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	4413      	add	r3, r2
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
 8001e94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	011a      	lsls	r2, r3, #4
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ea2:	623b      	str	r3, [r7, #32]
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	801a      	strh	r2, [r3, #0]
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	801a      	strh	r2, [r3, #0]
 8001ec8:	e061      	b.n	8001f8e <PCD_EP_ISR_Handler+0x6d4>
 8001eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ecc:	785b      	ldrb	r3, [r3, #1]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d15d      	bne.n	8001f8e <PCD_EP_ISR_Handler+0x6d4>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee6:	4413      	add	r3, r2
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	011a      	lsls	r2, r3, #4
 8001ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efc:	2200      	movs	r2, #0
 8001efe:	801a      	strh	r2, [r3, #0]
 8001f00:	e045      	b.n	8001f8e <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f0a:	785b      	ldrb	r3, [r3, #1]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d126      	bne.n	8001f5e <PCD_EP_ISR_Handler+0x6a4>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	637b      	str	r3, [r7, #52]	; 0x34
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f24:	4413      	add	r3, r2
 8001f26:	637b      	str	r3, [r7, #52]	; 0x34
 8001f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	011a      	lsls	r2, r3, #4
 8001f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f30:	4413      	add	r3, r2
 8001f32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f36:	633b      	str	r3, [r7, #48]	; 0x30
 8001f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f46:	801a      	strh	r2, [r3, #0]
 8001f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5a:	801a      	strh	r2, [r3, #0]
 8001f5c:	e017      	b.n	8001f8e <PCD_EP_ISR_Handler+0x6d4>
 8001f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f60:	785b      	ldrb	r3, [r3, #1]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d113      	bne.n	8001f8e <PCD_EP_ISR_Handler+0x6d4>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f74:	4413      	add	r3, r2
 8001f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	011a      	lsls	r2, r3, #4
 8001f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f80:	4413      	add	r3, r2
 8001f82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f86:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	4619      	mov	r1, r3
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f006 f844 	bl	8008022 <HAL_PCD_DataInStageCallback>
 8001f9a:	e053      	b.n	8002044 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001f9c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d146      	bne.n	8002036 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4413      	add	r3, r2
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fd0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd6:	699a      	ldr	r2, [r3, #24]
 8001fd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d907      	bls.n	8001ff0 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe2:	699a      	ldr	r2, [r3, #24]
 8001fe4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001fe8:	1ad2      	subs	r2, r2, r3
 8001fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fec:	619a      	str	r2, [r3, #24]
 8001fee:	e002      	b.n	8001ff6 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	4619      	mov	r1, r3
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f006 f80c 	bl	8008022 <HAL_PCD_DataInStageCallback>
 800200a:	e01b      	b.n	8002044 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800200c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800200e:	695a      	ldr	r2, [r3, #20]
 8002010:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002014:	441a      	add	r2, r3
 8002016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002018:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800201a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800201c:	69da      	ldr	r2, [r3, #28]
 800201e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002022:	441a      	add	r2, r3
 8002024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002026:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800202e:	4618      	mov	r0, r3
 8002030:	f002 feb6 	bl	8004da0 <USB_EPStartXfer>
 8002034:	e006      	b.n	8002044 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002036:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800203a:	461a      	mov	r2, r3
 800203c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f91b 	bl	800227a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800204c:	b29b      	uxth	r3, r3
 800204e:	b21b      	sxth	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	f6ff ac37 	blt.w	80018c4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3758      	adds	r7, #88	; 0x58
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	4613      	mov	r3, r2
 800206c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d07e      	beq.n	8002176 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002080:	b29b      	uxth	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	3302      	adds	r3, #2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	4413      	add	r3, r2
 8002096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020a0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	699a      	ldr	r2, [r3, #24]
 80020a6:	8b7b      	ldrh	r3, [r7, #26]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d306      	bcc.n	80020ba <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	699a      	ldr	r2, [r3, #24]
 80020b0:	8b7b      	ldrh	r3, [r7, #26]
 80020b2:	1ad2      	subs	r2, r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	619a      	str	r2, [r3, #24]
 80020b8:	e002      	b.n	80020c0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d123      	bne.n	8002110 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e2:	833b      	strh	r3, [r7, #24]
 80020e4:	8b3b      	ldrh	r3, [r7, #24]
 80020e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020ea:	833b      	strh	r3, [r7, #24]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	441a      	add	r2, r3
 80020fa:	8b3b      	ldrh	r3, [r7, #24]
 80020fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800210c:	b29b      	uxth	r3, r3
 800210e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01f      	beq.n	800215a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	b29b      	uxth	r3, r3
 800212c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002134:	82fb      	strh	r3, [r7, #22]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	441a      	add	r2, r3
 8002144:	8afb      	ldrh	r3, [r7, #22]
 8002146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800214a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800214e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002152:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002156:	b29b      	uxth	r3, r3
 8002158:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800215a:	8b7b      	ldrh	r3, [r7, #26]
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 8087 	beq.w	8002270 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	6959      	ldr	r1, [r3, #20]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	891a      	ldrh	r2, [r3, #8]
 800216e:	8b7b      	ldrh	r3, [r7, #26]
 8002170:	f004 fb4a 	bl	8006808 <USB_ReadPMA>
 8002174:	e07c      	b.n	8002270 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800217e:	b29b      	uxth	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	3306      	adds	r3, #6
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	4413      	add	r3, r2
 8002194:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800219e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	699a      	ldr	r2, [r3, #24]
 80021a4:	8b7b      	ldrh	r3, [r7, #26]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d306      	bcc.n	80021b8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	8b7b      	ldrh	r3, [r7, #26]
 80021b0:	1ad2      	subs	r2, r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	619a      	str	r2, [r3, #24]
 80021b6:	e002      	b.n	80021be <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2200      	movs	r2, #0
 80021bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d123      	bne.n	800220e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e0:	83fb      	strh	r3, [r7, #30]
 80021e2:	8bfb      	ldrh	r3, [r7, #30]
 80021e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021e8:	83fb      	strh	r3, [r7, #30]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	441a      	add	r2, r3
 80021f8:	8bfb      	ldrh	r3, [r7, #30]
 80021fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800220a:	b29b      	uxth	r3, r3
 800220c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002214:	2b00      	cmp	r3, #0
 8002216:	d11f      	bne.n	8002258 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	b29b      	uxth	r3, r3
 800222a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800222e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002232:	83bb      	strh	r3, [r7, #28]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	441a      	add	r2, r3
 8002242:	8bbb      	ldrh	r3, [r7, #28]
 8002244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800224c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002250:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002254:	b29b      	uxth	r3, r3
 8002256:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002258:	8b7b      	ldrh	r3, [r7, #26]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d008      	beq.n	8002270 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	6959      	ldr	r1, [r3, #20]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	895a      	ldrh	r2, [r3, #10]
 800226a:	8b7b      	ldrh	r3, [r7, #26]
 800226c:	f004 facc 	bl	8006808 <USB_ReadPMA>
    }
  }

  return count;
 8002270:	8b7b      	ldrh	r3, [r7, #26]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3720      	adds	r7, #32
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b0a4      	sub	sp, #144	; 0x90
 800227e:	af00      	add	r7, sp, #0
 8002280:	60f8      	str	r0, [r7, #12]
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	4613      	mov	r3, r2
 8002286:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002288:	88fb      	ldrh	r3, [r7, #6]
 800228a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 81dd 	beq.w	800264e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800229c:	b29b      	uxth	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4413      	add	r3, r2
 80022a8:	3302      	adds	r3, #2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022bc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	699a      	ldr	r2, [r3, #24]
 80022c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d907      	bls.n	80022dc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	699a      	ldr	r2, [r3, #24]
 80022d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022d4:	1ad2      	subs	r2, r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	619a      	str	r2, [r3, #24]
 80022da:	e002      	b.n	80022e2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2200      	movs	r2, #0
 80022e0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f040 80b9 	bne.w	800245e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	785b      	ldrb	r3, [r3, #1]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d126      	bne.n	8002342 <HAL_PCD_EP_DB_Transmit+0xc8>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002302:	b29b      	uxth	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002308:	4413      	add	r3, r2
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	011a      	lsls	r2, r3, #4
 8002312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002314:	4413      	add	r3, r2
 8002316:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28
 800231c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	b29b      	uxth	r3, r3
 8002322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002326:	b29a      	uxth	r2, r3
 8002328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232a:	801a      	strh	r2, [r3, #0]
 800232c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	b29b      	uxth	r3, r3
 8002332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800233a:	b29a      	uxth	r2, r3
 800233c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233e:	801a      	strh	r2, [r3, #0]
 8002340:	e01a      	b.n	8002378 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	785b      	ldrb	r3, [r3, #1]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d116      	bne.n	8002378 <HAL_PCD_EP_DB_Transmit+0xfe>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	637b      	str	r3, [r7, #52]	; 0x34
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002358:	b29b      	uxth	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800235e:	4413      	add	r3, r2
 8002360:	637b      	str	r3, [r7, #52]	; 0x34
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	011a      	lsls	r2, r3, #4
 8002368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800236a:	4413      	add	r3, r2
 800236c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002370:	633b      	str	r3, [r7, #48]	; 0x30
 8002372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002374:	2200      	movs	r2, #0
 8002376:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	785b      	ldrb	r3, [r3, #1]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d126      	bne.n	80023d4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	61fb      	str	r3, [r7, #28]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002394:	b29b      	uxth	r3, r3
 8002396:	461a      	mov	r2, r3
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	4413      	add	r3, r2
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	011a      	lsls	r2, r3, #4
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	4413      	add	r3, r2
 80023a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023ac:	61bb      	str	r3, [r7, #24]
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	801a      	strh	r2, [r3, #0]
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	801a      	strh	r2, [r3, #0]
 80023d2:	e017      	b.n	8002404 <HAL_PCD_EP_DB_Transmit+0x18a>
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	785b      	ldrb	r3, [r3, #1]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d113      	bne.n	8002404 <HAL_PCD_EP_DB_Transmit+0x18a>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	461a      	mov	r2, r3
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	4413      	add	r3, r2
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	011a      	lsls	r2, r3, #4
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	4413      	add	r3, r2
 80023f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023fc:	623b      	str	r3, [r7, #32]
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	2200      	movs	r2, #0
 8002402:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	4619      	mov	r1, r3
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f005 fe09 	bl	8008022 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 82fc 	beq.w	8002a14 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	461a      	mov	r2, r3
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	b29b      	uxth	r3, r3
 800242e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002436:	82fb      	strh	r3, [r7, #22]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	461a      	mov	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	441a      	add	r2, r3
 8002446:	8afb      	ldrh	r3, [r7, #22]
 8002448:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800244c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002450:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002458:	b29b      	uxth	r3, r3
 800245a:	8013      	strh	r3, [r2, #0]
 800245c:	e2da      	b.n	8002a14 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800245e:	88fb      	ldrh	r3, [r7, #6]
 8002460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d021      	beq.n	80024ac <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	b29b      	uxth	r3, r3
 800247a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800247e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002482:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	441a      	add	r2, r3
 8002494:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800249c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	f040 82ae 	bne.w	8002a14 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024c0:	441a      	add	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	69da      	ldr	r2, [r3, #28]
 80024ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024ce:	441a      	add	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	6a1a      	ldr	r2, [r3, #32]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d30b      	bcc.n	80024f8 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	6a1a      	ldr	r2, [r3, #32]
 80024ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024f0:	1ad2      	subs	r2, r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	621a      	str	r2, [r3, #32]
 80024f6:	e017      	b.n	8002528 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d108      	bne.n	8002512 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002500:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002504:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002510:	e00a      	b.n	8002528 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2200      	movs	r2, #0
 8002526:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	785b      	ldrb	r3, [r3, #1]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d165      	bne.n	80025fc <HAL_PCD_EP_DB_Transmit+0x382>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800253e:	b29b      	uxth	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002544:	4413      	add	r3, r2
 8002546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	011a      	lsls	r2, r3, #4
 800254e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002550:	4413      	add	r3, r2
 8002552:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002556:	63bb      	str	r3, [r7, #56]	; 0x38
 8002558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	b29b      	uxth	r3, r3
 800255e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002562:	b29a      	uxth	r2, r3
 8002564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002566:	801a      	strh	r2, [r3, #0]
 8002568:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800256c:	2b3e      	cmp	r3, #62	; 0x3e
 800256e:	d91d      	bls.n	80025ac <HAL_PCD_EP_DB_Transmit+0x332>
 8002570:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002574:	095b      	lsrs	r3, r3, #5
 8002576:	64bb      	str	r3, [r7, #72]	; 0x48
 8002578:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	2b00      	cmp	r3, #0
 8002582:	d102      	bne.n	800258a <HAL_PCD_EP_DB_Transmit+0x310>
 8002584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002586:	3b01      	subs	r3, #1
 8002588:	64bb      	str	r3, [r7, #72]	; 0x48
 800258a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	b29a      	uxth	r2, r3
 8002590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002592:	b29b      	uxth	r3, r3
 8002594:	029b      	lsls	r3, r3, #10
 8002596:	b29b      	uxth	r3, r3
 8002598:	4313      	orrs	r3, r2
 800259a:	b29b      	uxth	r3, r3
 800259c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a8:	801a      	strh	r2, [r3, #0]
 80025aa:	e044      	b.n	8002636 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10a      	bne.n	80025ca <HAL_PCD_EP_DB_Transmit+0x350>
 80025b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c6:	801a      	strh	r2, [r3, #0]
 80025c8:	e035      	b.n	8002636 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025ce:	085b      	lsrs	r3, r3, #1
 80025d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80025d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <HAL_PCD_EP_DB_Transmit+0x36a>
 80025de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025e0:	3301      	adds	r3, #1
 80025e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80025e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	029b      	lsls	r3, r3, #10
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	4313      	orrs	r3, r2
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f8:	801a      	strh	r2, [r3, #0]
 80025fa:	e01c      	b.n	8002636 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	785b      	ldrb	r3, [r3, #1]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d118      	bne.n	8002636 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	647b      	str	r3, [r7, #68]	; 0x44
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002612:	b29b      	uxth	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002618:	4413      	add	r3, r2
 800261a:	647b      	str	r3, [r7, #68]	; 0x44
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	011a      	lsls	r2, r3, #4
 8002622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002624:	4413      	add	r3, r2
 8002626:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800262a:	643b      	str	r3, [r7, #64]	; 0x40
 800262c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002630:	b29a      	uxth	r2, r3
 8002632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002634:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6818      	ldr	r0, [r3, #0]
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	6959      	ldr	r1, [r3, #20]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	891a      	ldrh	r2, [r3, #8]
 8002642:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002646:	b29b      	uxth	r3, r3
 8002648:	f004 f899 	bl	800677e <USB_WritePMA>
 800264c:	e1e2      	b.n	8002a14 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002656:	b29b      	uxth	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4413      	add	r3, r2
 8002662:	3306      	adds	r3, #6
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	4413      	add	r3, r2
 800266c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002676:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002682:	429a      	cmp	r2, r3
 8002684:	d307      	bcc.n	8002696 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800268e:	1ad2      	subs	r2, r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	619a      	str	r2, [r3, #24]
 8002694:	e002      	b.n	800269c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2200      	movs	r2, #0
 800269a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f040 80c0 	bne.w	8002826 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	785b      	ldrb	r3, [r3, #1]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d126      	bne.n	80026fc <HAL_PCD_EP_DB_Transmit+0x482>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026bc:	b29b      	uxth	r3, r3
 80026be:	461a      	mov	r2, r3
 80026c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026c2:	4413      	add	r3, r2
 80026c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	011a      	lsls	r2, r3, #4
 80026cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026ce:	4413      	add	r3, r2
 80026d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80026d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026e4:	801a      	strh	r2, [r3, #0]
 80026e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026f8:	801a      	strh	r2, [r3, #0]
 80026fa:	e01a      	b.n	8002732 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	785b      	ldrb	r3, [r3, #1]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d116      	bne.n	8002732 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	667b      	str	r3, [r7, #100]	; 0x64
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002712:	b29b      	uxth	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002718:	4413      	add	r3, r2
 800271a:	667b      	str	r3, [r7, #100]	; 0x64
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	011a      	lsls	r2, r3, #4
 8002722:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002724:	4413      	add	r3, r2
 8002726:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800272a:	663b      	str	r3, [r7, #96]	; 0x60
 800272c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800272e:	2200      	movs	r2, #0
 8002730:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	677b      	str	r3, [r7, #116]	; 0x74
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	785b      	ldrb	r3, [r3, #1]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d12b      	bne.n	8002798 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800274e:	b29b      	uxth	r3, r3
 8002750:	461a      	mov	r2, r3
 8002752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002754:	4413      	add	r3, r2
 8002756:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	011a      	lsls	r2, r3, #4
 800275e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002760:	4413      	add	r3, r2
 8002762:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002766:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800276a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	b29b      	uxth	r3, r3
 8002772:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002776:	b29a      	uxth	r2, r3
 8002778:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800277c:	801a      	strh	r2, [r3, #0]
 800277e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	b29b      	uxth	r3, r3
 8002786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800278a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800278e:	b29a      	uxth	r2, r3
 8002790:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002794:	801a      	strh	r2, [r3, #0]
 8002796:	e017      	b.n	80027c8 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	785b      	ldrb	r3, [r3, #1]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d113      	bne.n	80027c8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	461a      	mov	r2, r3
 80027ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ae:	4413      	add	r3, r2
 80027b0:	677b      	str	r3, [r7, #116]	; 0x74
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	011a      	lsls	r2, r3, #4
 80027b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ba:	4413      	add	r3, r2
 80027bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027c0:	673b      	str	r3, [r7, #112]	; 0x70
 80027c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027c4:	2200      	movs	r2, #0
 80027c6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	4619      	mov	r1, r3
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f005 fc27 	bl	8008022 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027d4:	88fb      	ldrh	r3, [r7, #6]
 80027d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f040 811a 	bne.w	8002a14 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fa:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	441a      	add	r2, r3
 800280c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002818:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800281c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002820:	b29b      	uxth	r3, r3
 8002822:	8013      	strh	r3, [r2, #0]
 8002824:	e0f6      	b.n	8002a14 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002826:	88fb      	ldrh	r3, [r7, #6]
 8002828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d121      	bne.n	8002874 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	b29b      	uxth	r3, r3
 8002842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	441a      	add	r2, r3
 800285c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002868:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800286c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002870:	b29b      	uxth	r3, r3
 8002872:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800287a:	2b01      	cmp	r3, #1
 800287c:	f040 80ca 	bne.w	8002a14 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	695a      	ldr	r2, [r3, #20]
 8002884:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002888:	441a      	add	r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	69da      	ldr	r2, [r3, #28]
 8002892:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002896:	441a      	add	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	6a1a      	ldr	r2, [r3, #32]
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d30b      	bcc.n	80028c0 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	6a1a      	ldr	r2, [r3, #32]
 80028b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028b8:	1ad2      	subs	r2, r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	621a      	str	r2, [r3, #32]
 80028be:	e017      	b.n	80028f0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d108      	bne.n	80028da <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80028c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80028cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028d8:	e00a      	b.n	80028f0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2200      	movs	r2, #0
 80028e6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	657b      	str	r3, [r7, #84]	; 0x54
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	785b      	ldrb	r3, [r3, #1]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d165      	bne.n	80029ca <HAL_PCD_EP_DB_Transmit+0x750>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800290c:	b29b      	uxth	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002912:	4413      	add	r3, r2
 8002914:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	011a      	lsls	r2, r3, #4
 800291c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800291e:	4413      	add	r3, r2
 8002920:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002924:	65bb      	str	r3, [r7, #88]	; 0x58
 8002926:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002930:	b29a      	uxth	r2, r3
 8002932:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002934:	801a      	strh	r2, [r3, #0]
 8002936:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800293a:	2b3e      	cmp	r3, #62	; 0x3e
 800293c:	d91d      	bls.n	800297a <HAL_PCD_EP_DB_Transmit+0x700>
 800293e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	66bb      	str	r3, [r7, #104]	; 0x68
 8002946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	2b00      	cmp	r3, #0
 8002950:	d102      	bne.n	8002958 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002952:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002954:	3b01      	subs	r3, #1
 8002956:	66bb      	str	r3, [r7, #104]	; 0x68
 8002958:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	b29a      	uxth	r2, r3
 800295e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002960:	b29b      	uxth	r3, r3
 8002962:	029b      	lsls	r3, r3, #10
 8002964:	b29b      	uxth	r3, r3
 8002966:	4313      	orrs	r3, r2
 8002968:	b29b      	uxth	r3, r3
 800296a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800296e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002972:	b29a      	uxth	r2, r3
 8002974:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002976:	801a      	strh	r2, [r3, #0]
 8002978:	e041      	b.n	80029fe <HAL_PCD_EP_DB_Transmit+0x784>
 800297a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10a      	bne.n	8002998 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	b29b      	uxth	r3, r3
 8002988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800298c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002990:	b29a      	uxth	r2, r3
 8002992:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002994:	801a      	strh	r2, [r3, #0]
 8002996:	e032      	b.n	80029fe <HAL_PCD_EP_DB_Transmit+0x784>
 8002998:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800299c:	085b      	lsrs	r3, r3, #1
 800299e:	66bb      	str	r3, [r7, #104]	; 0x68
 80029a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <HAL_PCD_EP_DB_Transmit+0x738>
 80029ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ae:	3301      	adds	r3, #1
 80029b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80029b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	029b      	lsls	r3, r3, #10
 80029be:	b29b      	uxth	r3, r3
 80029c0:	4313      	orrs	r3, r2
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029c6:	801a      	strh	r2, [r3, #0]
 80029c8:	e019      	b.n	80029fe <HAL_PCD_EP_DB_Transmit+0x784>
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	785b      	ldrb	r3, [r3, #1]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d115      	bne.n	80029fe <HAL_PCD_EP_DB_Transmit+0x784>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029da:	b29b      	uxth	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029e0:	4413      	add	r3, r2
 80029e2:	657b      	str	r3, [r7, #84]	; 0x54
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	011a      	lsls	r2, r3, #4
 80029ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ec:	4413      	add	r3, r2
 80029ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029f2:	653b      	str	r3, [r7, #80]	; 0x50
 80029f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029fc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	6959      	ldr	r1, [r3, #20]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	895a      	ldrh	r2, [r3, #10]
 8002a0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	f003 feb5 	bl	800677e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a2e:	82bb      	strh	r3, [r7, #20]
 8002a30:	8abb      	ldrh	r3, [r7, #20]
 8002a32:	f083 0310 	eor.w	r3, r3, #16
 8002a36:	82bb      	strh	r3, [r7, #20]
 8002a38:	8abb      	ldrh	r3, [r7, #20]
 8002a3a:	f083 0320 	eor.w	r3, r3, #32
 8002a3e:	82bb      	strh	r3, [r7, #20]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	441a      	add	r2, r3
 8002a4e:	8abb      	ldrh	r3, [r7, #20]
 8002a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3790      	adds	r7, #144	; 0x90
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b087      	sub	sp, #28
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	817b      	strh	r3, [r7, #10]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a80:	897b      	ldrh	r3, [r7, #10]
 8002a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00b      	beq.n	8002aa4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a8c:	897b      	ldrh	r3, [r7, #10]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	e009      	b.n	8002ab8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002aa4:	897a      	ldrh	r2, [r7, #10]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ab8:	893b      	ldrh	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d107      	bne.n	8002ace <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	80da      	strh	r2, [r3, #6]
 8002acc:	e00b      	b.n	8002ae6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	0c1b      	lsrs	r3, r3, #16
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	371c      	adds	r7, #28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr
	...

08002af4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e272      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 8087 	beq.w	8002c22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b14:	4b92      	ldr	r3, [pc, #584]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 030c 	and.w	r3, r3, #12
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d00c      	beq.n	8002b3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b20:	4b8f      	ldr	r3, [pc, #572]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 030c 	and.w	r3, r3, #12
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d112      	bne.n	8002b52 <HAL_RCC_OscConfig+0x5e>
 8002b2c:	4b8c      	ldr	r3, [pc, #560]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b38:	d10b      	bne.n	8002b52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3a:	4b89      	ldr	r3, [pc, #548]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d06c      	beq.n	8002c20 <HAL_RCC_OscConfig+0x12c>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d168      	bne.n	8002c20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e24c      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5a:	d106      	bne.n	8002b6a <HAL_RCC_OscConfig+0x76>
 8002b5c:	4b80      	ldr	r3, [pc, #512]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a7f      	ldr	r2, [pc, #508]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	e02e      	b.n	8002bc8 <HAL_RCC_OscConfig+0xd4>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCC_OscConfig+0x98>
 8002b72:	4b7b      	ldr	r3, [pc, #492]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a7a      	ldr	r2, [pc, #488]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	4b78      	ldr	r3, [pc, #480]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a77      	ldr	r2, [pc, #476]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	e01d      	b.n	8002bc8 <HAL_RCC_OscConfig+0xd4>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b94:	d10c      	bne.n	8002bb0 <HAL_RCC_OscConfig+0xbc>
 8002b96:	4b72      	ldr	r3, [pc, #456]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a71      	ldr	r2, [pc, #452]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	4b6f      	ldr	r3, [pc, #444]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a6e      	ldr	r2, [pc, #440]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	e00b      	b.n	8002bc8 <HAL_RCC_OscConfig+0xd4>
 8002bb0:	4b6b      	ldr	r3, [pc, #428]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a6a      	ldr	r2, [pc, #424]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bba:	6013      	str	r3, [r2, #0]
 8002bbc:	4b68      	ldr	r3, [pc, #416]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a67      	ldr	r2, [pc, #412]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d013      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7fd feea 	bl	80009a8 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd8:	f7fd fee6 	bl	80009a8 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b64      	cmp	r3, #100	; 0x64
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e200      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bea:	4b5d      	ldr	r3, [pc, #372]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0xe4>
 8002bf6:	e014      	b.n	8002c22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fd fed6 	bl	80009a8 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c00:	f7fd fed2 	bl	80009a8 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b64      	cmp	r3, #100	; 0x64
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e1ec      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c12:	4b53      	ldr	r3, [pc, #332]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x10c>
 8002c1e:	e000      	b.n	8002c22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d063      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c2e:	4b4c      	ldr	r3, [pc, #304]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00b      	beq.n	8002c52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c3a:	4b49      	ldr	r3, [pc, #292]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d11c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x18c>
 8002c46:	4b46      	ldr	r3, [pc, #280]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d116      	bne.n	8002c80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c52:	4b43      	ldr	r3, [pc, #268]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <HAL_RCC_OscConfig+0x176>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d001      	beq.n	8002c6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e1c0      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6a:	4b3d      	ldr	r3, [pc, #244]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4939      	ldr	r1, [pc, #228]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7e:	e03a      	b.n	8002cf6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d020      	beq.n	8002cca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c88:	4b36      	ldr	r3, [pc, #216]	; (8002d64 <HAL_RCC_OscConfig+0x270>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8e:	f7fd fe8b 	bl	80009a8 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c96:	f7fd fe87 	bl	80009a8 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e1a1      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca8:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb4:	4b2a      	ldr	r3, [pc, #168]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	4927      	ldr	r1, [pc, #156]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	600b      	str	r3, [r1, #0]
 8002cc8:	e015      	b.n	8002cf6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cca:	4b26      	ldr	r3, [pc, #152]	; (8002d64 <HAL_RCC_OscConfig+0x270>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7fd fe6a 	bl	80009a8 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd8:	f7fd fe66 	bl	80009a8 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e180      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cea:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d03a      	beq.n	8002d78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d019      	beq.n	8002d3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d0a:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d10:	f7fd fe4a 	bl	80009a8 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d18:	f7fd fe46 	bl	80009a8 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e160      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2a:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d36:	2001      	movs	r0, #1
 8002d38:	f000 face 	bl	80032d8 <RCC_Delay>
 8002d3c:	e01c      	b.n	8002d78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <HAL_RCC_OscConfig+0x274>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d44:	f7fd fe30 	bl	80009a8 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d4a:	e00f      	b.n	8002d6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d4c:	f7fd fe2c 	bl	80009a8 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d908      	bls.n	8002d6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e146      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000
 8002d64:	42420000 	.word	0x42420000
 8002d68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d6c:	4b92      	ldr	r3, [pc, #584]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e9      	bne.n	8002d4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80a6 	beq.w	8002ed2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d86:	2300      	movs	r3, #0
 8002d88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d8a:	4b8b      	ldr	r3, [pc, #556]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10d      	bne.n	8002db2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d96:	4b88      	ldr	r3, [pc, #544]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	4a87      	ldr	r2, [pc, #540]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da0:	61d3      	str	r3, [r2, #28]
 8002da2:	4b85      	ldr	r3, [pc, #532]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002daa:	60bb      	str	r3, [r7, #8]
 8002dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dae:	2301      	movs	r3, #1
 8002db0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db2:	4b82      	ldr	r3, [pc, #520]	; (8002fbc <HAL_RCC_OscConfig+0x4c8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d118      	bne.n	8002df0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dbe:	4b7f      	ldr	r3, [pc, #508]	; (8002fbc <HAL_RCC_OscConfig+0x4c8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a7e      	ldr	r2, [pc, #504]	; (8002fbc <HAL_RCC_OscConfig+0x4c8>)
 8002dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dca:	f7fd fded 	bl	80009a8 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd2:	f7fd fde9 	bl	80009a8 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b64      	cmp	r3, #100	; 0x64
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e103      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de4:	4b75      	ldr	r3, [pc, #468]	; (8002fbc <HAL_RCC_OscConfig+0x4c8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d106      	bne.n	8002e06 <HAL_RCC_OscConfig+0x312>
 8002df8:	4b6f      	ldr	r3, [pc, #444]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	4a6e      	ldr	r2, [pc, #440]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	6213      	str	r3, [r2, #32]
 8002e04:	e02d      	b.n	8002e62 <HAL_RCC_OscConfig+0x36e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10c      	bne.n	8002e28 <HAL_RCC_OscConfig+0x334>
 8002e0e:	4b6a      	ldr	r3, [pc, #424]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	4a69      	ldr	r2, [pc, #420]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e14:	f023 0301 	bic.w	r3, r3, #1
 8002e18:	6213      	str	r3, [r2, #32]
 8002e1a:	4b67      	ldr	r3, [pc, #412]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	4a66      	ldr	r2, [pc, #408]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e20:	f023 0304 	bic.w	r3, r3, #4
 8002e24:	6213      	str	r3, [r2, #32]
 8002e26:	e01c      	b.n	8002e62 <HAL_RCC_OscConfig+0x36e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	d10c      	bne.n	8002e4a <HAL_RCC_OscConfig+0x356>
 8002e30:	4b61      	ldr	r3, [pc, #388]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	4a60      	ldr	r2, [pc, #384]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e36:	f043 0304 	orr.w	r3, r3, #4
 8002e3a:	6213      	str	r3, [r2, #32]
 8002e3c:	4b5e      	ldr	r3, [pc, #376]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	4a5d      	ldr	r2, [pc, #372]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	6213      	str	r3, [r2, #32]
 8002e48:	e00b      	b.n	8002e62 <HAL_RCC_OscConfig+0x36e>
 8002e4a:	4b5b      	ldr	r3, [pc, #364]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	4a5a      	ldr	r2, [pc, #360]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	6213      	str	r3, [r2, #32]
 8002e56:	4b58      	ldr	r3, [pc, #352]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	4a57      	ldr	r2, [pc, #348]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	f023 0304 	bic.w	r3, r3, #4
 8002e60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d015      	beq.n	8002e96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6a:	f7fd fd9d 	bl	80009a8 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e70:	e00a      	b.n	8002e88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e72:	f7fd fd99 	bl	80009a8 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e0b1      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e88:	4b4b      	ldr	r3, [pc, #300]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0ee      	beq.n	8002e72 <HAL_RCC_OscConfig+0x37e>
 8002e94:	e014      	b.n	8002ec0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e96:	f7fd fd87 	bl	80009a8 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9e:	f7fd fd83 	bl	80009a8 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e09b      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb4:	4b40      	ldr	r3, [pc, #256]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1ee      	bne.n	8002e9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d105      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec6:	4b3c      	ldr	r3, [pc, #240]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	4a3b      	ldr	r2, [pc, #236]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 8087 	beq.w	8002fea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002edc:	4b36      	ldr	r3, [pc, #216]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 030c 	and.w	r3, r3, #12
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d061      	beq.n	8002fac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d146      	bne.n	8002f7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef0:	4b33      	ldr	r3, [pc, #204]	; (8002fc0 <HAL_RCC_OscConfig+0x4cc>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef6:	f7fd fd57 	bl	80009a8 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efe:	f7fd fd53 	bl	80009a8 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e06d      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f10:	4b29      	ldr	r3, [pc, #164]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1f0      	bne.n	8002efe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f24:	d108      	bne.n	8002f38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f26:	4b24      	ldr	r3, [pc, #144]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	4921      	ldr	r1, [pc, #132]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f38:	4b1f      	ldr	r3, [pc, #124]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a19      	ldr	r1, [r3, #32]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	491b      	ldr	r1, [pc, #108]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f50:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <HAL_RCC_OscConfig+0x4cc>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f56:	f7fd fd27 	bl	80009a8 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5e:	f7fd fd23 	bl	80009a8 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e03d      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x46a>
 8002f7c:	e035      	b.n	8002fea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <HAL_RCC_OscConfig+0x4cc>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f84:	f7fd fd10 	bl	80009a8 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8c:	f7fd fd0c 	bl	80009a8 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e026      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f9e:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_RCC_OscConfig+0x4c4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x498>
 8002faa:	e01e      	b.n	8002fea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d107      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e019      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40007000 	.word	0x40007000
 8002fc0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_OscConfig+0x500>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d001      	beq.n	8002fea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000

08002ff8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0d0      	b.n	80031ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800300c:	4b6a      	ldr	r3, [pc, #424]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d910      	bls.n	800303c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301a:	4b67      	ldr	r3, [pc, #412]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 0207 	bic.w	r2, r3, #7
 8003022:	4965      	ldr	r1, [pc, #404]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	4313      	orrs	r3, r2
 8003028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b63      	ldr	r3, [pc, #396]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0b8      	b.n	80031ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d020      	beq.n	800308a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003054:	4b59      	ldr	r3, [pc, #356]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a58      	ldr	r2, [pc, #352]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 800305a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800305e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800306c:	4b53      	ldr	r3, [pc, #332]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	4a52      	ldr	r2, [pc, #328]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003072:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003076:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003078:	4b50      	ldr	r3, [pc, #320]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	494d      	ldr	r1, [pc, #308]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	4313      	orrs	r3, r2
 8003088:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d040      	beq.n	8003118 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d107      	bne.n	80030ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	4b47      	ldr	r3, [pc, #284]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d115      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e07f      	b.n	80031ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d107      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b6:	4b41      	ldr	r3, [pc, #260]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e073      	b.n	80031ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c6:	4b3d      	ldr	r3, [pc, #244]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e06b      	b.n	80031ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030d6:	4b39      	ldr	r3, [pc, #228]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f023 0203 	bic.w	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4936      	ldr	r1, [pc, #216]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030e8:	f7fd fc5e 	bl	80009a8 <HAL_GetTick>
 80030ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ee:	e00a      	b.n	8003106 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f0:	f7fd fc5a 	bl	80009a8 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e053      	b.n	80031ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003106:	4b2d      	ldr	r3, [pc, #180]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 020c 	and.w	r2, r3, #12
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	429a      	cmp	r2, r3
 8003116:	d1eb      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003118:	4b27      	ldr	r3, [pc, #156]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d210      	bcs.n	8003148 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b24      	ldr	r3, [pc, #144]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 0207 	bic.w	r2, r3, #7
 800312e:	4922      	ldr	r1, [pc, #136]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e032      	b.n	80031ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003154:	4b19      	ldr	r3, [pc, #100]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4916      	ldr	r1, [pc, #88]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003162:	4313      	orrs	r3, r2
 8003164:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003172:	4b12      	ldr	r3, [pc, #72]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	490e      	ldr	r1, [pc, #56]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003182:	4313      	orrs	r3, r2
 8003184:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003186:	f000 f821 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 800318a:	4602      	mov	r2, r0
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	490a      	ldr	r1, [pc, #40]	; (80031c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003198:	5ccb      	ldrb	r3, [r1, r3]
 800319a:	fa22 f303 	lsr.w	r3, r2, r3
 800319e:	4a09      	ldr	r2, [pc, #36]	; (80031c4 <HAL_RCC_ClockConfig+0x1cc>)
 80031a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031a2:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <HAL_RCC_ClockConfig+0x1d0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd fbbc 	bl	8000924 <HAL_InitTick>

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40022000 	.word	0x40022000
 80031bc:	40021000 	.word	0x40021000
 80031c0:	0800937c 	.word	0x0800937c
 80031c4:	20000000 	.word	0x20000000
 80031c8:	20000004 	.word	0x20000004

080031cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	2300      	movs	r3, #0
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	2300      	movs	r3, #0
 80031e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031e6:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <HAL_RCC_GetSysClockFreq+0x94>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d002      	beq.n	80031fc <HAL_RCC_GetSysClockFreq+0x30>
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d003      	beq.n	8003202 <HAL_RCC_GetSysClockFreq+0x36>
 80031fa:	e027      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031fc:	4b19      	ldr	r3, [pc, #100]	; (8003264 <HAL_RCC_GetSysClockFreq+0x98>)
 80031fe:	613b      	str	r3, [r7, #16]
      break;
 8003200:	e027      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	0c9b      	lsrs	r3, r3, #18
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	4a17      	ldr	r2, [pc, #92]	; (8003268 <HAL_RCC_GetSysClockFreq+0x9c>)
 800320c:	5cd3      	ldrb	r3, [r2, r3]
 800320e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d010      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800321a:	4b11      	ldr	r3, [pc, #68]	; (8003260 <HAL_RCC_GetSysClockFreq+0x94>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	0c5b      	lsrs	r3, r3, #17
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	4a11      	ldr	r2, [pc, #68]	; (800326c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003226:	5cd3      	ldrb	r3, [r2, r3]
 8003228:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a0d      	ldr	r2, [pc, #52]	; (8003264 <HAL_RCC_GetSysClockFreq+0x98>)
 800322e:	fb03 f202 	mul.w	r2, r3, r2
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	e004      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a0c      	ldr	r2, [pc, #48]	; (8003270 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003240:	fb02 f303 	mul.w	r3, r2, r3
 8003244:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	613b      	str	r3, [r7, #16]
      break;
 800324a:	e002      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800324c:	4b05      	ldr	r3, [pc, #20]	; (8003264 <HAL_RCC_GetSysClockFreq+0x98>)
 800324e:	613b      	str	r3, [r7, #16]
      break;
 8003250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003252:	693b      	ldr	r3, [r7, #16]
}
 8003254:	4618      	mov	r0, r3
 8003256:	371c      	adds	r7, #28
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40021000 	.word	0x40021000
 8003264:	007a1200 	.word	0x007a1200
 8003268:	08009394 	.word	0x08009394
 800326c:	080093a4 	.word	0x080093a4
 8003270:	003d0900 	.word	0x003d0900

08003274 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003278:	4b02      	ldr	r3, [pc, #8]	; (8003284 <HAL_RCC_GetHCLKFreq+0x10>)
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	20000000 	.word	0x20000000

08003288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800328c:	f7ff fff2 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 8003290:	4602      	mov	r2, r0
 8003292:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	0a1b      	lsrs	r3, r3, #8
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	4903      	ldr	r1, [pc, #12]	; (80032ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800329e:	5ccb      	ldrb	r3, [r1, r3]
 80032a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40021000 	.word	0x40021000
 80032ac:	0800938c 	.word	0x0800938c

080032b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032b4:	f7ff ffde 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	0adb      	lsrs	r3, r3, #11
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4903      	ldr	r1, [pc, #12]	; (80032d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000
 80032d4:	0800938c 	.word	0x0800938c

080032d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032e0:	4b0a      	ldr	r3, [pc, #40]	; (800330c <RCC_Delay+0x34>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a0a      	ldr	r2, [pc, #40]	; (8003310 <RCC_Delay+0x38>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	0a5b      	lsrs	r3, r3, #9
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032f4:	bf00      	nop
  }
  while (Delay --);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1e5a      	subs	r2, r3, #1
 80032fa:	60fa      	str	r2, [r7, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f9      	bne.n	80032f4 <RCC_Delay+0x1c>
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr
 800330c:	20000000 	.word	0x20000000
 8003310:	10624dd3 	.word	0x10624dd3

08003314 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	2300      	movs	r3, #0
 8003322:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d07d      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003330:	2300      	movs	r3, #0
 8003332:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003334:	4b4f      	ldr	r3, [pc, #316]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10d      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003340:	4b4c      	ldr	r3, [pc, #304]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	4a4b      	ldr	r2, [pc, #300]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334a:	61d3      	str	r3, [r2, #28]
 800334c:	4b49      	ldr	r3, [pc, #292]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003358:	2301      	movs	r3, #1
 800335a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335c:	4b46      	ldr	r3, [pc, #280]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003364:	2b00      	cmp	r3, #0
 8003366:	d118      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003368:	4b43      	ldr	r3, [pc, #268]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a42      	ldr	r2, [pc, #264]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800336e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003372:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003374:	f7fd fb18 	bl	80009a8 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337a:	e008      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337c:	f7fd fb14 	bl	80009a8 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	; 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e06d      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338e:	4b3a      	ldr	r3, [pc, #232]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800339a:	4b36      	ldr	r3, [pc, #216]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d02e      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d027      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033b8:	4b2e      	ldr	r3, [pc, #184]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033c2:	4b2e      	ldr	r3, [pc, #184]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033c8:	4b2c      	ldr	r3, [pc, #176]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033ce:	4a29      	ldr	r2, [pc, #164]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d014      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033de:	f7fd fae3 	bl	80009a8 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e4:	e00a      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e6:	f7fd fadf 	bl	80009a8 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d901      	bls.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e036      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fc:	4b1d      	ldr	r3, [pc, #116]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0ee      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003408:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4917      	ldr	r1, [pc, #92]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003416:	4313      	orrs	r3, r2
 8003418:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800341a:	7dfb      	ldrb	r3, [r7, #23]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d105      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003420:	4b14      	ldr	r3, [pc, #80]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	4a13      	ldr	r2, [pc, #76]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800342a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d008      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003438:	4b0e      	ldr	r3, [pc, #56]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	490b      	ldr	r1, [pc, #44]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003446:	4313      	orrs	r3, r2
 8003448:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b00      	cmp	r3, #0
 8003454:	d008      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003456:	4b07      	ldr	r3, [pc, #28]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	4904      	ldr	r1, [pc, #16]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40021000 	.word	0x40021000
 8003478:	40007000 	.word	0x40007000
 800347c:	42420440 	.word	0x42420440

08003480 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e042      	b.n	8003518 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fd f958 	bl	800075c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2224      	movs	r2, #36	; 0x24
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fdc5 	bl	8004054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695a      	ldr	r2, [r3, #20]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08a      	sub	sp, #40	; 0x28
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b20      	cmp	r3, #32
 800353e:	d16d      	bne.n	800361c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <HAL_UART_Transmit+0x2c>
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e066      	b.n	800361e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2221      	movs	r2, #33	; 0x21
 800355a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800355e:	f7fd fa23 	bl	80009a8 <HAL_GetTick>
 8003562:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	88fa      	ldrh	r2, [r7, #6]
 8003568:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	88fa      	ldrh	r2, [r7, #6]
 800356e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003578:	d108      	bne.n	800358c <HAL_UART_Transmit+0x6c>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d104      	bne.n	800358c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003582:	2300      	movs	r3, #0
 8003584:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	61bb      	str	r3, [r7, #24]
 800358a:	e003      	b.n	8003594 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003590:	2300      	movs	r3, #0
 8003592:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003594:	e02a      	b.n	80035ec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2200      	movs	r2, #0
 800359e:	2180      	movs	r1, #128	; 0x80
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 fb14 	bl	8003bce <UART_WaitOnFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e036      	b.n	800361e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10b      	bne.n	80035ce <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	3302      	adds	r3, #2
 80035ca:	61bb      	str	r3, [r7, #24]
 80035cc:	e007      	b.n	80035de <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	781a      	ldrb	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	3301      	adds	r3, #1
 80035dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1cf      	bne.n	8003596 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2200      	movs	r2, #0
 80035fe:	2140      	movs	r1, #64	; 0x40
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 fae4 	bl	8003bce <UART_WaitOnFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e006      	b.n	800361e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	e000      	b.n	800361e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800361c:	2302      	movs	r3, #2
  }
}
 800361e:	4618      	mov	r0, r3
 8003620:	3720      	adds	r7, #32
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b084      	sub	sp, #16
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	4613      	mov	r3, r2
 8003632:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b20      	cmp	r3, #32
 800363e:	d112      	bne.n	8003666 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <HAL_UART_Receive_IT+0x26>
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e00b      	b.n	8003668 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	461a      	mov	r2, r3
 800365a:	68b9      	ldr	r1, [r7, #8]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 fb24 	bl	8003caa <UART_Start_Receive_IT>
 8003662:	4603      	mov	r3, r0
 8003664:	e000      	b.n	8003668 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003666:	2302      	movs	r3, #2
  }
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b0ba      	sub	sp, #232	; 0xe8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003696:	2300      	movs	r3, #0
 8003698:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800369c:	2300      	movs	r3, #0
 800369e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80036ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10f      	bne.n	80036d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <HAL_UART_IRQHandler+0x66>
 80036c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fc01 	bl	8003ed6 <UART_Receive_IT>
      return;
 80036d4:	e25b      	b.n	8003b8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 80de 	beq.w	800389c <HAL_UART_IRQHandler+0x22c>
 80036e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d106      	bne.n	80036fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 80d1 	beq.w	800389c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00b      	beq.n	800371e <HAL_UART_IRQHandler+0xae>
 8003706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800370a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370e:	2b00      	cmp	r3, #0
 8003710:	d005      	beq.n	800371e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	f043 0201 	orr.w	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800371e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00b      	beq.n	8003742 <HAL_UART_IRQHandler+0xd2>
 800372a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	f043 0202 	orr.w	r2, r3, #2
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00b      	beq.n	8003766 <HAL_UART_IRQHandler+0xf6>
 800374e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	f043 0204 	orr.w	r2, r3, #4
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d011      	beq.n	8003796 <HAL_UART_IRQHandler+0x126>
 8003772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b00      	cmp	r3, #0
 800377c:	d105      	bne.n	800378a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800377e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	f043 0208 	orr.w	r2, r3, #8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 81f2 	beq.w	8003b84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_UART_IRQHandler+0x14e>
 80037ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037b0:	f003 0320 	and.w	r3, r3, #32
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fb8c 	bl	8003ed6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	bf14      	ite	ne
 80037cc:	2301      	movne	r3, #1
 80037ce:	2300      	moveq	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <HAL_UART_IRQHandler+0x17a>
 80037e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d04f      	beq.n	800388a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 fa96 	bl	8003d1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d041      	beq.n	8003882 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3314      	adds	r3, #20
 8003804:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003808:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003814:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800381c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3314      	adds	r3, #20
 8003826:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800382a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800382e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003832:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003836:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800383a:	e841 2300 	strex	r3, r2, [r1]
 800383e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1d9      	bne.n	80037fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	2b00      	cmp	r3, #0
 8003850:	d013      	beq.n	800387a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003856:	4a7e      	ldr	r2, [pc, #504]	; (8003a50 <HAL_UART_IRQHandler+0x3e0>)
 8003858:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385e:	4618      	mov	r0, r3
 8003860:	f7fd f9f4 	bl	8000c4c <HAL_DMA_Abort_IT>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d016      	beq.n	8003898 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003874:	4610      	mov	r0, r2
 8003876:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003878:	e00e      	b.n	8003898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f993 	bl	8003ba6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003880:	e00a      	b.n	8003898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f98f 	bl	8003ba6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003888:	e006      	b.n	8003898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f98b 	bl	8003ba6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003896:	e175      	b.n	8003b84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003898:	bf00      	nop
    return;
 800389a:	e173      	b.n	8003b84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	f040 814f 	bne.w	8003b44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 8148 	beq.w	8003b44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 8141 	beq.w	8003b44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 80b6 	beq.w	8003a54 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 8145 	beq.w	8003b88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003902:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003906:	429a      	cmp	r2, r3
 8003908:	f080 813e 	bcs.w	8003b88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003912:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	2b20      	cmp	r3, #32
 800391c:	f000 8088 	beq.w	8003a30 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	330c      	adds	r3, #12
 8003926:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800392e:	e853 3f00 	ldrex	r3, [r3]
 8003932:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003936:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800393a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800393e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	330c      	adds	r3, #12
 8003948:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800394c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003950:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003954:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003958:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800395c:	e841 2300 	strex	r3, r2, [r1]
 8003960:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003964:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1d9      	bne.n	8003920 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3314      	adds	r3, #20
 8003972:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003976:	e853 3f00 	ldrex	r3, [r3]
 800397a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800397c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800397e:	f023 0301 	bic.w	r3, r3, #1
 8003982:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3314      	adds	r3, #20
 800398c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003990:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003994:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003996:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003998:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800399c:	e841 2300 	strex	r3, r2, [r1]
 80039a0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e1      	bne.n	800396c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3314      	adds	r3, #20
 80039ae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039b2:	e853 3f00 	ldrex	r3, [r3]
 80039b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80039b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3314      	adds	r3, #20
 80039c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80039cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039d4:	e841 2300 	strex	r3, r2, [r1]
 80039d8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80039da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1e3      	bne.n	80039a8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	330c      	adds	r3, #12
 80039f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f8:	e853 3f00 	ldrex	r3, [r3]
 80039fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a00:	f023 0310 	bic.w	r3, r3, #16
 8003a04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	330c      	adds	r3, #12
 8003a0e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a12:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a14:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a1a:	e841 2300 	strex	r3, r2, [r1]
 8003a1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1e3      	bne.n	80039ee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fd f8d3 	bl	8000bd6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	4619      	mov	r1, r3
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f8b6 	bl	8003bb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a4c:	e09c      	b.n	8003b88 <HAL_UART_IRQHandler+0x518>
 8003a4e:	bf00      	nop
 8003a50:	08003de1 	.word	0x08003de1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 808e 	beq.w	8003b8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 8089 	beq.w	8003b8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	330c      	adds	r3, #12
 8003a80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a84:	e853 3f00 	ldrex	r3, [r3]
 8003a88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	330c      	adds	r3, #12
 8003a9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a9e:	647a      	str	r2, [r7, #68]	; 0x44
 8003aa0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003aa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003aa6:	e841 2300 	strex	r3, r2, [r1]
 8003aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e3      	bne.n	8003a7a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3314      	adds	r3, #20
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	e853 3f00 	ldrex	r3, [r3]
 8003ac0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	f023 0301 	bic.w	r3, r3, #1
 8003ac8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3314      	adds	r3, #20
 8003ad2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ad6:	633a      	str	r2, [r7, #48]	; 0x30
 8003ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1e3      	bne.n	8003ab2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	330c      	adds	r3, #12
 8003afe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	e853 3f00 	ldrex	r3, [r3]
 8003b06:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 0310 	bic.w	r3, r3, #16
 8003b0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	330c      	adds	r3, #12
 8003b18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b1c:	61fa      	str	r2, [r7, #28]
 8003b1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b20:	69b9      	ldr	r1, [r7, #24]
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	e841 2300 	strex	r3, r2, [r1]
 8003b28:	617b      	str	r3, [r7, #20]
   return(result);
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1e3      	bne.n	8003af8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f83b 	bl	8003bb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b42:	e023      	b.n	8003b8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d009      	beq.n	8003b64 <HAL_UART_IRQHandler+0x4f4>
 8003b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f953 	bl	8003e08 <UART_Transmit_IT>
    return;
 8003b62:	e014      	b.n	8003b8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00e      	beq.n	8003b8e <HAL_UART_IRQHandler+0x51e>
 8003b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f992 	bl	8003ea6 <UART_EndTransmit_IT>
    return;
 8003b82:	e004      	b.n	8003b8e <HAL_UART_IRQHandler+0x51e>
    return;
 8003b84:	bf00      	nop
 8003b86:	e002      	b.n	8003b8e <HAL_UART_IRQHandler+0x51e>
      return;
 8003b88:	bf00      	nop
 8003b8a:	e000      	b.n	8003b8e <HAL_UART_IRQHandler+0x51e>
      return;
 8003b8c:	bf00      	nop
  }
}
 8003b8e:	37e8      	adds	r7, #232	; 0xe8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr

08003bce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b090      	sub	sp, #64	; 0x40
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	603b      	str	r3, [r7, #0]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bde:	e050      	b.n	8003c82 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be6:	d04c      	beq.n	8003c82 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d007      	beq.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x30>
 8003bee:	f7fc fedb 	bl	80009a8 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d241      	bcs.n	8003c82 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	330c      	adds	r3, #12
 8003c04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c08:	e853 3f00 	ldrex	r3, [r3]
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	330c      	adds	r3, #12
 8003c1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c1e:	637a      	str	r2, [r7, #52]	; 0x34
 8003c20:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c26:	e841 2300 	strex	r3, r2, [r1]
 8003c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1e5      	bne.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3314      	adds	r3, #20
 8003c38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	e853 3f00 	ldrex	r3, [r3]
 8003c40:	613b      	str	r3, [r7, #16]
   return(result);
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3314      	adds	r3, #20
 8003c50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c52:	623a      	str	r2, [r7, #32]
 8003c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c56:	69f9      	ldr	r1, [r7, #28]
 8003c58:	6a3a      	ldr	r2, [r7, #32]
 8003c5a:	e841 2300 	strex	r3, r2, [r1]
 8003c5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1e5      	bne.n	8003c32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e00f      	b.n	8003ca2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	bf0c      	ite	eq
 8003c92:	2301      	moveq	r3, #1
 8003c94:	2300      	movne	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d09f      	beq.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3740      	adds	r7, #64	; 0x40
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b085      	sub	sp, #20
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	88fa      	ldrh	r2, [r7, #6]
 8003cc2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	88fa      	ldrh	r2, [r7, #6]
 8003cc8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2222      	movs	r2, #34	; 0x22
 8003cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695a      	ldr	r2, [r3, #20]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0201 	orr.w	r2, r2, #1
 8003cfe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0220 	orr.w	r2, r2, #32
 8003d0e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr

08003d1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b095      	sub	sp, #84	; 0x54
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	330c      	adds	r3, #12
 8003d2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d2e:	e853 3f00 	ldrex	r3, [r3]
 8003d32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	330c      	adds	r3, #12
 8003d42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d44:	643a      	str	r2, [r7, #64]	; 0x40
 8003d46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d4c:	e841 2300 	strex	r3, r2, [r1]
 8003d50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1e5      	bne.n	8003d24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3314      	adds	r3, #20
 8003d5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f023 0301 	bic.w	r3, r3, #1
 8003d6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3314      	adds	r3, #20
 8003d76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d80:	e841 2300 	strex	r3, r2, [r1]
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e5      	bne.n	8003d58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d119      	bne.n	8003dc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	330c      	adds	r3, #12
 8003d9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	e853 3f00 	ldrex	r3, [r3]
 8003da2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f023 0310 	bic.w	r3, r3, #16
 8003daa:	647b      	str	r3, [r7, #68]	; 0x44
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	330c      	adds	r3, #12
 8003db2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003db4:	61ba      	str	r2, [r7, #24]
 8003db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db8:	6979      	ldr	r1, [r7, #20]
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	e841 2300 	strex	r3, r2, [r1]
 8003dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e5      	bne.n	8003d94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003dd6:	bf00      	nop
 8003dd8:	3754      	adds	r7, #84	; 0x54
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr

08003de0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f7ff fed3 	bl	8003ba6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e00:	bf00      	nop
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b21      	cmp	r3, #33	; 0x21
 8003e1a:	d13e      	bne.n	8003e9a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e24:	d114      	bne.n	8003e50 <UART_Transmit_IT+0x48>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d110      	bne.n	8003e50 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e42:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	1c9a      	adds	r2, r3, #2
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	621a      	str	r2, [r3, #32]
 8003e4e:	e008      	b.n	8003e62 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	1c59      	adds	r1, r3, #1
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6211      	str	r1, [r2, #32]
 8003e5a:	781a      	ldrb	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	4619      	mov	r1, r3
 8003e70:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10f      	bne.n	8003e96 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	e000      	b.n	8003e9c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e9a:	2302      	movs	r3, #2
  }
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr

08003ea6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ebc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff fe64 	bl	8003b94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b08c      	sub	sp, #48	; 0x30
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b22      	cmp	r3, #34	; 0x22
 8003ee8:	f040 80ae 	bne.w	8004048 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef4:	d117      	bne.n	8003f26 <UART_Receive_IT+0x50>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d113      	bne.n	8003f26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f06:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	1c9a      	adds	r2, r3, #2
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	629a      	str	r2, [r3, #40]	; 0x28
 8003f24:	e026      	b.n	8003f74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f38:	d007      	beq.n	8003f4a <UART_Receive_IT+0x74>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10a      	bne.n	8003f58 <UART_Receive_IT+0x82>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d106      	bne.n	8003f58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f54:	701a      	strb	r2, [r3, #0]
 8003f56:	e008      	b.n	8003f6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	4619      	mov	r1, r3
 8003f82:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d15d      	bne.n	8004044 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0220 	bic.w	r2, r2, #32
 8003f96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fa6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695a      	ldr	r2, [r3, #20]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0201 	bic.w	r2, r2, #1
 8003fb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d135      	bne.n	800403a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	330c      	adds	r3, #12
 8003fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	e853 3f00 	ldrex	r3, [r3]
 8003fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f023 0310 	bic.w	r3, r3, #16
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	330c      	adds	r3, #12
 8003ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff4:	623a      	str	r2, [r7, #32]
 8003ff6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff8:	69f9      	ldr	r1, [r7, #28]
 8003ffa:	6a3a      	ldr	r2, [r7, #32]
 8003ffc:	e841 2300 	strex	r3, r2, [r1]
 8004000:	61bb      	str	r3, [r7, #24]
   return(result);
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e5      	bne.n	8003fd4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b10      	cmp	r3, #16
 8004014:	d10a      	bne.n	800402c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004030:	4619      	mov	r1, r3
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7ff fdc0 	bl	8003bb8 <HAL_UARTEx_RxEventCallback>
 8004038:	e002      	b.n	8004040 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fc f9c2 	bl	80003c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	e002      	b.n	800404a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	e000      	b.n	800404a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004048:	2302      	movs	r3, #2
  }
}
 800404a:	4618      	mov	r0, r3
 800404c:	3730      	adds	r7, #48	; 0x30
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800408e:	f023 030c 	bic.w	r3, r3, #12
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6812      	ldr	r2, [r2, #0]
 8004096:	68b9      	ldr	r1, [r7, #8]
 8004098:	430b      	orrs	r3, r1
 800409a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699a      	ldr	r2, [r3, #24]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a2c      	ldr	r2, [pc, #176]	; (8004168 <UART_SetConfig+0x114>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d103      	bne.n	80040c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040bc:	f7ff f8f8 	bl	80032b0 <HAL_RCC_GetPCLK2Freq>
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	e002      	b.n	80040ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040c4:	f7ff f8e0 	bl	8003288 <HAL_RCC_GetPCLK1Freq>
 80040c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	009a      	lsls	r2, r3, #2
 80040d4:	441a      	add	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	4a22      	ldr	r2, [pc, #136]	; (800416c <UART_SetConfig+0x118>)
 80040e2:	fba2 2303 	umull	r2, r3, r2, r3
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	0119      	lsls	r1, r3, #4
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009a      	lsls	r2, r3, #2
 80040f4:	441a      	add	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004100:	4b1a      	ldr	r3, [pc, #104]	; (800416c <UART_SetConfig+0x118>)
 8004102:	fba3 0302 	umull	r0, r3, r3, r2
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	2064      	movs	r0, #100	; 0x64
 800410a:	fb00 f303 	mul.w	r3, r0, r3
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	3332      	adds	r3, #50	; 0x32
 8004114:	4a15      	ldr	r2, [pc, #84]	; (800416c <UART_SetConfig+0x118>)
 8004116:	fba2 2303 	umull	r2, r3, r2, r3
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004120:	4419      	add	r1, r3
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4613      	mov	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	009a      	lsls	r2, r3, #2
 800412c:	441a      	add	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	fbb2 f2f3 	udiv	r2, r2, r3
 8004138:	4b0c      	ldr	r3, [pc, #48]	; (800416c <UART_SetConfig+0x118>)
 800413a:	fba3 0302 	umull	r0, r3, r3, r2
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	2064      	movs	r0, #100	; 0x64
 8004142:	fb00 f303 	mul.w	r3, r0, r3
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	3332      	adds	r3, #50	; 0x32
 800414c:	4a07      	ldr	r2, [pc, #28]	; (800416c <UART_SetConfig+0x118>)
 800414e:	fba2 2303 	umull	r2, r3, r2, r3
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	f003 020f 	and.w	r2, r3, #15
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	440a      	add	r2, r1
 800415e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004160:	bf00      	nop
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40013800 	.word	0x40013800
 800416c:	51eb851f 	.word	0x51eb851f

08004170 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004170:	b084      	sub	sp, #16
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	f107 0014 	add.w	r0, r7, #20
 800417e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	b004      	add	sp, #16
 800418e:	4770      	bx	lr

08004190 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041a0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80041a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr

080041bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041c4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80041c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	43db      	mvns	r3, r3
 80041d8:	b29b      	uxth	r3, r3
 80041da:	4013      	ands	r3, r2
 80041dc:	b29a      	uxth	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr

080041f0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	bc80      	pop	{r7}
 8004206:	4770      	bx	lr

08004208 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004208:	b084      	sub	sp, #16
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	f107 0014 	add.w	r0, r7, #20
 8004216:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	bc80      	pop	{r7}
 8004244:	b004      	add	sp, #16
 8004246:	4770      	bx	lr

08004248 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004248:	b480      	push	{r7}
 800424a:	b09d      	sub	sp, #116	; 0x74
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	b29b      	uxth	r3, r3
 8004266:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800426a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	78db      	ldrb	r3, [r3, #3]
 8004276:	2b03      	cmp	r3, #3
 8004278:	d81f      	bhi.n	80042ba <USB_ActivateEndpoint+0x72>
 800427a:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <USB_ActivateEndpoint+0x38>)
 800427c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004280:	08004291 	.word	0x08004291
 8004284:	080042ad 	.word	0x080042ad
 8004288:	080042c3 	.word	0x080042c3
 800428c:	0800429f 	.word	0x0800429f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004290:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004294:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004298:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800429c:	e012      	b.n	80042c4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800429e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80042a2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80042a6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80042aa:	e00b      	b.n	80042c4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80042ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80042b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80042b8:	e004      	b.n	80042c4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80042c0:	e000      	b.n	80042c4 <USB_ActivateEndpoint+0x7c>
      break;
 80042c2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	441a      	add	r2, r3
 80042ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80042d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	b29b      	uxth	r3, r3
 8004304:	4313      	orrs	r3, r2
 8004306:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	441a      	add	r2, r3
 8004314:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800431c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004328:	b29b      	uxth	r3, r3
 800432a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	7b1b      	ldrb	r3, [r3, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	f040 8178 	bne.w	8004626 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	785b      	ldrb	r3, [r3, #1]
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 8084 	beq.w	8004448 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	61bb      	str	r3, [r7, #24]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800434a:	b29b      	uxth	r3, r3
 800434c:	461a      	mov	r2, r3
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	4413      	add	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	011a      	lsls	r2, r3, #4
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	88db      	ldrh	r3, [r3, #6]
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	b29b      	uxth	r3, r3
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	827b      	strh	r3, [r7, #18]
 8004382:	8a7b      	ldrh	r3, [r7, #18]
 8004384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01b      	beq.n	80043c4 <USB_ActivateEndpoint+0x17c>
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	b29b      	uxth	r3, r3
 800439a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800439e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a2:	823b      	strh	r3, [r7, #16]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	441a      	add	r2, r3
 80043ae:	8a3b      	ldrh	r3, [r7, #16]
 80043b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	78db      	ldrb	r3, [r3, #3]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d020      	beq.n	800440e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043e2:	81bb      	strh	r3, [r7, #12]
 80043e4:	89bb      	ldrh	r3, [r7, #12]
 80043e6:	f083 0320 	eor.w	r3, r3, #32
 80043ea:	81bb      	strh	r3, [r7, #12]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	441a      	add	r2, r3
 80043f6:	89bb      	ldrh	r3, [r7, #12]
 80043f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004408:	b29b      	uxth	r3, r3
 800440a:	8013      	strh	r3, [r2, #0]
 800440c:	e2d5      	b.n	80049ba <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004424:	81fb      	strh	r3, [r7, #14]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	441a      	add	r2, r3
 8004430:	89fb      	ldrh	r3, [r7, #14]
 8004432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800443a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800443e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004442:	b29b      	uxth	r3, r3
 8004444:	8013      	strh	r3, [r2, #0]
 8004446:	e2b8      	b.n	80049ba <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	633b      	str	r3, [r7, #48]	; 0x30
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004452:	b29b      	uxth	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004458:	4413      	add	r3, r2
 800445a:	633b      	str	r3, [r7, #48]	; 0x30
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	011a      	lsls	r2, r3, #4
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	4413      	add	r3, r2
 8004466:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	88db      	ldrh	r3, [r3, #6]
 8004470:	085b      	lsrs	r3, r3, #1
 8004472:	b29b      	uxth	r3, r3
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004486:	b29b      	uxth	r3, r3
 8004488:	461a      	mov	r2, r3
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	4413      	add	r3, r2
 800448e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	011a      	lsls	r2, r3, #4
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	4413      	add	r3, r2
 800449a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	801a      	strh	r2, [r3, #0]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2b3e      	cmp	r3, #62	; 0x3e
 80044b6:	d91d      	bls.n	80044f4 <USB_ActivateEndpoint+0x2ac>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	095b      	lsrs	r3, r3, #5
 80044be:	66bb      	str	r3, [r7, #104]	; 0x68
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f003 031f 	and.w	r3, r3, #31
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d102      	bne.n	80044d2 <USB_ActivateEndpoint+0x28a>
 80044cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044ce:	3b01      	subs	r3, #1
 80044d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044da:	b29b      	uxth	r3, r3
 80044dc:	029b      	lsls	r3, r3, #10
 80044de:	b29b      	uxth	r3, r3
 80044e0:	4313      	orrs	r3, r2
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	801a      	strh	r2, [r3, #0]
 80044f2:	e026      	b.n	8004542 <USB_ActivateEndpoint+0x2fa>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10a      	bne.n	8004512 <USB_ActivateEndpoint+0x2ca>
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	b29b      	uxth	r3, r3
 8004502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800450a:	b29a      	uxth	r2, r3
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	801a      	strh	r2, [r3, #0]
 8004510:	e017      	b.n	8004542 <USB_ActivateEndpoint+0x2fa>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	085b      	lsrs	r3, r3, #1
 8004518:	66bb      	str	r3, [r7, #104]	; 0x68
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d002      	beq.n	800452c <USB_ActivateEndpoint+0x2e4>
 8004526:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004528:	3301      	adds	r3, #1
 800452a:	66bb      	str	r3, [r7, #104]	; 0x68
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	b29a      	uxth	r2, r3
 8004532:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004534:	b29b      	uxth	r3, r3
 8004536:	029b      	lsls	r3, r3, #10
 8004538:	b29b      	uxth	r3, r3
 800453a:	4313      	orrs	r3, r2
 800453c:	b29a      	uxth	r2, r3
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004550:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d01b      	beq.n	8004592 <USB_ActivateEndpoint+0x34a>
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	b29b      	uxth	r3, r3
 8004568:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800456c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004570:	843b      	strh	r3, [r7, #32]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	441a      	add	r2, r3
 800457c:	8c3b      	ldrh	r3, [r7, #32]
 800457e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800458a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458e:	b29b      	uxth	r3, r3
 8004590:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d124      	bne.n	80045e4 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b0:	83bb      	strh	r3, [r7, #28]
 80045b2:	8bbb      	ldrh	r3, [r7, #28]
 80045b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80045b8:	83bb      	strh	r3, [r7, #28]
 80045ba:	8bbb      	ldrh	r3, [r7, #28]
 80045bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80045c0:	83bb      	strh	r3, [r7, #28]
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	441a      	add	r2, r3
 80045cc:	8bbb      	ldrh	r3, [r7, #28]
 80045ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045de:	b29b      	uxth	r3, r3
 80045e0:	8013      	strh	r3, [r2, #0]
 80045e2:	e1ea      	b.n	80049ba <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fa:	83fb      	strh	r3, [r7, #30]
 80045fc:	8bfb      	ldrh	r3, [r7, #30]
 80045fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004602:	83fb      	strh	r3, [r7, #30]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	441a      	add	r2, r3
 800460e:	8bfb      	ldrh	r3, [r7, #30]
 8004610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800461c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004620:	b29b      	uxth	r3, r3
 8004622:	8013      	strh	r3, [r2, #0]
 8004624:	e1c9      	b.n	80049ba <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	78db      	ldrb	r3, [r3, #3]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d11e      	bne.n	800466c <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	b29b      	uxth	r3, r3
 800463c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004644:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	441a      	add	r2, r3
 8004652:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800465a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800465e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004666:	b29b      	uxth	r3, r3
 8004668:	8013      	strh	r3, [r2, #0]
 800466a:	e01d      	b.n	80046a8 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	b29b      	uxth	r3, r3
 800467a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800467e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004682:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	441a      	add	r2, r3
 8004690:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800469c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	461a      	mov	r2, r3
 80046b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046b8:	4413      	add	r3, r2
 80046ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	011a      	lsls	r2, r3, #4
 80046c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	891b      	ldrh	r3, [r3, #8]
 80046d0:	085b      	lsrs	r3, r3, #1
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046da:	801a      	strh	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	657b      	str	r3, [r7, #84]	; 0x54
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ec:	4413      	add	r3, r2
 80046ee:	657b      	str	r3, [r7, #84]	; 0x54
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	011a      	lsls	r2, r3, #4
 80046f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80046fe:	653b      	str	r3, [r7, #80]	; 0x50
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	895b      	ldrh	r3, [r3, #10]
 8004704:	085b      	lsrs	r3, r3, #1
 8004706:	b29b      	uxth	r3, r3
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800470e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	785b      	ldrb	r3, [r3, #1]
 8004714:	2b00      	cmp	r3, #0
 8004716:	f040 8093 	bne.w	8004840 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800472a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800472e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d01b      	beq.n	800476e <USB_ActivateEndpoint+0x526>
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	b29b      	uxth	r3, r3
 8004744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	441a      	add	r2, r3
 8004758:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800475a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800475e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004762:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800476a:	b29b      	uxth	r3, r3
 800476c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800477c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800477e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004782:	2b00      	cmp	r3, #0
 8004784:	d01b      	beq.n	80047be <USB_ActivateEndpoint+0x576>
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	b29b      	uxth	r3, r3
 8004794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	441a      	add	r2, r3
 80047a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80047aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d4:	873b      	strh	r3, [r7, #56]	; 0x38
 80047d6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80047d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80047dc:	873b      	strh	r3, [r7, #56]	; 0x38
 80047de:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80047e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80047e4:	873b      	strh	r3, [r7, #56]	; 0x38
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	441a      	add	r2, r3
 80047f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80047f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004802:	b29b      	uxth	r3, r3
 8004804:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	b29b      	uxth	r3, r3
 8004814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800481c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	441a      	add	r2, r3
 8004828:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800482a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800482e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800483a:	b29b      	uxth	r3, r3
 800483c:	8013      	strh	r3, [r2, #0]
 800483e:	e0bc      	b.n	80049ba <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004850:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d01d      	beq.n	8004898 <USB_ActivateEndpoint+0x650>
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	b29b      	uxth	r3, r3
 800486a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800486e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004872:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	441a      	add	r2, r3
 8004880:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800488c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004894:	b29b      	uxth	r3, r3
 8004896:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80048a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80048ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d01d      	beq.n	80048f0 <USB_ActivateEndpoint+0x6a8>
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	441a      	add	r2, r3
 80048d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80048dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	78db      	ldrb	r3, [r3, #3]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d024      	beq.n	8004942 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	b29b      	uxth	r3, r3
 8004906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800490a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800490e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004912:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004916:	f083 0320 	eor.w	r3, r3, #32
 800491a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	441a      	add	r2, r3
 8004928:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800492c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800493c:	b29b      	uxth	r3, r3
 800493e:	8013      	strh	r3, [r2, #0]
 8004940:	e01d      	b.n	800497e <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	b29b      	uxth	r3, r3
 8004950:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004958:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	441a      	add	r2, r3
 8004966:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800496a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800496e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497a:	b29b      	uxth	r3, r3
 800497c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	b29b      	uxth	r3, r3
 800498c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004994:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	441a      	add	r2, r3
 80049a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80049a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80049ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3774      	adds	r7, #116	; 0x74
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr

080049c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b08d      	sub	sp, #52	; 0x34
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	7b1b      	ldrb	r3, [r3, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f040 808e 	bne.w	8004af8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	785b      	ldrb	r3, [r3, #1]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d044      	beq.n	8004a6e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	81bb      	strh	r3, [r7, #12]
 80049f2:	89bb      	ldrh	r3, [r7, #12]
 80049f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d01b      	beq.n	8004a34 <USB_DeactivateEndpoint+0x6c>
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a12:	817b      	strh	r3, [r7, #10]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	441a      	add	r2, r3
 8004a1e:	897b      	ldrh	r3, [r7, #10]
 8004a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a4a:	813b      	strh	r3, [r7, #8]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	441a      	add	r2, r3
 8004a56:	893b      	ldrh	r3, [r7, #8]
 8004a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	8013      	strh	r3, [r2, #0]
 8004a6c:	e192      	b.n	8004d94 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	827b      	strh	r3, [r7, #18]
 8004a7c:	8a7b      	ldrh	r3, [r7, #18]
 8004a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d01b      	beq.n	8004abe <USB_DeactivateEndpoint+0xf6>
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9c:	823b      	strh	r3, [r7, #16]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	441a      	add	r2, r3
 8004aa8:	8a3b      	ldrh	r3, [r7, #16]
 8004aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ab2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad4:	81fb      	strh	r3, [r7, #14]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	441a      	add	r2, r3
 8004ae0:	89fb      	ldrh	r3, [r7, #14]
 8004ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	8013      	strh	r3, [r2, #0]
 8004af6:	e14d      	b.n	8004d94 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	785b      	ldrb	r3, [r3, #1]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f040 80a5 	bne.w	8004c4c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	881b      	ldrh	r3, [r3, #0]
 8004b0e:	843b      	strh	r3, [r7, #32]
 8004b10:	8c3b      	ldrh	r3, [r7, #32]
 8004b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d01b      	beq.n	8004b52 <USB_DeactivateEndpoint+0x18a>
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b30:	83fb      	strh	r3, [r7, #30]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	441a      	add	r2, r3
 8004b3c:	8bfb      	ldrh	r3, [r7, #30]
 8004b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	83bb      	strh	r3, [r7, #28]
 8004b60:	8bbb      	ldrh	r3, [r7, #28]
 8004b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d01b      	beq.n	8004ba2 <USB_DeactivateEndpoint+0x1da>
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b80:	837b      	strh	r3, [r7, #26]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	441a      	add	r2, r3
 8004b8c:	8b7b      	ldrh	r3, [r7, #26]
 8004b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb8:	833b      	strh	r3, [r7, #24]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	441a      	add	r2, r3
 8004bc4:	8b3b      	ldrh	r3, [r7, #24]
 8004bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	881b      	ldrh	r3, [r3, #0]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf0:	82fb      	strh	r3, [r7, #22]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	441a      	add	r2, r3
 8004bfc:	8afb      	ldrh	r3, [r7, #22]
 8004bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c28:	82bb      	strh	r3, [r7, #20]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	441a      	add	r2, r3
 8004c34:	8abb      	ldrh	r3, [r7, #20]
 8004c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	8013      	strh	r3, [r2, #0]
 8004c4a:	e0a3      	b.n	8004d94 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01b      	beq.n	8004c9c <USB_DeactivateEndpoint+0x2d4>
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	441a      	add	r2, r3
 8004c86:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004caa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d01b      	beq.n	8004cec <USB_DeactivateEndpoint+0x324>
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cca:	853b      	strh	r3, [r7, #40]	; 0x28
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	441a      	add	r2, r3
 8004cd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d02:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	441a      	add	r2, r3
 8004d0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d3a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	441a      	add	r2, r3
 8004d46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	847b      	strh	r3, [r7, #34]	; 0x22
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	441a      	add	r2, r3
 8004d7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3734      	adds	r7, #52	; 0x34
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr

08004da0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b0c2      	sub	sp, #264	; 0x108
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004daa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004dae:	6018      	str	r0, [r3, #0]
 8004db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004db8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	785b      	ldrb	r3, [r3, #1]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	f040 86b7 	bne.w	8005b3a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	699a      	ldr	r2, [r3, #24]
 8004dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d908      	bls.n	8004dfa <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004df8:	e007      	b.n	8004e0a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	7b1b      	ldrb	r3, [r3, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d13a      	bne.n	8004e90 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6959      	ldr	r1, [r3, #20]
 8004e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	88da      	ldrh	r2, [r3, #6]
 8004e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004e3c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004e40:	6800      	ldr	r0, [r0, #0]
 8004e42:	f001 fc9c 	bl	800677e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	613b      	str	r3, [r7, #16]
 8004e52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	4413      	add	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
 8004e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	011a      	lsls	r2, r3, #4
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	801a      	strh	r2, [r3, #0]
 8004e8c:	f000 be1f 	b.w	8005ace <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	78db      	ldrb	r3, [r3, #3]
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	f040 8462 	bne.w	8005766 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6a1a      	ldr	r2, [r3, #32]
 8004eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	f240 83df 	bls.w	800567e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ec4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	441a      	add	r2, r3
 8004f04:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f10:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6a1a      	ldr	r2, [r3, #32]
 8004f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f2c:	1ad2      	subs	r2, r2, r3
 8004f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 81c7 	beq.w	80052f0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	785b      	ldrb	r3, [r3, #1]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d177      	bne.n	800506e <USB_EPStartXfer+0x2ce>
 8004f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	4413      	add	r3, r2
 8004fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	011a      	lsls	r2, r3, #4
 8004fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	801a      	strh	r2, [r3, #0]
 8004fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fce:	2b3e      	cmp	r3, #62	; 0x3e
 8004fd0:	d921      	bls.n	8005016 <USB_EPStartXfer+0x276>
 8004fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fe0:	f003 031f 	and.w	r3, r3, #31
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d104      	bne.n	8004ff2 <USB_EPStartXfer+0x252>
 8004fe8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004fec:	3b01      	subs	r3, #1
 8004fee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	029b      	lsls	r3, r3, #10
 8005000:	b29b      	uxth	r3, r3
 8005002:	4313      	orrs	r3, r2
 8005004:	b29b      	uxth	r3, r3
 8005006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800500a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800500e:	b29a      	uxth	r2, r3
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	801a      	strh	r2, [r3, #0]
 8005014:	e050      	b.n	80050b8 <USB_EPStartXfer+0x318>
 8005016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10a      	bne.n	8005034 <USB_EPStartXfer+0x294>
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	b29b      	uxth	r3, r3
 8005024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800502c:	b29a      	uxth	r2, r3
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	801a      	strh	r2, [r3, #0]
 8005032:	e041      	b.n	80050b8 <USB_EPStartXfer+0x318>
 8005034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005038:	085b      	lsrs	r3, r3, #1
 800503a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800503e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d004      	beq.n	8005054 <USB_EPStartXfer+0x2b4>
 800504a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800504e:	3301      	adds	r3, #1
 8005050:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	b29a      	uxth	r2, r3
 800505a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800505e:	b29b      	uxth	r3, r3
 8005060:	029b      	lsls	r3, r3, #10
 8005062:	b29b      	uxth	r3, r3
 8005064:	4313      	orrs	r3, r2
 8005066:	b29a      	uxth	r2, r3
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	801a      	strh	r2, [r3, #0]
 800506c:	e024      	b.n	80050b8 <USB_EPStartXfer+0x318>
 800506e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	785b      	ldrb	r3, [r3, #1]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d11c      	bne.n	80050b8 <USB_EPStartXfer+0x318>
 800507e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005082:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800508c:	b29b      	uxth	r3, r3
 800508e:	461a      	mov	r2, r3
 8005090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005092:	4413      	add	r3, r2
 8005094:	633b      	str	r3, [r7, #48]	; 0x30
 8005096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800509a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	011a      	lsls	r2, r3, #4
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	4413      	add	r3, r2
 80050a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80050b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	895b      	ldrh	r3, [r3, #10]
 80050c4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6959      	ldr	r1, [r3, #20]
 80050d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050d8:	b29b      	uxth	r3, r3
 80050da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80050de:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80050e2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80050e6:	6800      	ldr	r0, [r0, #0]
 80050e8:	f001 fb49 	bl	800677e <USB_WritePMA>
            ep->xfer_buff += len;
 80050ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	695a      	ldr	r2, [r3, #20]
 80050f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050fc:	441a      	add	r2, r3
 80050fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800510a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800510e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6a1a      	ldr	r2, [r3, #32]
 8005116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800511a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	429a      	cmp	r2, r3
 8005124:	d90f      	bls.n	8005146 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800512a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6a1a      	ldr	r2, [r3, #32]
 8005132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005136:	1ad2      	subs	r2, r2, r3
 8005138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800513c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	621a      	str	r2, [r3, #32]
 8005144:	e00e      	b.n	8005164 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800514a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800515a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2200      	movs	r2, #0
 8005162:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	785b      	ldrb	r3, [r3, #1]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d177      	bne.n	8005264 <USB_EPStartXfer+0x4c4>
 8005174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005178:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	61bb      	str	r3, [r7, #24]
 8005180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005184:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800518e:	b29b      	uxth	r3, r3
 8005190:	461a      	mov	r2, r3
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	4413      	add	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
 8005198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800519c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	011a      	lsls	r2, r3, #4
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	4413      	add	r3, r2
 80051aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051ae:	617b      	str	r3, [r7, #20]
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	801a      	strh	r2, [r3, #0]
 80051c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051c4:	2b3e      	cmp	r3, #62	; 0x3e
 80051c6:	d921      	bls.n	800520c <USB_EPStartXfer+0x46c>
 80051c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051cc:	095b      	lsrs	r3, r3, #5
 80051ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80051d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051d6:	f003 031f 	and.w	r3, r3, #31
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d104      	bne.n	80051e8 <USB_EPStartXfer+0x448>
 80051de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051e2:	3b01      	subs	r3, #1
 80051e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	029b      	lsls	r3, r3, #10
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	4313      	orrs	r3, r2
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005204:	b29a      	uxth	r2, r3
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	801a      	strh	r2, [r3, #0]
 800520a:	e056      	b.n	80052ba <USB_EPStartXfer+0x51a>
 800520c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <USB_EPStartXfer+0x48a>
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	b29b      	uxth	r3, r3
 800521a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800521e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005222:	b29a      	uxth	r2, r3
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	801a      	strh	r2, [r3, #0]
 8005228:	e047      	b.n	80052ba <USB_EPStartXfer+0x51a>
 800522a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800522e:	085b      	lsrs	r3, r3, #1
 8005230:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d004      	beq.n	800524a <USB_EPStartXfer+0x4aa>
 8005240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005244:	3301      	adds	r3, #1
 8005246:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	b29a      	uxth	r2, r3
 8005250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005254:	b29b      	uxth	r3, r3
 8005256:	029b      	lsls	r3, r3, #10
 8005258:	b29b      	uxth	r3, r3
 800525a:	4313      	orrs	r3, r2
 800525c:	b29a      	uxth	r2, r3
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	801a      	strh	r2, [r3, #0]
 8005262:	e02a      	b.n	80052ba <USB_EPStartXfer+0x51a>
 8005264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	785b      	ldrb	r3, [r3, #1]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d122      	bne.n	80052ba <USB_EPStartXfer+0x51a>
 8005274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005278:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	623b      	str	r3, [r7, #32]
 8005280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005284:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800528e:	b29b      	uxth	r3, r3
 8005290:	461a      	mov	r2, r3
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	4413      	add	r3, r2
 8005296:	623b      	str	r3, [r7, #32]
 8005298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800529c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	011a      	lsls	r2, r3, #4
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	4413      	add	r3, r2
 80052aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052ae:	61fb      	str	r3, [r7, #28]
 80052b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	891b      	ldrh	r3, [r3, #8]
 80052c6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6959      	ldr	r1, [r3, #20]
 80052d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052da:	b29b      	uxth	r3, r3
 80052dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80052e0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80052e4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80052e8:	6800      	ldr	r0, [r0, #0]
 80052ea:	f001 fa48 	bl	800677e <USB_WritePMA>
 80052ee:	e3ee      	b.n	8005ace <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	785b      	ldrb	r3, [r3, #1]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d177      	bne.n	80053f0 <USB_EPStartXfer+0x650>
 8005300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005304:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	64bb      	str	r3, [r7, #72]	; 0x48
 800530c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005310:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800531a:	b29b      	uxth	r3, r3
 800531c:	461a      	mov	r2, r3
 800531e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005320:	4413      	add	r3, r2
 8005322:	64bb      	str	r3, [r7, #72]	; 0x48
 8005324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	011a      	lsls	r2, r3, #4
 8005332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005334:	4413      	add	r3, r2
 8005336:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800533a:	647b      	str	r3, [r7, #68]	; 0x44
 800533c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	b29b      	uxth	r3, r3
 8005342:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005346:	b29a      	uxth	r2, r3
 8005348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800534a:	801a      	strh	r2, [r3, #0]
 800534c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005350:	2b3e      	cmp	r3, #62	; 0x3e
 8005352:	d921      	bls.n	8005398 <USB_EPStartXfer+0x5f8>
 8005354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005358:	095b      	lsrs	r3, r3, #5
 800535a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800535e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005362:	f003 031f 	and.w	r3, r3, #31
 8005366:	2b00      	cmp	r3, #0
 8005368:	d104      	bne.n	8005374 <USB_EPStartXfer+0x5d4>
 800536a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800536e:	3b01      	subs	r3, #1
 8005370:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	b29a      	uxth	r2, r3
 800537a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800537e:	b29b      	uxth	r3, r3
 8005380:	029b      	lsls	r3, r3, #10
 8005382:	b29b      	uxth	r3, r3
 8005384:	4313      	orrs	r3, r2
 8005386:	b29b      	uxth	r3, r3
 8005388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800538c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005390:	b29a      	uxth	r2, r3
 8005392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005394:	801a      	strh	r2, [r3, #0]
 8005396:	e056      	b.n	8005446 <USB_EPStartXfer+0x6a6>
 8005398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10a      	bne.n	80053b6 <USB_EPStartXfer+0x616>
 80053a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b2:	801a      	strh	r2, [r3, #0]
 80053b4:	e047      	b.n	8005446 <USB_EPStartXfer+0x6a6>
 80053b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ba:	085b      	lsrs	r3, r3, #1
 80053bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d004      	beq.n	80053d6 <USB_EPStartXfer+0x636>
 80053cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053d0:	3301      	adds	r3, #1
 80053d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	b29a      	uxth	r2, r3
 80053dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	029b      	lsls	r3, r3, #10
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	4313      	orrs	r3, r2
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ec:	801a      	strh	r2, [r3, #0]
 80053ee:	e02a      	b.n	8005446 <USB_EPStartXfer+0x6a6>
 80053f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	785b      	ldrb	r3, [r3, #1]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d122      	bne.n	8005446 <USB_EPStartXfer+0x6a6>
 8005400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005404:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	653b      	str	r3, [r7, #80]	; 0x50
 800540c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005410:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800541a:	b29b      	uxth	r3, r3
 800541c:	461a      	mov	r2, r3
 800541e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005420:	4413      	add	r3, r2
 8005422:	653b      	str	r3, [r7, #80]	; 0x50
 8005424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	011a      	lsls	r2, r3, #4
 8005432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005434:	4413      	add	r3, r2
 8005436:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800543a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800543c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005440:	b29a      	uxth	r2, r3
 8005442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005444:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800544a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	891b      	ldrh	r3, [r3, #8]
 8005452:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800545a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6959      	ldr	r1, [r3, #20]
 8005462:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005466:	b29b      	uxth	r3, r3
 8005468:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800546c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005470:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005474:	6800      	ldr	r0, [r0, #0]
 8005476:	f001 f982 	bl	800677e <USB_WritePMA>
            ep->xfer_buff += len;
 800547a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800547e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695a      	ldr	r2, [r3, #20]
 8005486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800548a:	441a      	add	r2, r3
 800548c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800549c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6a1a      	ldr	r2, [r3, #32]
 80054a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d90f      	bls.n	80054d4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80054b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6a1a      	ldr	r2, [r3, #32]
 80054c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054c4:	1ad2      	subs	r2, r2, r3
 80054c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	621a      	str	r2, [r3, #32]
 80054d2:	e00e      	b.n	80054f2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80054d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80054e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2200      	movs	r2, #0
 80054f0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	643b      	str	r3, [r7, #64]	; 0x40
 80054fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	785b      	ldrb	r3, [r3, #1]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d177      	bne.n	80055fe <USB_EPStartXfer+0x85e>
 800550e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005512:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	63bb      	str	r3, [r7, #56]	; 0x38
 800551a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800551e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005528:	b29b      	uxth	r3, r3
 800552a:	461a      	mov	r2, r3
 800552c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552e:	4413      	add	r3, r2
 8005530:	63bb      	str	r3, [r7, #56]	; 0x38
 8005532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	011a      	lsls	r2, r3, #4
 8005540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005542:	4413      	add	r3, r2
 8005544:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005548:	637b      	str	r3, [r7, #52]	; 0x34
 800554a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	b29b      	uxth	r3, r3
 8005550:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005554:	b29a      	uxth	r2, r3
 8005556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005558:	801a      	strh	r2, [r3, #0]
 800555a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800555e:	2b3e      	cmp	r3, #62	; 0x3e
 8005560:	d921      	bls.n	80055a6 <USB_EPStartXfer+0x806>
 8005562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005566:	095b      	lsrs	r3, r3, #5
 8005568:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800556c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005570:	f003 031f 	and.w	r3, r3, #31
 8005574:	2b00      	cmp	r3, #0
 8005576:	d104      	bne.n	8005582 <USB_EPStartXfer+0x7e2>
 8005578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800557c:	3b01      	subs	r3, #1
 800557e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	b29a      	uxth	r2, r3
 8005588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558c:	b29b      	uxth	r3, r3
 800558e:	029b      	lsls	r3, r3, #10
 8005590:	b29b      	uxth	r3, r3
 8005592:	4313      	orrs	r3, r2
 8005594:	b29b      	uxth	r3, r3
 8005596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800559a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800559e:	b29a      	uxth	r2, r3
 80055a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a2:	801a      	strh	r2, [r3, #0]
 80055a4:	e050      	b.n	8005648 <USB_EPStartXfer+0x8a8>
 80055a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10a      	bne.n	80055c4 <USB_EPStartXfer+0x824>
 80055ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055bc:	b29a      	uxth	r2, r3
 80055be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c0:	801a      	strh	r2, [r3, #0]
 80055c2:	e041      	b.n	8005648 <USB_EPStartXfer+0x8a8>
 80055c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055c8:	085b      	lsrs	r3, r3, #1
 80055ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d004      	beq.n	80055e4 <USB_EPStartXfer+0x844>
 80055da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055de:	3301      	adds	r3, #1
 80055e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	029b      	lsls	r3, r3, #10
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	4313      	orrs	r3, r2
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fa:	801a      	strh	r2, [r3, #0]
 80055fc:	e024      	b.n	8005648 <USB_EPStartXfer+0x8a8>
 80055fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	785b      	ldrb	r3, [r3, #1]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d11c      	bne.n	8005648 <USB_EPStartXfer+0x8a8>
 800560e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005612:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800561c:	b29b      	uxth	r3, r3
 800561e:	461a      	mov	r2, r3
 8005620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005622:	4413      	add	r3, r2
 8005624:	643b      	str	r3, [r7, #64]	; 0x40
 8005626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800562a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	011a      	lsls	r2, r3, #4
 8005634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005636:	4413      	add	r3, r2
 8005638:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800563c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800563e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005642:	b29a      	uxth	r2, r3
 8005644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005646:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800564c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	895b      	ldrh	r3, [r3, #10]
 8005654:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800565c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6959      	ldr	r1, [r3, #20]
 8005664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005668:	b29b      	uxth	r3, r3
 800566a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800566e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005672:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005676:	6800      	ldr	r0, [r0, #0]
 8005678:	f001 f881 	bl	800677e <USB_WritePMA>
 800567c:	e227      	b.n	8005ace <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800567e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005682:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800568e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005692:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800569c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80056b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80056b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	441a      	add	r2, r3
 80056d2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80056d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005704:	b29b      	uxth	r3, r3
 8005706:	461a      	mov	r2, r3
 8005708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800570a:	4413      	add	r3, r2
 800570c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800570e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	011a      	lsls	r2, r3, #4
 800571c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800571e:	4413      	add	r3, r2
 8005720:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005724:	65bb      	str	r3, [r7, #88]	; 0x58
 8005726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800572a:	b29a      	uxth	r2, r3
 800572c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800572e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	891b      	ldrh	r3, [r3, #8]
 800573c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6959      	ldr	r1, [r3, #20]
 800574c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005750:	b29b      	uxth	r3, r3
 8005752:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005756:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800575a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800575e:	6800      	ldr	r0, [r0, #0]
 8005760:	f001 f80d 	bl	800677e <USB_WritePMA>
 8005764:	e1b3      	b.n	8005ace <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800576a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6a1a      	ldr	r2, [r3, #32]
 8005772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005776:	1ad2      	subs	r2, r2, r3
 8005778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800577c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005788:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 80c6 	beq.w	8005938 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	673b      	str	r3, [r7, #112]	; 0x70
 80057b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	785b      	ldrb	r3, [r3, #1]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d177      	bne.n	80058b8 <USB_EPStartXfer+0xb18>
 80057c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80057d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	461a      	mov	r2, r3
 80057e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057e8:	4413      	add	r3, r2
 80057ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80057ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	011a      	lsls	r2, r3, #4
 80057fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057fc:	4413      	add	r3, r2
 80057fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005802:	667b      	str	r3, [r7, #100]	; 0x64
 8005804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	b29b      	uxth	r3, r3
 800580a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800580e:	b29a      	uxth	r2, r3
 8005810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005812:	801a      	strh	r2, [r3, #0]
 8005814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005818:	2b3e      	cmp	r3, #62	; 0x3e
 800581a:	d921      	bls.n	8005860 <USB_EPStartXfer+0xac0>
 800581c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005820:	095b      	lsrs	r3, r3, #5
 8005822:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800582a:	f003 031f 	and.w	r3, r3, #31
 800582e:	2b00      	cmp	r3, #0
 8005830:	d104      	bne.n	800583c <USB_EPStartXfer+0xa9c>
 8005832:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005836:	3b01      	subs	r3, #1
 8005838:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800583c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800583e:	881b      	ldrh	r3, [r3, #0]
 8005840:	b29a      	uxth	r2, r3
 8005842:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005846:	b29b      	uxth	r3, r3
 8005848:	029b      	lsls	r3, r3, #10
 800584a:	b29b      	uxth	r3, r3
 800584c:	4313      	orrs	r3, r2
 800584e:	b29b      	uxth	r3, r3
 8005850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005858:	b29a      	uxth	r2, r3
 800585a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800585c:	801a      	strh	r2, [r3, #0]
 800585e:	e050      	b.n	8005902 <USB_EPStartXfer+0xb62>
 8005860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10a      	bne.n	800587e <USB_EPStartXfer+0xade>
 8005868:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	b29b      	uxth	r3, r3
 800586e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005872:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005876:	b29a      	uxth	r2, r3
 8005878:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800587a:	801a      	strh	r2, [r3, #0]
 800587c:	e041      	b.n	8005902 <USB_EPStartXfer+0xb62>
 800587e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005882:	085b      	lsrs	r3, r3, #1
 8005884:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b00      	cmp	r3, #0
 8005892:	d004      	beq.n	800589e <USB_EPStartXfer+0xafe>
 8005894:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005898:	3301      	adds	r3, #1
 800589a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800589e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	029b      	lsls	r3, r3, #10
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	4313      	orrs	r3, r2
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058b4:	801a      	strh	r2, [r3, #0]
 80058b6:	e024      	b.n	8005902 <USB_EPStartXfer+0xb62>
 80058b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	785b      	ldrb	r3, [r3, #1]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d11c      	bne.n	8005902 <USB_EPStartXfer+0xb62>
 80058c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	461a      	mov	r2, r3
 80058da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058dc:	4413      	add	r3, r2
 80058de:	673b      	str	r3, [r7, #112]	; 0x70
 80058e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	011a      	lsls	r2, r3, #4
 80058ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058f0:	4413      	add	r3, r2
 80058f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005900:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	895b      	ldrh	r3, [r3, #10]
 800590e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6959      	ldr	r1, [r3, #20]
 800591e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005922:	b29b      	uxth	r3, r3
 8005924:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005928:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800592c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005930:	6800      	ldr	r0, [r0, #0]
 8005932:	f000 ff24 	bl	800677e <USB_WritePMA>
 8005936:	e0ca      	b.n	8005ace <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800593c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	785b      	ldrb	r3, [r3, #1]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d177      	bne.n	8005a38 <USB_EPStartXfer+0xc98>
 8005948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005958:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005962:	b29b      	uxth	r3, r3
 8005964:	461a      	mov	r2, r3
 8005966:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005968:	4413      	add	r3, r2
 800596a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800596c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	011a      	lsls	r2, r3, #4
 800597a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800597c:	4413      	add	r3, r2
 800597e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005982:	67bb      	str	r3, [r7, #120]	; 0x78
 8005984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	b29b      	uxth	r3, r3
 800598a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800598e:	b29a      	uxth	r2, r3
 8005990:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005992:	801a      	strh	r2, [r3, #0]
 8005994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005998:	2b3e      	cmp	r3, #62	; 0x3e
 800599a:	d921      	bls.n	80059e0 <USB_EPStartXfer+0xc40>
 800599c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a0:	095b      	lsrs	r3, r3, #5
 80059a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059aa:	f003 031f 	and.w	r3, r3, #31
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d104      	bne.n	80059bc <USB_EPStartXfer+0xc1c>
 80059b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059b6:	3b01      	subs	r3, #1
 80059b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	029b      	lsls	r3, r3, #10
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	4313      	orrs	r3, r2
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d8:	b29a      	uxth	r2, r3
 80059da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059dc:	801a      	strh	r2, [r3, #0]
 80059de:	e05c      	b.n	8005a9a <USB_EPStartXfer+0xcfa>
 80059e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <USB_EPStartXfer+0xc5e>
 80059e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	e04d      	b.n	8005a9a <USB_EPStartXfer+0xcfa>
 80059fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a02:	085b      	lsrs	r3, r3, #1
 8005a04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d004      	beq.n	8005a1e <USB_EPStartXfer+0xc7e>
 8005a14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a18:	3301      	adds	r3, #1
 8005a1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	029b      	lsls	r3, r3, #10
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a34:	801a      	strh	r2, [r3, #0]
 8005a36:	e030      	b.n	8005a9a <USB_EPStartXfer+0xcfa>
 8005a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	785b      	ldrb	r3, [r3, #1]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d128      	bne.n	8005a9a <USB_EPStartXfer+0xcfa>
 8005a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	461a      	mov	r2, r3
 8005a68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	011a      	lsls	r2, r3, #4
 8005a80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a84:	4413      	add	r3, r2
 8005a86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a98:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	891b      	ldrh	r3, [r3, #8]
 8005aa6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6959      	ldr	r1, [r3, #20]
 8005ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ac0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ac4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ac8:	6800      	ldr	r0, [r0, #0]
 8005aca:	f000 fe58 	bl	800677e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005af4:	817b      	strh	r3, [r7, #10]
 8005af6:	897b      	ldrh	r3, [r7, #10]
 8005af8:	f083 0310 	eor.w	r3, r3, #16
 8005afc:	817b      	strh	r3, [r7, #10]
 8005afe:	897b      	ldrh	r3, [r7, #10]
 8005b00:	f083 0320 	eor.w	r3, r3, #32
 8005b04:	817b      	strh	r3, [r7, #10]
 8005b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	441a      	add	r2, r3
 8005b20:	897b      	ldrh	r3, [r7, #10]
 8005b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	8013      	strh	r3, [r2, #0]
 8005b36:	f000 bcde 	b.w	80064f6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	7b1b      	ldrb	r3, [r3, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f040 80bb 	bne.w	8005cc2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	699a      	ldr	r2, [r3, #24]
 8005b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d917      	bls.n	8005b98 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	699a      	ldr	r2, [r3, #24]
 8005b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b88:	1ad2      	subs	r2, r2, r3
 8005b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	619a      	str	r2, [r3, #24]
 8005b96:	e00e      	b.n	8005bb6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bda:	4413      	add	r3, r2
 8005bdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	011a      	lsls	r2, r3, #4
 8005bee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bf8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005bfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c0e:	801a      	strh	r2, [r3, #0]
 8005c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c14:	2b3e      	cmp	r3, #62	; 0x3e
 8005c16:	d924      	bls.n	8005c62 <USB_EPStartXfer+0xec2>
 8005c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c1c:	095b      	lsrs	r3, r3, #5
 8005c1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c26:	f003 031f 	and.w	r3, r3, #31
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d104      	bne.n	8005c38 <USB_EPStartXfer+0xe98>
 8005c2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c32:	3b01      	subs	r3, #1
 8005c34:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	029b      	lsls	r3, r3, #10
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c5c:	801a      	strh	r2, [r3, #0]
 8005c5e:	f000 bc10 	b.w	8006482 <USB_EPStartXfer+0x16e2>
 8005c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10c      	bne.n	8005c84 <USB_EPStartXfer+0xee4>
 8005c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c80:	801a      	strh	r2, [r3, #0]
 8005c82:	e3fe      	b.n	8006482 <USB_EPStartXfer+0x16e2>
 8005c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c88:	085b      	lsrs	r3, r3, #1
 8005c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d004      	beq.n	8005ca4 <USB_EPStartXfer+0xf04>
 8005c9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	029b      	lsls	r3, r3, #10
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cbe:	801a      	strh	r2, [r3, #0]
 8005cc0:	e3df      	b.n	8006482 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	78db      	ldrb	r3, [r3, #3]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	f040 8218 	bne.w	8006104 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	785b      	ldrb	r3, [r3, #1]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f040 809d 	bne.w	8005e20 <USB_EPStartXfer+0x1080>
 8005ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	461a      	mov	r2, r3
 8005d06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	011a      	lsls	r2, r3, #4
 8005d1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d22:	4413      	add	r3, r2
 8005d24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d3e:	801a      	strh	r2, [r3, #0]
 8005d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	2b3e      	cmp	r3, #62	; 0x3e
 8005d4e:	d92b      	bls.n	8005da8 <USB_EPStartXfer+0x1008>
 8005d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	095b      	lsrs	r3, r3, #5
 8005d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f003 031f 	and.w	r3, r3, #31
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d104      	bne.n	8005d80 <USB_EPStartXfer+0xfe0>
 8005d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	029b      	lsls	r3, r3, #10
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	4313      	orrs	r3, r2
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005da4:	801a      	strh	r2, [r3, #0]
 8005da6:	e070      	b.n	8005e8a <USB_EPStartXfer+0x10ea>
 8005da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10c      	bne.n	8005dd2 <USB_EPStartXfer+0x1032>
 8005db8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005dce:	801a      	strh	r2, [r3, #0]
 8005dd0:	e05b      	b.n	8005e8a <USB_EPStartXfer+0x10ea>
 8005dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	085b      	lsrs	r3, r3, #1
 8005de0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d004      	beq.n	8005e02 <USB_EPStartXfer+0x1062>
 8005df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	029b      	lsls	r3, r3, #10
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	4313      	orrs	r3, r2
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e1c:	801a      	strh	r2, [r3, #0]
 8005e1e:	e034      	b.n	8005e8a <USB_EPStartXfer+0x10ea>
 8005e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	785b      	ldrb	r3, [r3, #1]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d12c      	bne.n	8005e8a <USB_EPStartXfer+0x10ea>
 8005e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e54:	4413      	add	r3, r2
 8005e56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	011a      	lsls	r2, r3, #4
 8005e68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005e88:	801a      	strh	r2, [r3, #0]
 8005e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	785b      	ldrb	r3, [r3, #1]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f040 809d 	bne.w	8005fe4 <USB_EPStartXfer+0x1244>
 8005eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ebc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	461a      	mov	r2, r3
 8005eca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ece:	4413      	add	r3, r2
 8005ed0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	011a      	lsls	r2, r3, #4
 8005ee2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005eec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f02:	801a      	strh	r2, [r3, #0]
 8005f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	2b3e      	cmp	r3, #62	; 0x3e
 8005f12:	d92b      	bls.n	8005f6c <USB_EPStartXfer+0x11cc>
 8005f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	095b      	lsrs	r3, r3, #5
 8005f22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	f003 031f 	and.w	r3, r3, #31
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d104      	bne.n	8005f44 <USB_EPStartXfer+0x11a4>
 8005f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	029b      	lsls	r3, r3, #10
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	4313      	orrs	r3, r2
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f68:	801a      	strh	r2, [r3, #0]
 8005f6a:	e069      	b.n	8006040 <USB_EPStartXfer+0x12a0>
 8005f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10c      	bne.n	8005f96 <USB_EPStartXfer+0x11f6>
 8005f7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f92:	801a      	strh	r2, [r3, #0]
 8005f94:	e054      	b.n	8006040 <USB_EPStartXfer+0x12a0>
 8005f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	085b      	lsrs	r3, r3, #1
 8005fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d004      	beq.n	8005fc6 <USB_EPStartXfer+0x1226>
 8005fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	029b      	lsls	r3, r3, #10
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fe0:	801a      	strh	r2, [r3, #0]
 8005fe2:	e02d      	b.n	8006040 <USB_EPStartXfer+0x12a0>
 8005fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	785b      	ldrb	r3, [r3, #1]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d125      	bne.n	8006040 <USB_EPStartXfer+0x12a0>
 8005ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006002:	b29b      	uxth	r3, r3
 8006004:	461a      	mov	r2, r3
 8006006:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800600a:	4413      	add	r3, r2
 800600c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006014:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	011a      	lsls	r2, r3, #4
 800601e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006022:	4413      	add	r3, r2
 8006024:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006028:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800602c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	b29a      	uxth	r2, r3
 800603a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800603e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 8218 	beq.w	8006482 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006056:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006072:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d005      	beq.n	800608a <USB_EPStartXfer+0x12ea>
 800607e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10d      	bne.n	80060a6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800608a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800608e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006092:	2b00      	cmp	r3, #0
 8006094:	f040 81f5 	bne.w	8006482 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006098:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800609c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f040 81ee 	bne.w	8006482 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80060a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060cc:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80060d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	441a      	add	r2, r3
 80060ea:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80060ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060fe:	b29b      	uxth	r3, r3
 8006100:	8013      	strh	r3, [r2, #0]
 8006102:	e1be      	b.n	8006482 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	78db      	ldrb	r3, [r3, #3]
 8006110:	2b01      	cmp	r3, #1
 8006112:	f040 81b4 	bne.w	800647e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699a      	ldr	r2, [r3, #24]
 8006122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	429a      	cmp	r2, r3
 8006130:	d917      	bls.n	8006162 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699a      	ldr	r2, [r3, #24]
 800614e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006152:	1ad2      	subs	r2, r2, r3
 8006154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	619a      	str	r2, [r3, #24]
 8006160:	e00e      	b.n	8006180 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2200      	movs	r2, #0
 800617e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006184:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	785b      	ldrb	r3, [r3, #1]
 800618c:	2b00      	cmp	r3, #0
 800618e:	f040 8085 	bne.w	800629c <USB_EPStartXfer+0x14fc>
 8006192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006196:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	461a      	mov	r2, r3
 80061b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061b6:	4413      	add	r3, r2
 80061b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	011a      	lsls	r2, r3, #4
 80061ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80061ce:	4413      	add	r3, r2
 80061d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061ea:	801a      	strh	r2, [r3, #0]
 80061ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f0:	2b3e      	cmp	r3, #62	; 0x3e
 80061f2:	d923      	bls.n	800623c <USB_EPStartXfer+0x149c>
 80061f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f8:	095b      	lsrs	r3, r3, #5
 80061fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80061fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006202:	f003 031f 	and.w	r3, r3, #31
 8006206:	2b00      	cmp	r3, #0
 8006208:	d104      	bne.n	8006214 <USB_EPStartXfer+0x1474>
 800620a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800620e:	3b01      	subs	r3, #1
 8006210:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006214:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	b29a      	uxth	r2, r3
 800621c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006220:	b29b      	uxth	r3, r3
 8006222:	029b      	lsls	r3, r3, #10
 8006224:	b29b      	uxth	r3, r3
 8006226:	4313      	orrs	r3, r2
 8006228:	b29b      	uxth	r3, r3
 800622a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800622e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006232:	b29a      	uxth	r2, r3
 8006234:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006238:	801a      	strh	r2, [r3, #0]
 800623a:	e060      	b.n	80062fe <USB_EPStartXfer+0x155e>
 800623c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10c      	bne.n	800625e <USB_EPStartXfer+0x14be>
 8006244:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	b29b      	uxth	r3, r3
 800624c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006254:	b29a      	uxth	r2, r3
 8006256:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800625a:	801a      	strh	r2, [r3, #0]
 800625c:	e04f      	b.n	80062fe <USB_EPStartXfer+0x155e>
 800625e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006262:	085b      	lsrs	r3, r3, #1
 8006264:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b00      	cmp	r3, #0
 8006272:	d004      	beq.n	800627e <USB_EPStartXfer+0x14de>
 8006274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006278:	3301      	adds	r3, #1
 800627a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800627e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	b29a      	uxth	r2, r3
 8006286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800628a:	b29b      	uxth	r3, r3
 800628c:	029b      	lsls	r3, r3, #10
 800628e:	b29b      	uxth	r3, r3
 8006290:	4313      	orrs	r3, r2
 8006292:	b29a      	uxth	r2, r3
 8006294:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006298:	801a      	strh	r2, [r3, #0]
 800629a:	e030      	b.n	80062fe <USB_EPStartXfer+0x155e>
 800629c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	785b      	ldrb	r3, [r3, #1]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d128      	bne.n	80062fe <USB_EPStartXfer+0x155e>
 80062ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80062ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	461a      	mov	r2, r3
 80062cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062d0:	4413      	add	r3, r2
 80062d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80062d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	011a      	lsls	r2, r3, #4
 80062e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062e8:	4413      	add	r3, r2
 80062ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80062fc:	801a      	strh	r2, [r3, #0]
 80062fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006302:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800630c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	785b      	ldrb	r3, [r3, #1]
 8006318:	2b00      	cmp	r3, #0
 800631a:	f040 8085 	bne.w	8006428 <USB_EPStartXfer+0x1688>
 800631e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006322:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800632c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006330:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800633a:	b29b      	uxth	r3, r3
 800633c:	461a      	mov	r2, r3
 800633e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006342:	4413      	add	r3, r2
 8006344:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800634c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	011a      	lsls	r2, r3, #4
 8006356:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800635a:	4413      	add	r3, r2
 800635c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006360:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006364:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	b29b      	uxth	r3, r3
 800636c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006370:	b29a      	uxth	r2, r3
 8006372:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006376:	801a      	strh	r2, [r3, #0]
 8006378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800637c:	2b3e      	cmp	r3, #62	; 0x3e
 800637e:	d923      	bls.n	80063c8 <USB_EPStartXfer+0x1628>
 8006380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006384:	095b      	lsrs	r3, r3, #5
 8006386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800638a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800638e:	f003 031f 	and.w	r3, r3, #31
 8006392:	2b00      	cmp	r3, #0
 8006394:	d104      	bne.n	80063a0 <USB_EPStartXfer+0x1600>
 8006396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800639a:	3b01      	subs	r3, #1
 800639c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	029b      	lsls	r3, r3, #10
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	4313      	orrs	r3, r2
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063be:	b29a      	uxth	r2, r3
 80063c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063c4:	801a      	strh	r2, [r3, #0]
 80063c6:	e05c      	b.n	8006482 <USB_EPStartXfer+0x16e2>
 80063c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10c      	bne.n	80063ea <USB_EPStartXfer+0x164a>
 80063d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063e6:	801a      	strh	r2, [r3, #0]
 80063e8:	e04b      	b.n	8006482 <USB_EPStartXfer+0x16e2>
 80063ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ee:	085b      	lsrs	r3, r3, #1
 80063f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d004      	beq.n	800640a <USB_EPStartXfer+0x166a>
 8006400:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006404:	3301      	adds	r3, #1
 8006406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800640a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	b29a      	uxth	r2, r3
 8006412:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006416:	b29b      	uxth	r3, r3
 8006418:	029b      	lsls	r3, r3, #10
 800641a:	b29b      	uxth	r3, r3
 800641c:	4313      	orrs	r3, r2
 800641e:	b29a      	uxth	r2, r3
 8006420:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006424:	801a      	strh	r2, [r3, #0]
 8006426:	e02c      	b.n	8006482 <USB_EPStartXfer+0x16e2>
 8006428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800642c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	785b      	ldrb	r3, [r3, #1]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d124      	bne.n	8006482 <USB_EPStartXfer+0x16e2>
 8006438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800643c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006446:	b29b      	uxth	r3, r3
 8006448:	461a      	mov	r2, r3
 800644a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800644e:	4413      	add	r3, r2
 8006450:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	011a      	lsls	r2, r3, #4
 8006462:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006466:	4413      	add	r3, r2
 8006468:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800646c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006474:	b29a      	uxth	r2, r3
 8006476:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800647a:	801a      	strh	r2, [r3, #0]
 800647c:	e001      	b.n	8006482 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e03a      	b.n	80064f8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006486:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80064ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80064b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80064b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80064bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064c0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80064c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	441a      	add	r2, r3
 80064de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80064e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006502:	b480      	push	{r7}
 8006504:	b085      	sub	sp, #20
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	785b      	ldrb	r3, [r3, #1]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d020      	beq.n	8006556 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	b29b      	uxth	r3, r3
 8006522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800652a:	81bb      	strh	r3, [r7, #12]
 800652c:	89bb      	ldrh	r3, [r7, #12]
 800652e:	f083 0310 	eor.w	r3, r3, #16
 8006532:	81bb      	strh	r3, [r7, #12]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	441a      	add	r2, r3
 800653e:	89bb      	ldrh	r3, [r7, #12]
 8006540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800654c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006550:	b29b      	uxth	r3, r3
 8006552:	8013      	strh	r3, [r2, #0]
 8006554:	e01f      	b.n	8006596 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	b29b      	uxth	r3, r3
 8006564:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656c:	81fb      	strh	r3, [r7, #14]
 800656e:	89fb      	ldrh	r3, [r7, #14]
 8006570:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006574:	81fb      	strh	r3, [r7, #14]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	441a      	add	r2, r3
 8006580:	89fb      	ldrh	r3, [r7, #14]
 8006582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800658a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800658e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006592:	b29b      	uxth	r3, r3
 8006594:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	bc80      	pop	{r7}
 80065a0:	4770      	bx	lr

080065a2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b087      	sub	sp, #28
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	7b1b      	ldrb	r3, [r3, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f040 809d 	bne.w	80066f0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	785b      	ldrb	r3, [r3, #1]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d04c      	beq.n	8006658 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	823b      	strh	r3, [r7, #16]
 80065cc:	8a3b      	ldrh	r3, [r7, #16]
 80065ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d01b      	beq.n	800660e <USB_EPClearStall+0x6c>
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ec:	81fb      	strh	r3, [r7, #14]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	441a      	add	r2, r3
 80065f8:	89fb      	ldrh	r3, [r7, #14]
 80065fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006606:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800660a:	b29b      	uxth	r3, r3
 800660c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	78db      	ldrb	r3, [r3, #3]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d06c      	beq.n	80066f0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	b29b      	uxth	r3, r3
 8006624:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800662c:	81bb      	strh	r3, [r7, #12]
 800662e:	89bb      	ldrh	r3, [r7, #12]
 8006630:	f083 0320 	eor.w	r3, r3, #32
 8006634:	81bb      	strh	r3, [r7, #12]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	441a      	add	r2, r3
 8006640:	89bb      	ldrh	r3, [r7, #12]
 8006642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800664a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800664e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006652:	b29b      	uxth	r3, r3
 8006654:	8013      	strh	r3, [r2, #0]
 8006656:	e04b      	b.n	80066f0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4413      	add	r3, r2
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	82fb      	strh	r3, [r7, #22]
 8006666:	8afb      	ldrh	r3, [r7, #22]
 8006668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d01b      	beq.n	80066a8 <USB_EPClearStall+0x106>
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	b29b      	uxth	r3, r3
 800667e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006686:	82bb      	strh	r3, [r7, #20]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	441a      	add	r2, r3
 8006692:	8abb      	ldrh	r3, [r7, #20]
 8006694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800669c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066be:	827b      	strh	r3, [r7, #18]
 80066c0:	8a7b      	ldrh	r3, [r7, #18]
 80066c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066c6:	827b      	strh	r3, [r7, #18]
 80066c8:	8a7b      	ldrh	r3, [r7, #18]
 80066ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066ce:	827b      	strh	r3, [r7, #18]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	441a      	add	r2, r3
 80066da:	8a7b      	ldrh	r3, [r7, #18]
 80066dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bc80      	pop	{r7}
 80066fa:	4770      	bx	lr

080066fc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	460b      	mov	r3, r1
 8006706:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006708:	78fb      	ldrb	r3, [r7, #3]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d103      	bne.n	8006716 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2280      	movs	r2, #128	; 0x80
 8006712:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	bc80      	pop	{r7}
 8006720:	4770      	bx	lr

08006722 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	bc80      	pop	{r7}
 8006734:	4770      	bx	lr

08006736 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	bc80      	pop	{r7}
 8006748:	4770      	bx	lr

0800674a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800674a:	b480      	push	{r7}
 800674c:	b085      	sub	sp, #20
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006758:	b29b      	uxth	r3, r3
 800675a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800675c:	68fb      	ldr	r3, [r7, #12]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	bc80      	pop	{r7}
 8006766:	4770      	bx	lr

08006768 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	bc80      	pop	{r7}
 800677c:	4770      	bx	lr

0800677e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800677e:	b480      	push	{r7}
 8006780:	b08b      	sub	sp, #44	; 0x2c
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	4611      	mov	r1, r2
 800678a:	461a      	mov	r2, r3
 800678c:	460b      	mov	r3, r1
 800678e:	80fb      	strh	r3, [r7, #6]
 8006790:	4613      	mov	r3, r2
 8006792:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006794:	88bb      	ldrh	r3, [r7, #4]
 8006796:	3301      	adds	r3, #1
 8006798:	085b      	lsrs	r3, r3, #1
 800679a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067a4:	88fb      	ldrh	r3, [r7, #6]
 80067a6:	005a      	lsls	r2, r3, #1
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067b0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	627b      	str	r3, [r7, #36]	; 0x24
 80067b6:	e01e      	b.n	80067f6 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	3301      	adds	r3, #1
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	021b      	lsls	r3, r3, #8
 80067c6:	b21a      	sxth	r2, r3
 80067c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	b21b      	sxth	r3, r3
 80067d0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	8a7a      	ldrh	r2, [r7, #18]
 80067d6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	3302      	adds	r3, #2
 80067dc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	3302      	adds	r3, #2
 80067e2:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	3301      	adds	r3, #1
 80067e8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	3301      	adds	r3, #1
 80067ee:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	3b01      	subs	r3, #1
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1dd      	bne.n	80067b8 <USB_WritePMA+0x3a>
  }
}
 80067fc:	bf00      	nop
 80067fe:	bf00      	nop
 8006800:	372c      	adds	r7, #44	; 0x2c
 8006802:	46bd      	mov	sp, r7
 8006804:	bc80      	pop	{r7}
 8006806:	4770      	bx	lr

08006808 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006808:	b480      	push	{r7}
 800680a:	b08b      	sub	sp, #44	; 0x2c
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	4611      	mov	r1, r2
 8006814:	461a      	mov	r2, r3
 8006816:	460b      	mov	r3, r1
 8006818:	80fb      	strh	r3, [r7, #6]
 800681a:	4613      	mov	r3, r2
 800681c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800681e:	88bb      	ldrh	r3, [r7, #4]
 8006820:	085b      	lsrs	r3, r3, #1
 8006822:	b29b      	uxth	r3, r3
 8006824:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800682e:	88fb      	ldrh	r3, [r7, #6]
 8006830:	005a      	lsls	r2, r3, #1
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800683a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
 8006840:	e01b      	b.n	800687a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	b29b      	uxth	r3, r3
 8006848:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	3302      	adds	r3, #2
 800684e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	b2da      	uxtb	r2, r3
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	3301      	adds	r3, #1
 800685c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	0a1b      	lsrs	r3, r3, #8
 8006862:	b2da      	uxtb	r2, r3
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	3301      	adds	r3, #1
 800686c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	3302      	adds	r3, #2
 8006872:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	3b01      	subs	r3, #1
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e0      	bne.n	8006842 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006880:	88bb      	ldrh	r3, [r7, #4]
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	b29b      	uxth	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d007      	beq.n	800689c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	b2da      	uxtb	r2, r3
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	701a      	strb	r2, [r3, #0]
  }
}
 800689c:	bf00      	nop
 800689e:	372c      	adds	r7, #44	; 0x2c
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bc80      	pop	{r7}
 80068a4:	4770      	bx	lr

080068a6 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b082      	sub	sp, #8
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	460b      	mov	r3, r1
 80068b0:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80068b2:	2304      	movs	r3, #4
 80068b4:	2203      	movs	r2, #3
 80068b6:	2181      	movs	r1, #129	; 0x81
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f001 fc84 	bl	80081c6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80068c4:	2010      	movs	r0, #16
 80068c6:	f001 fd93 	bl	80083f0 <USBD_static_malloc>
 80068ca:	4602      	mov	r2, r0
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80068dc:	2302      	movs	r3, #2
 80068de:	e005      	b.n	80068ec <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e6:	2200      	movs	r2, #0
 80068e8:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006900:	2181      	movs	r1, #129	; 0x81
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f001 fc85 	bl	8008212 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006914:	2b00      	cmp	r3, #0
 8006916:	d009      	beq.n	800692c <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800691e:	4618      	mov	r0, r3
 8006920:	f001 fd72 	bl	8008408 <USBD_static_free>
    pdev->pClassData = NULL;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
	...

08006938 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b088      	sub	sp, #32
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006948:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800694a:	2300      	movs	r3, #0
 800694c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800694e:	2300      	movs	r3, #0
 8006950:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006952:	2300      	movs	r3, #0
 8006954:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006962:	2b00      	cmp	r3, #0
 8006964:	d045      	beq.n	80069f2 <USBD_HID_Setup+0xba>
 8006966:	2b20      	cmp	r3, #32
 8006968:	f040 80d3 	bne.w	8006b12 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	785b      	ldrb	r3, [r3, #1]
 8006970:	3b02      	subs	r3, #2
 8006972:	2b09      	cmp	r3, #9
 8006974:	d835      	bhi.n	80069e2 <USBD_HID_Setup+0xaa>
 8006976:	a201      	add	r2, pc, #4	; (adr r2, 800697c <USBD_HID_Setup+0x44>)
 8006978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697c:	080069d3 	.word	0x080069d3
 8006980:	080069b3 	.word	0x080069b3
 8006984:	080069e3 	.word	0x080069e3
 8006988:	080069e3 	.word	0x080069e3
 800698c:	080069e3 	.word	0x080069e3
 8006990:	080069e3 	.word	0x080069e3
 8006994:	080069e3 	.word	0x080069e3
 8006998:	080069e3 	.word	0x080069e3
 800699c:	080069c1 	.word	0x080069c1
 80069a0:	080069a5 	.word	0x080069a5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	885b      	ldrh	r3, [r3, #2]
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	461a      	mov	r2, r3
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	601a      	str	r2, [r3, #0]
          break;
 80069b0:	e01e      	b.n	80069f0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2201      	movs	r2, #1
 80069b6:	4619      	mov	r1, r3
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f001 f944 	bl	8007c46 <USBD_CtlSendData>
          break;
 80069be:	e017      	b.n	80069f0 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	885b      	ldrh	r3, [r3, #2]
 80069c4:	0a1b      	lsrs	r3, r3, #8
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	461a      	mov	r2, r3
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	605a      	str	r2, [r3, #4]
          break;
 80069d0:	e00e      	b.n	80069f0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	3304      	adds	r3, #4
 80069d6:	2201      	movs	r2, #1
 80069d8:	4619      	mov	r1, r3
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f001 f933 	bl	8007c46 <USBD_CtlSendData>
          break;
 80069e0:	e006      	b.n	80069f0 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 80069e2:	6839      	ldr	r1, [r7, #0]
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f001 f8c4 	bl	8007b72 <USBD_CtlError>
          ret = USBD_FAIL;
 80069ea:	2302      	movs	r3, #2
 80069ec:	75fb      	strb	r3, [r7, #23]
          break;
 80069ee:	bf00      	nop
      }
      break;
 80069f0:	e096      	b.n	8006b20 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	785b      	ldrb	r3, [r3, #1]
 80069f6:	2b0b      	cmp	r3, #11
 80069f8:	f200 8083 	bhi.w	8006b02 <USBD_HID_Setup+0x1ca>
 80069fc:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <USBD_HID_Setup+0xcc>)
 80069fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a02:	bf00      	nop
 8006a04:	08006a35 	.word	0x08006a35
 8006a08:	08006b03 	.word	0x08006b03
 8006a0c:	08006b03 	.word	0x08006b03
 8006a10:	08006b03 	.word	0x08006b03
 8006a14:	08006b03 	.word	0x08006b03
 8006a18:	08006b03 	.word	0x08006b03
 8006a1c:	08006a5d 	.word	0x08006a5d
 8006a20:	08006b03 	.word	0x08006b03
 8006a24:	08006b03 	.word	0x08006b03
 8006a28:	08006b03 	.word	0x08006b03
 8006a2c:	08006ab5 	.word	0x08006ab5
 8006a30:	08006add 	.word	0x08006add
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	d107      	bne.n	8006a4e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006a3e:	f107 030e 	add.w	r3, r7, #14
 8006a42:	2202      	movs	r2, #2
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 f8fd 	bl	8007c46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a4c:	e060      	b.n	8006b10 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f001 f88e 	bl	8007b72 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a56:	2302      	movs	r3, #2
 8006a58:	75fb      	strb	r3, [r7, #23]
          break;
 8006a5a:	e059      	b.n	8006b10 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	885b      	ldrh	r3, [r3, #2]
 8006a60:	0a1b      	lsrs	r3, r3, #8
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	2b22      	cmp	r3, #34	; 0x22
 8006a66:	d108      	bne.n	8006a7a <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	88db      	ldrh	r3, [r3, #6]
 8006a6c:	2b3f      	cmp	r3, #63	; 0x3f
 8006a6e:	bf28      	it	cs
 8006a70:	233f      	movcs	r3, #63	; 0x3f
 8006a72:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006a74:	4b2d      	ldr	r3, [pc, #180]	; (8006b2c <USBD_HID_Setup+0x1f4>)
 8006a76:	61bb      	str	r3, [r7, #24]
 8006a78:	e015      	b.n	8006aa6 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	885b      	ldrh	r3, [r3, #2]
 8006a7e:	0a1b      	lsrs	r3, r3, #8
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	2b21      	cmp	r3, #33	; 0x21
 8006a84:	d108      	bne.n	8006a98 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006a86:	4b2a      	ldr	r3, [pc, #168]	; (8006b30 <USBD_HID_Setup+0x1f8>)
 8006a88:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	88db      	ldrh	r3, [r3, #6]
 8006a8e:	2b09      	cmp	r3, #9
 8006a90:	bf28      	it	cs
 8006a92:	2309      	movcs	r3, #9
 8006a94:	83fb      	strh	r3, [r7, #30]
 8006a96:	e006      	b.n	8006aa6 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006a98:	6839      	ldr	r1, [r7, #0]
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f001 f869 	bl	8007b72 <USBD_CtlError>
            ret = USBD_FAIL;
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	75fb      	strb	r3, [r7, #23]
            break;
 8006aa4:	e034      	b.n	8006b10 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006aa6:	8bfb      	ldrh	r3, [r7, #30]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	69b9      	ldr	r1, [r7, #24]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f001 f8ca 	bl	8007c46 <USBD_CtlSendData>
          break;
 8006ab2:	e02d      	b.n	8006b10 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d107      	bne.n	8006ace <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f001 f8bd 	bl	8007c46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006acc:	e020      	b.n	8006b10 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006ace:	6839      	ldr	r1, [r7, #0]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f001 f84e 	bl	8007b72 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ad6:	2302      	movs	r3, #2
 8006ad8:	75fb      	strb	r3, [r7, #23]
          break;
 8006ada:	e019      	b.n	8006b10 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae2:	2b03      	cmp	r3, #3
 8006ae4:	d106      	bne.n	8006af4 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	885b      	ldrh	r3, [r3, #2]
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	461a      	mov	r2, r3
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006af2:	e00d      	b.n	8006b10 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f001 f83b 	bl	8007b72 <USBD_CtlError>
            ret = USBD_FAIL;
 8006afc:	2302      	movs	r3, #2
 8006afe:	75fb      	strb	r3, [r7, #23]
          break;
 8006b00:	e006      	b.n	8006b10 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f001 f834 	bl	8007b72 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b0e:	bf00      	nop
      }
      break;
 8006b10:	e006      	b.n	8006b20 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f001 f82c 	bl	8007b72 <USBD_CtlError>
      ret = USBD_FAIL;
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b1e:	bf00      	nop
  }

  return ret;
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3720      	adds	r7, #32
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	200000c8 	.word	0x200000c8
 8006b30:	200000b0 	.word	0x200000b0

08006b34 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b48:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b50:	2b03      	cmp	r3, #3
 8006b52:	d10c      	bne.n	8006b6e <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	7b1b      	ldrb	r3, [r3, #12]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d108      	bne.n	8006b6e <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8006b62:	88fb      	ldrh	r3, [r7, #6]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	2181      	movs	r1, #129	; 0x81
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f001 fbfa 	bl	8008362 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2222      	movs	r2, #34	; 0x22
 8006b84:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006b86:	4b03      	ldr	r3, [pc, #12]	; (8006b94 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bc80      	pop	{r7}
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	20000044 	.word	0x20000044

08006b98 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2222      	movs	r2, #34	; 0x22
 8006ba4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006ba6:	4b03      	ldr	r3, [pc, #12]	; (8006bb4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bc80      	pop	{r7}
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	20000068 	.word	0x20000068

08006bb8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2222      	movs	r2, #34	; 0x22
 8006bc4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006bc6:	4b03      	ldr	r3, [pc, #12]	; (8006bd4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bc80      	pop	{r7}
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	2000008c 	.word	0x2000008c

08006bd8 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bea:	2200      	movs	r2, #0
 8006bec:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bc80      	pop	{r7}
 8006bf8:	4770      	bx	lr
	...

08006bfc <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	220a      	movs	r2, #10
 8006c08:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006c0a:	4b03      	ldr	r3, [pc, #12]	; (8006c18 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bc80      	pop	{r7}
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	200000bc 	.word	0x200000bc

08006c1c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	4613      	mov	r3, r2
 8006c28:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006c30:	2302      	movs	r3, #2
 8006c32:	e01a      	b.n	8006c6a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	79fa      	ldrb	r2, [r7, #7]
 8006c60:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f001 fa4c 	bl	8008100 <USBD_LL_Init>

  return USBD_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b085      	sub	sp, #20
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d006      	beq.n	8006c94 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	683a      	ldr	r2, [r7, #0]
 8006c8a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	73fb      	strb	r3, [r7, #15]
 8006c92:	e001      	b.n	8006c98 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006c94:	2302      	movs	r3, #2
 8006c96:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bc80      	pop	{r7}
 8006ca2:	4770      	bx	lr

08006ca4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 fa6f 	bl	8008190 <USBD_LL_Start>

  return USBD_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bc80      	pop	{r7}
 8006cce:	4770      	bx	lr

08006cd0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006cdc:	2302      	movs	r3, #2
 8006cde:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00c      	beq.n	8006d04 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	78fa      	ldrb	r2, [r7, #3]
 8006cf4:	4611      	mov	r1, r2
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	4798      	blx	r3
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d101      	bne.n	8006d04 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b082      	sub	sp, #8
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	460b      	mov	r3, r1
 8006d18:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	78fa      	ldrb	r2, [r7, #3]
 8006d24:	4611      	mov	r1, r2
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	4798      	blx	r3

  return USBD_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 fed7 	bl	8007afa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006d68:	f003 031f 	and.w	r3, r3, #31
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d016      	beq.n	8006d9e <USBD_LL_SetupStage+0x6a>
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d81c      	bhi.n	8006dae <USBD_LL_SetupStage+0x7a>
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <USBD_LL_SetupStage+0x4a>
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d008      	beq.n	8006d8e <USBD_LL_SetupStage+0x5a>
 8006d7c:	e017      	b.n	8006dae <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f9ca 	bl	8007120 <USBD_StdDevReq>
      break;
 8006d8c:	e01a      	b.n	8006dc4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d94:	4619      	mov	r1, r3
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fa2c 	bl	80071f4 <USBD_StdItfReq>
      break;
 8006d9c:	e012      	b.n	8006dc4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fa6c 	bl	8007284 <USBD_StdEPReq>
      break;
 8006dac:	e00a      	b.n	8006dc4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006db4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	4619      	mov	r1, r3
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f001 fa47 	bl	8008250 <USBD_LL_StallEP>
      break;
 8006dc2:	bf00      	nop
  }

  return USBD_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b086      	sub	sp, #24
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	607a      	str	r2, [r7, #4]
 8006dda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006ddc:	7afb      	ldrb	r3, [r7, #11]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d14b      	bne.n	8006e7a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006de8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006df0:	2b03      	cmp	r3, #3
 8006df2:	d134      	bne.n	8006e5e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	68da      	ldr	r2, [r3, #12]
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d919      	bls.n	8006e34 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	68da      	ldr	r2, [r3, #12]
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	1ad2      	subs	r2, r2, r3
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	68da      	ldr	r2, [r3, #12]
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d203      	bcs.n	8006e22 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	e002      	b.n	8006e28 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	461a      	mov	r2, r3
 8006e2a:	6879      	ldr	r1, [r7, #4]
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 ff38 	bl	8007ca2 <USBD_CtlContinueRx>
 8006e32:	e038      	b.n	8006ea6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00a      	beq.n	8006e56 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d105      	bne.n	8006e56 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 ff35 	bl	8007cc6 <USBD_CtlSendStatus>
 8006e5c:	e023      	b.n	8006ea6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e64:	2b05      	cmp	r3, #5
 8006e66:	d11e      	bne.n	8006ea6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006e70:	2100      	movs	r1, #0
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f001 f9ec 	bl	8008250 <USBD_LL_StallEP>
 8006e78:	e015      	b.n	8006ea6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00d      	beq.n	8006ea2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006e8c:	2b03      	cmp	r3, #3
 8006e8e:	d108      	bne.n	8006ea2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	7afa      	ldrb	r2, [r7, #11]
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	4798      	blx	r3
 8006ea0:	e001      	b.n	8006ea6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	e000      	b.n	8006ea8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3718      	adds	r7, #24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	607a      	str	r2, [r7, #4]
 8006ebc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006ebe:	7afb      	ldrb	r3, [r7, #11]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d17f      	bne.n	8006fc4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3314      	adds	r3, #20
 8006ec8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d15c      	bne.n	8006f8e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	68da      	ldr	r2, [r3, #12]
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d915      	bls.n	8006f0c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	68da      	ldr	r2, [r3, #12]
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	1ad2      	subs	r2, r2, r3
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	6879      	ldr	r1, [r7, #4]
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 fec0 	bl	8007c7e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006efe:	2300      	movs	r3, #0
 8006f00:	2200      	movs	r2, #0
 8006f02:	2100      	movs	r1, #0
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f001 fa4f 	bl	80083a8 <USBD_LL_PrepareReceive>
 8006f0a:	e04e      	b.n	8006faa <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	6912      	ldr	r2, [r2, #16]
 8006f14:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f18:	fb01 f202 	mul.w	r2, r1, r2
 8006f1c:	1a9b      	subs	r3, r3, r2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d11c      	bne.n	8006f5c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	689a      	ldr	r2, [r3, #8]
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d316      	bcc.n	8006f5c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	689a      	ldr	r2, [r3, #8]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d20f      	bcs.n	8006f5c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	2100      	movs	r1, #0
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 fe9c 	bl	8007c7e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f4e:	2300      	movs	r3, #0
 8006f50:	2200      	movs	r2, #0
 8006f52:	2100      	movs	r1, #0
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f001 fa27 	bl	80083a8 <USBD_LL_PrepareReceive>
 8006f5a:	e026      	b.n	8006faa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00a      	beq.n	8006f7e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d105      	bne.n	8006f7e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006f7e:	2180      	movs	r1, #128	; 0x80
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f001 f965 	bl	8008250 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f000 feb0 	bl	8007cec <USBD_CtlReceiveStatus>
 8006f8c:	e00d      	b.n	8006faa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	d004      	beq.n	8006fa2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d103      	bne.n	8006faa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006fa2:	2180      	movs	r1, #128	; 0x80
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f001 f953 	bl	8008250 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d11d      	bne.n	8006ff0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f7ff fe81 	bl	8006cbc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006fc2:	e015      	b.n	8006ff0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fca:	695b      	ldr	r3, [r3, #20]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00d      	beq.n	8006fec <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006fd6:	2b03      	cmp	r3, #3
 8006fd8:	d108      	bne.n	8006fec <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	7afa      	ldrb	r2, [r7, #11]
 8006fe4:	4611      	mov	r1, r2
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	4798      	blx	r3
 8006fea:	e001      	b.n	8006ff0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006fec:	2302      	movs	r3, #2
 8006fee:	e000      	b.n	8006ff2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007002:	2340      	movs	r3, #64	; 0x40
 8007004:	2200      	movs	r2, #0
 8007006:	2100      	movs	r1, #0
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f001 f8dc 	bl	80081c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2240      	movs	r2, #64	; 0x40
 800701a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800701e:	2340      	movs	r3, #64	; 0x40
 8007020:	2200      	movs	r2, #0
 8007022:	2180      	movs	r1, #128	; 0x80
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f001 f8ce 	bl	80081c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2240      	movs	r2, #64	; 0x40
 8007034:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d009      	beq.n	8007072 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	6852      	ldr	r2, [r2, #4]
 800706a:	b2d2      	uxtb	r2, r2
 800706c:	4611      	mov	r1, r2
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	4798      	blx	r3
  }

  return USBD_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	78fa      	ldrb	r2, [r7, #3]
 800708c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	bc80      	pop	{r7}
 8007098:	4770      	bx	lr

0800709a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800709a:	b480      	push	{r7}
 800709c:	b083      	sub	sp, #12
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2204      	movs	r2, #4
 80070b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	bc80      	pop	{r7}
 80070c0:	4770      	bx	lr

080070c2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b083      	sub	sp, #12
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	d105      	bne.n	80070e0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bc80      	pop	{r7}
 80070ea:	4770      	bx	lr

080070ec <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070fa:	2b03      	cmp	r3, #3
 80070fc:	d10b      	bne.n	8007116 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d005      	beq.n	8007116 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007136:	2b40      	cmp	r3, #64	; 0x40
 8007138:	d005      	beq.n	8007146 <USBD_StdDevReq+0x26>
 800713a:	2b40      	cmp	r3, #64	; 0x40
 800713c:	d84f      	bhi.n	80071de <USBD_StdDevReq+0xbe>
 800713e:	2b00      	cmp	r3, #0
 8007140:	d009      	beq.n	8007156 <USBD_StdDevReq+0x36>
 8007142:	2b20      	cmp	r3, #32
 8007144:	d14b      	bne.n	80071de <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	4798      	blx	r3
      break;
 8007154:	e048      	b.n	80071e8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	785b      	ldrb	r3, [r3, #1]
 800715a:	2b09      	cmp	r3, #9
 800715c:	d839      	bhi.n	80071d2 <USBD_StdDevReq+0xb2>
 800715e:	a201      	add	r2, pc, #4	; (adr r2, 8007164 <USBD_StdDevReq+0x44>)
 8007160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007164:	080071b5 	.word	0x080071b5
 8007168:	080071c9 	.word	0x080071c9
 800716c:	080071d3 	.word	0x080071d3
 8007170:	080071bf 	.word	0x080071bf
 8007174:	080071d3 	.word	0x080071d3
 8007178:	08007197 	.word	0x08007197
 800717c:	0800718d 	.word	0x0800718d
 8007180:	080071d3 	.word	0x080071d3
 8007184:	080071ab 	.word	0x080071ab
 8007188:	080071a1 	.word	0x080071a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800718c:	6839      	ldr	r1, [r7, #0]
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f9dc 	bl	800754c <USBD_GetDescriptor>
          break;
 8007194:	e022      	b.n	80071dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fb3f 	bl	800781c <USBD_SetAddress>
          break;
 800719e:	e01d      	b.n	80071dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fb7e 	bl	80078a4 <USBD_SetConfig>
          break;
 80071a8:	e018      	b.n	80071dc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fc07 	bl	80079c0 <USBD_GetConfig>
          break;
 80071b2:	e013      	b.n	80071dc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fc37 	bl	8007a2a <USBD_GetStatus>
          break;
 80071bc:	e00e      	b.n	80071dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fc65 	bl	8007a90 <USBD_SetFeature>
          break;
 80071c6:	e009      	b.n	80071dc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fc74 	bl	8007ab8 <USBD_ClrFeature>
          break;
 80071d0:	e004      	b.n	80071dc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fccc 	bl	8007b72 <USBD_CtlError>
          break;
 80071da:	bf00      	nop
      }
      break;
 80071dc:	e004      	b.n	80071e8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fcc6 	bl	8007b72 <USBD_CtlError>
      break;
 80071e6:	bf00      	nop
  }

  return ret;
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop

080071f4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800720a:	2b40      	cmp	r3, #64	; 0x40
 800720c:	d005      	beq.n	800721a <USBD_StdItfReq+0x26>
 800720e:	2b40      	cmp	r3, #64	; 0x40
 8007210:	d82e      	bhi.n	8007270 <USBD_StdItfReq+0x7c>
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <USBD_StdItfReq+0x26>
 8007216:	2b20      	cmp	r3, #32
 8007218:	d12a      	bne.n	8007270 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007220:	3b01      	subs	r3, #1
 8007222:	2b02      	cmp	r3, #2
 8007224:	d81d      	bhi.n	8007262 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	889b      	ldrh	r3, [r3, #4]
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b01      	cmp	r3, #1
 800722e:	d813      	bhi.n	8007258 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	6839      	ldr	r1, [r7, #0]
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	4798      	blx	r3
 800723e:	4603      	mov	r3, r0
 8007240:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	88db      	ldrh	r3, [r3, #6]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d110      	bne.n	800726c <USBD_StdItfReq+0x78>
 800724a:	7bfb      	ldrb	r3, [r7, #15]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10d      	bne.n	800726c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fd38 	bl	8007cc6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007256:	e009      	b.n	800726c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fc89 	bl	8007b72 <USBD_CtlError>
          break;
 8007260:	e004      	b.n	800726c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fc84 	bl	8007b72 <USBD_CtlError>
          break;
 800726a:	e000      	b.n	800726e <USBD_StdItfReq+0x7a>
          break;
 800726c:	bf00      	nop
      }
      break;
 800726e:	e004      	b.n	800727a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fc7d 	bl	8007b72 <USBD_CtlError>
      break;
 8007278:	bf00      	nop
  }

  return USBD_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	889b      	ldrh	r3, [r3, #4]
 8007296:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072a0:	2b40      	cmp	r3, #64	; 0x40
 80072a2:	d007      	beq.n	80072b4 <USBD_StdEPReq+0x30>
 80072a4:	2b40      	cmp	r3, #64	; 0x40
 80072a6:	f200 8146 	bhi.w	8007536 <USBD_StdEPReq+0x2b2>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00a      	beq.n	80072c4 <USBD_StdEPReq+0x40>
 80072ae:	2b20      	cmp	r3, #32
 80072b0:	f040 8141 	bne.w	8007536 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	4798      	blx	r3
      break;
 80072c2:	e13d      	b.n	8007540 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072cc:	2b20      	cmp	r3, #32
 80072ce:	d10a      	bne.n	80072e6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	4798      	blx	r3
 80072de:	4603      	mov	r3, r0
 80072e0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
 80072e4:	e12d      	b.n	8007542 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	785b      	ldrb	r3, [r3, #1]
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d007      	beq.n	80072fe <USBD_StdEPReq+0x7a>
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	f300 811b 	bgt.w	800752a <USBD_StdEPReq+0x2a6>
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d072      	beq.n	80073de <USBD_StdEPReq+0x15a>
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d03a      	beq.n	8007372 <USBD_StdEPReq+0xee>
 80072fc:	e115      	b.n	800752a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007304:	2b02      	cmp	r3, #2
 8007306:	d002      	beq.n	800730e <USBD_StdEPReq+0x8a>
 8007308:	2b03      	cmp	r3, #3
 800730a:	d015      	beq.n	8007338 <USBD_StdEPReq+0xb4>
 800730c:	e02b      	b.n	8007366 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800730e:	7bbb      	ldrb	r3, [r7, #14]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00c      	beq.n	800732e <USBD_StdEPReq+0xaa>
 8007314:	7bbb      	ldrb	r3, [r7, #14]
 8007316:	2b80      	cmp	r3, #128	; 0x80
 8007318:	d009      	beq.n	800732e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	4619      	mov	r1, r3
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 ff96 	bl	8008250 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007324:	2180      	movs	r1, #128	; 0x80
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 ff92 	bl	8008250 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800732c:	e020      	b.n	8007370 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800732e:	6839      	ldr	r1, [r7, #0]
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fc1e 	bl	8007b72 <USBD_CtlError>
              break;
 8007336:	e01b      	b.n	8007370 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	885b      	ldrh	r3, [r3, #2]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10e      	bne.n	800735e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007340:	7bbb      	ldrb	r3, [r7, #14]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00b      	beq.n	800735e <USBD_StdEPReq+0xda>
 8007346:	7bbb      	ldrb	r3, [r7, #14]
 8007348:	2b80      	cmp	r3, #128	; 0x80
 800734a:	d008      	beq.n	800735e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	88db      	ldrh	r3, [r3, #6]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d104      	bne.n	800735e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007354:	7bbb      	ldrb	r3, [r7, #14]
 8007356:	4619      	mov	r1, r3
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 ff79 	bl	8008250 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fcb1 	bl	8007cc6 <USBD_CtlSendStatus>

              break;
 8007364:	e004      	b.n	8007370 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fc02 	bl	8007b72 <USBD_CtlError>
              break;
 800736e:	bf00      	nop
          }
          break;
 8007370:	e0e0      	b.n	8007534 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007378:	2b02      	cmp	r3, #2
 800737a:	d002      	beq.n	8007382 <USBD_StdEPReq+0xfe>
 800737c:	2b03      	cmp	r3, #3
 800737e:	d015      	beq.n	80073ac <USBD_StdEPReq+0x128>
 8007380:	e026      	b.n	80073d0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007382:	7bbb      	ldrb	r3, [r7, #14]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00c      	beq.n	80073a2 <USBD_StdEPReq+0x11e>
 8007388:	7bbb      	ldrb	r3, [r7, #14]
 800738a:	2b80      	cmp	r3, #128	; 0x80
 800738c:	d009      	beq.n	80073a2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800738e:	7bbb      	ldrb	r3, [r7, #14]
 8007390:	4619      	mov	r1, r3
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 ff5c 	bl	8008250 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007398:	2180      	movs	r1, #128	; 0x80
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 ff58 	bl	8008250 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073a0:	e01c      	b.n	80073dc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80073a2:	6839      	ldr	r1, [r7, #0]
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fbe4 	bl	8007b72 <USBD_CtlError>
              break;
 80073aa:	e017      	b.n	80073dc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	885b      	ldrh	r3, [r3, #2]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d112      	bne.n	80073da <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80073b4:	7bbb      	ldrb	r3, [r7, #14]
 80073b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d004      	beq.n	80073c8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80073be:	7bbb      	ldrb	r3, [r7, #14]
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 ff63 	bl	800828e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fc7c 	bl	8007cc6 <USBD_CtlSendStatus>
              }
              break;
 80073ce:	e004      	b.n	80073da <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fbcd 	bl	8007b72 <USBD_CtlError>
              break;
 80073d8:	e000      	b.n	80073dc <USBD_StdEPReq+0x158>
              break;
 80073da:	bf00      	nop
          }
          break;
 80073dc:	e0aa      	b.n	8007534 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d002      	beq.n	80073ee <USBD_StdEPReq+0x16a>
 80073e8:	2b03      	cmp	r3, #3
 80073ea:	d032      	beq.n	8007452 <USBD_StdEPReq+0x1ce>
 80073ec:	e097      	b.n	800751e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073ee:	7bbb      	ldrb	r3, [r7, #14]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d007      	beq.n	8007404 <USBD_StdEPReq+0x180>
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
 80073f6:	2b80      	cmp	r3, #128	; 0x80
 80073f8:	d004      	beq.n	8007404 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fbb8 	bl	8007b72 <USBD_CtlError>
                break;
 8007402:	e091      	b.n	8007528 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007404:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007408:	2b00      	cmp	r3, #0
 800740a:	da0b      	bge.n	8007424 <USBD_StdEPReq+0x1a0>
 800740c:	7bbb      	ldrb	r3, [r7, #14]
 800740e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007412:	4613      	mov	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4413      	add	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	3310      	adds	r3, #16
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	4413      	add	r3, r2
 8007420:	3304      	adds	r3, #4
 8007422:	e00b      	b.n	800743c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800742a:	4613      	mov	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	4413      	add	r3, r2
 800743a:	3304      	adds	r3, #4
 800743c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2200      	movs	r2, #0
 8007442:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2202      	movs	r2, #2
 8007448:	4619      	mov	r1, r3
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fbfb 	bl	8007c46 <USBD_CtlSendData>
              break;
 8007450:	e06a      	b.n	8007528 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007452:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007456:	2b00      	cmp	r3, #0
 8007458:	da11      	bge.n	800747e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800745a:	7bbb      	ldrb	r3, [r7, #14]
 800745c:	f003 020f 	and.w	r2, r3, #15
 8007460:	6879      	ldr	r1, [r7, #4]
 8007462:	4613      	mov	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4413      	add	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	440b      	add	r3, r1
 800746c:	3318      	adds	r3, #24
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d117      	bne.n	80074a4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fb7b 	bl	8007b72 <USBD_CtlError>
                  break;
 800747c:	e054      	b.n	8007528 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800747e:	7bbb      	ldrb	r3, [r7, #14]
 8007480:	f003 020f 	and.w	r2, r3, #15
 8007484:	6879      	ldr	r1, [r7, #4]
 8007486:	4613      	mov	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	440b      	add	r3, r1
 8007490:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d104      	bne.n	80074a4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fb68 	bl	8007b72 <USBD_CtlError>
                  break;
 80074a2:	e041      	b.n	8007528 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	da0b      	bge.n	80074c4 <USBD_StdEPReq+0x240>
 80074ac:	7bbb      	ldrb	r3, [r7, #14]
 80074ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074b2:	4613      	mov	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4413      	add	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	3310      	adds	r3, #16
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	4413      	add	r3, r2
 80074c0:	3304      	adds	r3, #4
 80074c2:	e00b      	b.n	80074dc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074c4:	7bbb      	ldrb	r3, [r7, #14]
 80074c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074ca:	4613      	mov	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	4413      	add	r3, r2
 80074da:	3304      	adds	r3, #4
 80074dc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80074de:	7bbb      	ldrb	r3, [r7, #14]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d002      	beq.n	80074ea <USBD_StdEPReq+0x266>
 80074e4:	7bbb      	ldrb	r3, [r7, #14]
 80074e6:	2b80      	cmp	r3, #128	; 0x80
 80074e8:	d103      	bne.n	80074f2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2200      	movs	r2, #0
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	e00e      	b.n	8007510 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80074f2:	7bbb      	ldrb	r3, [r7, #14]
 80074f4:	4619      	mov	r1, r3
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fee8 	bl	80082cc <USBD_LL_IsStallEP>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	2201      	movs	r2, #1
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	e002      	b.n	8007510 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2200      	movs	r2, #0
 800750e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	2202      	movs	r2, #2
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fb95 	bl	8007c46 <USBD_CtlSendData>
              break;
 800751c:	e004      	b.n	8007528 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800751e:	6839      	ldr	r1, [r7, #0]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fb26 	bl	8007b72 <USBD_CtlError>
              break;
 8007526:	bf00      	nop
          }
          break;
 8007528:	e004      	b.n	8007534 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fb20 	bl	8007b72 <USBD_CtlError>
          break;
 8007532:	bf00      	nop
      }
      break;
 8007534:	e004      	b.n	8007540 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fb1a 	bl	8007b72 <USBD_CtlError>
      break;
 800753e:	bf00      	nop
  }

  return ret;
 8007540:	7bfb      	ldrb	r3, [r7, #15]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
	...

0800754c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007556:	2300      	movs	r3, #0
 8007558:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800755a:	2300      	movs	r3, #0
 800755c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	885b      	ldrh	r3, [r3, #2]
 8007566:	0a1b      	lsrs	r3, r3, #8
 8007568:	b29b      	uxth	r3, r3
 800756a:	3b01      	subs	r3, #1
 800756c:	2b06      	cmp	r3, #6
 800756e:	f200 8128 	bhi.w	80077c2 <USBD_GetDescriptor+0x276>
 8007572:	a201      	add	r2, pc, #4	; (adr r2, 8007578 <USBD_GetDescriptor+0x2c>)
 8007574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007578:	08007595 	.word	0x08007595
 800757c:	080075ad 	.word	0x080075ad
 8007580:	080075ed 	.word	0x080075ed
 8007584:	080077c3 	.word	0x080077c3
 8007588:	080077c3 	.word	0x080077c3
 800758c:	08007763 	.word	0x08007763
 8007590:	0800778f 	.word	0x0800778f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	7c12      	ldrb	r2, [r2, #16]
 80075a0:	f107 0108 	add.w	r1, r7, #8
 80075a4:	4610      	mov	r0, r2
 80075a6:	4798      	blx	r3
 80075a8:	60f8      	str	r0, [r7, #12]
      break;
 80075aa:	e112      	b.n	80077d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	7c1b      	ldrb	r3, [r3, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10d      	bne.n	80075d0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075bc:	f107 0208 	add.w	r2, r7, #8
 80075c0:	4610      	mov	r0, r2
 80075c2:	4798      	blx	r3
 80075c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	3301      	adds	r3, #1
 80075ca:	2202      	movs	r2, #2
 80075cc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80075ce:	e100      	b.n	80077d2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	f107 0208 	add.w	r2, r7, #8
 80075dc:	4610      	mov	r0, r2
 80075de:	4798      	blx	r3
 80075e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	3301      	adds	r3, #1
 80075e6:	2202      	movs	r2, #2
 80075e8:	701a      	strb	r2, [r3, #0]
      break;
 80075ea:	e0f2      	b.n	80077d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	885b      	ldrh	r3, [r3, #2]
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2b05      	cmp	r3, #5
 80075f4:	f200 80ac 	bhi.w	8007750 <USBD_GetDescriptor+0x204>
 80075f8:	a201      	add	r2, pc, #4	; (adr r2, 8007600 <USBD_GetDescriptor+0xb4>)
 80075fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fe:	bf00      	nop
 8007600:	08007619 	.word	0x08007619
 8007604:	0800764d 	.word	0x0800764d
 8007608:	08007681 	.word	0x08007681
 800760c:	080076b5 	.word	0x080076b5
 8007610:	080076e9 	.word	0x080076e9
 8007614:	0800771d 	.word	0x0800771d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00b      	beq.n	800763c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	7c12      	ldrb	r2, [r2, #16]
 8007630:	f107 0108 	add.w	r1, r7, #8
 8007634:	4610      	mov	r0, r2
 8007636:	4798      	blx	r3
 8007638:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800763a:	e091      	b.n	8007760 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fa97 	bl	8007b72 <USBD_CtlError>
            err++;
 8007644:	7afb      	ldrb	r3, [r7, #11]
 8007646:	3301      	adds	r3, #1
 8007648:	72fb      	strb	r3, [r7, #11]
          break;
 800764a:	e089      	b.n	8007760 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00b      	beq.n	8007670 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	7c12      	ldrb	r2, [r2, #16]
 8007664:	f107 0108 	add.w	r1, r7, #8
 8007668:	4610      	mov	r0, r2
 800766a:	4798      	blx	r3
 800766c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800766e:	e077      	b.n	8007760 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007670:	6839      	ldr	r1, [r7, #0]
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fa7d 	bl	8007b72 <USBD_CtlError>
            err++;
 8007678:	7afb      	ldrb	r3, [r7, #11]
 800767a:	3301      	adds	r3, #1
 800767c:	72fb      	strb	r3, [r7, #11]
          break;
 800767e:	e06f      	b.n	8007760 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00b      	beq.n	80076a4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	7c12      	ldrb	r2, [r2, #16]
 8007698:	f107 0108 	add.w	r1, r7, #8
 800769c:	4610      	mov	r0, r2
 800769e:	4798      	blx	r3
 80076a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076a2:	e05d      	b.n	8007760 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076a4:	6839      	ldr	r1, [r7, #0]
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fa63 	bl	8007b72 <USBD_CtlError>
            err++;
 80076ac:	7afb      	ldrb	r3, [r7, #11]
 80076ae:	3301      	adds	r3, #1
 80076b0:	72fb      	strb	r3, [r7, #11]
          break;
 80076b2:	e055      	b.n	8007760 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00b      	beq.n	80076d8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	7c12      	ldrb	r2, [r2, #16]
 80076cc:	f107 0108 	add.w	r1, r7, #8
 80076d0:	4610      	mov	r0, r2
 80076d2:	4798      	blx	r3
 80076d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076d6:	e043      	b.n	8007760 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fa49 	bl	8007b72 <USBD_CtlError>
            err++;
 80076e0:	7afb      	ldrb	r3, [r7, #11]
 80076e2:	3301      	adds	r3, #1
 80076e4:	72fb      	strb	r3, [r7, #11]
          break;
 80076e6:	e03b      	b.n	8007760 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076ee:	695b      	ldr	r3, [r3, #20]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00b      	beq.n	800770c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	7c12      	ldrb	r2, [r2, #16]
 8007700:	f107 0108 	add.w	r1, r7, #8
 8007704:	4610      	mov	r0, r2
 8007706:	4798      	blx	r3
 8007708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800770a:	e029      	b.n	8007760 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fa2f 	bl	8007b72 <USBD_CtlError>
            err++;
 8007714:	7afb      	ldrb	r3, [r7, #11]
 8007716:	3301      	adds	r3, #1
 8007718:	72fb      	strb	r3, [r7, #11]
          break;
 800771a:	e021      	b.n	8007760 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00b      	beq.n	8007740 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	7c12      	ldrb	r2, [r2, #16]
 8007734:	f107 0108 	add.w	r1, r7, #8
 8007738:	4610      	mov	r0, r2
 800773a:	4798      	blx	r3
 800773c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800773e:	e00f      	b.n	8007760 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fa15 	bl	8007b72 <USBD_CtlError>
            err++;
 8007748:	7afb      	ldrb	r3, [r7, #11]
 800774a:	3301      	adds	r3, #1
 800774c:	72fb      	strb	r3, [r7, #11]
          break;
 800774e:	e007      	b.n	8007760 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fa0d 	bl	8007b72 <USBD_CtlError>
          err++;
 8007758:	7afb      	ldrb	r3, [r7, #11]
 800775a:	3301      	adds	r3, #1
 800775c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800775e:	e038      	b.n	80077d2 <USBD_GetDescriptor+0x286>
 8007760:	e037      	b.n	80077d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	7c1b      	ldrb	r3, [r3, #16]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d109      	bne.n	800777e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007772:	f107 0208 	add.w	r2, r7, #8
 8007776:	4610      	mov	r0, r2
 8007778:	4798      	blx	r3
 800777a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800777c:	e029      	b.n	80077d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f9f6 	bl	8007b72 <USBD_CtlError>
        err++;
 8007786:	7afb      	ldrb	r3, [r7, #11]
 8007788:	3301      	adds	r3, #1
 800778a:	72fb      	strb	r3, [r7, #11]
      break;
 800778c:	e021      	b.n	80077d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	7c1b      	ldrb	r3, [r3, #16]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10d      	bne.n	80077b2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800779c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779e:	f107 0208 	add.w	r2, r7, #8
 80077a2:	4610      	mov	r0, r2
 80077a4:	4798      	blx	r3
 80077a6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	3301      	adds	r3, #1
 80077ac:	2207      	movs	r2, #7
 80077ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077b0:	e00f      	b.n	80077d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077b2:	6839      	ldr	r1, [r7, #0]
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f9dc 	bl	8007b72 <USBD_CtlError>
        err++;
 80077ba:	7afb      	ldrb	r3, [r7, #11]
 80077bc:	3301      	adds	r3, #1
 80077be:	72fb      	strb	r3, [r7, #11]
      break;
 80077c0:	e007      	b.n	80077d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80077c2:	6839      	ldr	r1, [r7, #0]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f9d4 	bl	8007b72 <USBD_CtlError>
      err++;
 80077ca:	7afb      	ldrb	r3, [r7, #11]
 80077cc:	3301      	adds	r3, #1
 80077ce:	72fb      	strb	r3, [r7, #11]
      break;
 80077d0:	bf00      	nop
  }

  if (err != 0U)
 80077d2:	7afb      	ldrb	r3, [r7, #11]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d11c      	bne.n	8007812 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80077d8:	893b      	ldrh	r3, [r7, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d011      	beq.n	8007802 <USBD_GetDescriptor+0x2b6>
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	88db      	ldrh	r3, [r3, #6]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00d      	beq.n	8007802 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	88da      	ldrh	r2, [r3, #6]
 80077ea:	893b      	ldrh	r3, [r7, #8]
 80077ec:	4293      	cmp	r3, r2
 80077ee:	bf28      	it	cs
 80077f0:	4613      	movcs	r3, r2
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80077f6:	893b      	ldrh	r3, [r7, #8]
 80077f8:	461a      	mov	r2, r3
 80077fa:	68f9      	ldr	r1, [r7, #12]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fa22 	bl	8007c46 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	88db      	ldrh	r3, [r3, #6]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d104      	bne.n	8007814 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fa5b 	bl	8007cc6 <USBD_CtlSendStatus>
 8007810:	e000      	b.n	8007814 <USBD_GetDescriptor+0x2c8>
    return;
 8007812:	bf00      	nop
    }
  }
}
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop

0800781c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	889b      	ldrh	r3, [r3, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d130      	bne.n	8007890 <USBD_SetAddress+0x74>
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	88db      	ldrh	r3, [r3, #6]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d12c      	bne.n	8007890 <USBD_SetAddress+0x74>
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	885b      	ldrh	r3, [r3, #2]
 800783a:	2b7f      	cmp	r3, #127	; 0x7f
 800783c:	d828      	bhi.n	8007890 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	885b      	ldrh	r3, [r3, #2]
 8007842:	b2db      	uxtb	r3, r3
 8007844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007848:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007850:	2b03      	cmp	r3, #3
 8007852:	d104      	bne.n	800785e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f98b 	bl	8007b72 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800785c:	e01d      	b.n	800789a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	7bfa      	ldrb	r2, [r7, #15]
 8007862:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007866:	7bfb      	ldrb	r3, [r7, #15]
 8007868:	4619      	mov	r1, r3
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fd5a 	bl	8008324 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fa28 	bl	8007cc6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007876:	7bfb      	ldrb	r3, [r7, #15]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d004      	beq.n	8007886 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2202      	movs	r2, #2
 8007880:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007884:	e009      	b.n	800789a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800788e:	e004      	b.n	800789a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f96d 	bl	8007b72 <USBD_CtlError>
  }
}
 8007898:	bf00      	nop
 800789a:	bf00      	nop
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
	...

080078a4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	885b      	ldrh	r3, [r3, #2]
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	4b41      	ldr	r3, [pc, #260]	; (80079bc <USBD_SetConfig+0x118>)
 80078b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80078b8:	4b40      	ldr	r3, [pc, #256]	; (80079bc <USBD_SetConfig+0x118>)
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d904      	bls.n	80078ca <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f955 	bl	8007b72 <USBD_CtlError>
 80078c8:	e075      	b.n	80079b6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d002      	beq.n	80078da <USBD_SetConfig+0x36>
 80078d4:	2b03      	cmp	r3, #3
 80078d6:	d023      	beq.n	8007920 <USBD_SetConfig+0x7c>
 80078d8:	e062      	b.n	80079a0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80078da:	4b38      	ldr	r3, [pc, #224]	; (80079bc <USBD_SetConfig+0x118>)
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d01a      	beq.n	8007918 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80078e2:	4b36      	ldr	r3, [pc, #216]	; (80079bc <USBD_SetConfig+0x118>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2203      	movs	r2, #3
 80078f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80078f4:	4b31      	ldr	r3, [pc, #196]	; (80079bc <USBD_SetConfig+0x118>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	4619      	mov	r1, r3
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7ff f9e8 	bl	8006cd0 <USBD_SetClassConfig>
 8007900:	4603      	mov	r3, r0
 8007902:	2b02      	cmp	r3, #2
 8007904:	d104      	bne.n	8007910 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f932 	bl	8007b72 <USBD_CtlError>
            return;
 800790e:	e052      	b.n	80079b6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f9d8 	bl	8007cc6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007916:	e04e      	b.n	80079b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f9d4 	bl	8007cc6 <USBD_CtlSendStatus>
        break;
 800791e:	e04a      	b.n	80079b6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007920:	4b26      	ldr	r3, [pc, #152]	; (80079bc <USBD_SetConfig+0x118>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d112      	bne.n	800794e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007930:	4b22      	ldr	r3, [pc, #136]	; (80079bc <USBD_SetConfig+0x118>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	461a      	mov	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800793a:	4b20      	ldr	r3, [pc, #128]	; (80079bc <USBD_SetConfig+0x118>)
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7ff f9e4 	bl	8006d0e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f9bd 	bl	8007cc6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800794c:	e033      	b.n	80079b6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800794e:	4b1b      	ldr	r3, [pc, #108]	; (80079bc <USBD_SetConfig+0x118>)
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	429a      	cmp	r2, r3
 800795a:	d01d      	beq.n	8007998 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	b2db      	uxtb	r3, r3
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7ff f9d2 	bl	8006d0e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800796a:	4b14      	ldr	r3, [pc, #80]	; (80079bc <USBD_SetConfig+0x118>)
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007974:	4b11      	ldr	r3, [pc, #68]	; (80079bc <USBD_SetConfig+0x118>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7ff f9a8 	bl	8006cd0 <USBD_SetClassConfig>
 8007980:	4603      	mov	r3, r0
 8007982:	2b02      	cmp	r3, #2
 8007984:	d104      	bne.n	8007990 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f8f2 	bl	8007b72 <USBD_CtlError>
            return;
 800798e:	e012      	b.n	80079b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f998 	bl	8007cc6 <USBD_CtlSendStatus>
        break;
 8007996:	e00e      	b.n	80079b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f994 	bl	8007cc6 <USBD_CtlSendStatus>
        break;
 800799e:	e00a      	b.n	80079b6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f8e5 	bl	8007b72 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80079a8:	4b04      	ldr	r3, [pc, #16]	; (80079bc <USBD_SetConfig+0x118>)
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7ff f9ad 	bl	8006d0e <USBD_ClrClassConfig>
        break;
 80079b4:	bf00      	nop
    }
  }
}
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	200002a0 	.word	0x200002a0

080079c0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	88db      	ldrh	r3, [r3, #6]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d004      	beq.n	80079dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f8cc 	bl	8007b72 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80079da:	e022      	b.n	8007a22 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	dc02      	bgt.n	80079ec <USBD_GetConfig+0x2c>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	dc03      	bgt.n	80079f2 <USBD_GetConfig+0x32>
 80079ea:	e015      	b.n	8007a18 <USBD_GetConfig+0x58>
 80079ec:	2b03      	cmp	r3, #3
 80079ee:	d00b      	beq.n	8007a08 <USBD_GetConfig+0x48>
 80079f0:	e012      	b.n	8007a18 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	3308      	adds	r3, #8
 80079fc:	2201      	movs	r2, #1
 80079fe:	4619      	mov	r1, r3
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f920 	bl	8007c46 <USBD_CtlSendData>
        break;
 8007a06:	e00c      	b.n	8007a22 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f918 	bl	8007c46 <USBD_CtlSendData>
        break;
 8007a16:	e004      	b.n	8007a22 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f8a9 	bl	8007b72 <USBD_CtlError>
        break;
 8007a20:	bf00      	nop
}
 8007a22:	bf00      	nop
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b082      	sub	sp, #8
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d81e      	bhi.n	8007a7e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	88db      	ldrh	r3, [r3, #6]
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d004      	beq.n	8007a52 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f891 	bl	8007b72 <USBD_CtlError>
        break;
 8007a50:	e01a      	b.n	8007a88 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d005      	beq.n	8007a6e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	f043 0202 	orr.w	r2, r3, #2
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	330c      	adds	r3, #12
 8007a72:	2202      	movs	r2, #2
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f8e5 	bl	8007c46 <USBD_CtlSendData>
      break;
 8007a7c:	e004      	b.n	8007a88 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 f876 	bl	8007b72 <USBD_CtlError>
      break;
 8007a86:	bf00      	nop
  }
}
 8007a88:	bf00      	nop
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	885b      	ldrh	r3, [r3, #2]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d106      	bne.n	8007ab0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f90b 	bl	8007cc6 <USBD_CtlSendStatus>
  }
}
 8007ab0:	bf00      	nop
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d80b      	bhi.n	8007ae6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	885b      	ldrh	r3, [r3, #2]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d10c      	bne.n	8007af0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f8f1 	bl	8007cc6 <USBD_CtlSendStatus>
      }
      break;
 8007ae4:	e004      	b.n	8007af0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f842 	bl	8007b72 <USBD_CtlError>
      break;
 8007aee:	e000      	b.n	8007af2 <USBD_ClrFeature+0x3a>
      break;
 8007af0:	bf00      	nop
  }
}
 8007af2:	bf00      	nop
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b083      	sub	sp, #12
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	781a      	ldrb	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	785a      	ldrb	r2, [r3, #1]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	3302      	adds	r3, #2
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	3303      	adds	r3, #3
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	021b      	lsls	r3, r3, #8
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	4413      	add	r3, r2
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	3304      	adds	r3, #4
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	3305      	adds	r3, #5
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	021b      	lsls	r3, r3, #8
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	4413      	add	r3, r2
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	3306      	adds	r3, #6
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	3307      	adds	r3, #7
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	021b      	lsls	r3, r3, #8
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	4413      	add	r3, r2
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	80da      	strh	r2, [r3, #6]

}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bc80      	pop	{r7}
 8007b70:	4770      	bx	lr

08007b72 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b082      	sub	sp, #8
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007b7c:	2180      	movs	r1, #128	; 0x80
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fb66 	bl	8008250 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007b84:	2100      	movs	r1, #0
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fb62 	bl	8008250 <USBD_LL_StallEP>
}
 8007b8c:	bf00      	nop
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d032      	beq.n	8007c10 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 f834 	bl	8007c18 <USBD_GetLen>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	005b      	lsls	r3, r3, #1
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007bbe:	7dfb      	ldrb	r3, [r7, #23]
 8007bc0:	1c5a      	adds	r2, r3, #1
 8007bc2:	75fa      	strb	r2, [r7, #23]
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	4413      	add	r3, r2
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	7812      	ldrb	r2, [r2, #0]
 8007bce:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007bd0:	7dfb      	ldrb	r3, [r7, #23]
 8007bd2:	1c5a      	adds	r2, r3, #1
 8007bd4:	75fa      	strb	r2, [r7, #23]
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	4413      	add	r3, r2
 8007bdc:	2203      	movs	r2, #3
 8007bde:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007be0:	e012      	b.n	8007c08 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	60fa      	str	r2, [r7, #12]
 8007be8:	7dfa      	ldrb	r2, [r7, #23]
 8007bea:	1c51      	adds	r1, r2, #1
 8007bec:	75f9      	strb	r1, [r7, #23]
 8007bee:	4611      	mov	r1, r2
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	440a      	add	r2, r1
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007bf8:	7dfb      	ldrb	r3, [r7, #23]
 8007bfa:	1c5a      	adds	r2, r3, #1
 8007bfc:	75fa      	strb	r2, [r7, #23]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	4413      	add	r3, r2
 8007c04:	2200      	movs	r2, #0
 8007c06:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1e8      	bne.n	8007be2 <USBD_GetString+0x4e>
    }
  }
}
 8007c10:	bf00      	nop
 8007c12:	3718      	adds	r7, #24
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c20:	2300      	movs	r3, #0
 8007c22:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007c24:	e005      	b.n	8007c32 <USBD_GetLen+0x1a>
  {
    len++;
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1f5      	bne.n	8007c26 <USBD_GetLen+0xe>
  }

  return len;
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3714      	adds	r7, #20
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bc80      	pop	{r7}
 8007c44:	4770      	bx	lr

08007c46 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b084      	sub	sp, #16
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	60f8      	str	r0, [r7, #12]
 8007c4e:	60b9      	str	r1, [r7, #8]
 8007c50:	4613      	mov	r3, r2
 8007c52:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2202      	movs	r2, #2
 8007c58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007c5c:	88fa      	ldrh	r2, [r7, #6]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007c62:	88fa      	ldrh	r2, [r7, #6]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c68:	88fb      	ldrh	r3, [r7, #6]
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f000 fb77 	bl	8008362 <USBD_LL_Transmit>

  return USBD_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b084      	sub	sp, #16
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	60f8      	str	r0, [r7, #12]
 8007c86:	60b9      	str	r1, [r7, #8]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c8c:	88fb      	ldrh	r3, [r7, #6]
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	2100      	movs	r1, #0
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 fb65 	bl	8008362 <USBD_LL_Transmit>

  return USBD_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	60f8      	str	r0, [r7, #12]
 8007caa:	60b9      	str	r1, [r7, #8]
 8007cac:	4613      	mov	r3, r2
 8007cae:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cb0:	88fb      	ldrh	r3, [r7, #6]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 fb76 	bl	80083a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2204      	movs	r2, #4
 8007cd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	2200      	movs	r2, #0
 8007cda:	2100      	movs	r1, #0
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fb40 	bl	8008362 <USBD_LL_Transmit>

  return USBD_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2205      	movs	r2, #5
 8007cf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	2200      	movs	r2, #0
 8007d00:	2100      	movs	r1, #0
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fb50 	bl	80083a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
	...

08007d14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d18:	2200      	movs	r2, #0
 8007d1a:	490e      	ldr	r1, [pc, #56]	; (8007d54 <MX_USB_DEVICE_Init+0x40>)
 8007d1c:	480e      	ldr	r0, [pc, #56]	; (8007d58 <MX_USB_DEVICE_Init+0x44>)
 8007d1e:	f7fe ff7d 	bl	8006c1c <USBD_Init>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d28:	f7f8 fba0 	bl	800046c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007d2c:	490b      	ldr	r1, [pc, #44]	; (8007d5c <MX_USB_DEVICE_Init+0x48>)
 8007d2e:	480a      	ldr	r0, [pc, #40]	; (8007d58 <MX_USB_DEVICE_Init+0x44>)
 8007d30:	f7fe ff9f 	bl	8006c72 <USBD_RegisterClass>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d3a:	f7f8 fb97 	bl	800046c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d3e:	4806      	ldr	r0, [pc, #24]	; (8007d58 <MX_USB_DEVICE_Init+0x44>)
 8007d40:	f7fe ffb0 	bl	8006ca4 <USBD_Start>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007d4a:	f7f8 fb8f 	bl	800046c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d4e:	bf00      	nop
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	20000108 	.word	0x20000108
 8007d58:	200002a4 	.word	0x200002a4
 8007d5c:	2000000c 	.word	0x2000000c

08007d60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	4603      	mov	r3, r0
 8007d68:	6039      	str	r1, [r7, #0]
 8007d6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2212      	movs	r2, #18
 8007d70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007d72:	4b03      	ldr	r3, [pc, #12]	; (8007d80 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bc80      	pop	{r7}
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	20000124 	.word	0x20000124

08007d84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	6039      	str	r1, [r7, #0]
 8007d8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	2204      	movs	r2, #4
 8007d94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d96:	4b03      	ldr	r3, [pc, #12]	; (8007da4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bc80      	pop	{r7}
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	20000138 	.word	0x20000138

08007da8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	4603      	mov	r3, r0
 8007db0:	6039      	str	r1, [r7, #0]
 8007db2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007db4:	79fb      	ldrb	r3, [r7, #7]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d105      	bne.n	8007dc6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	4907      	ldr	r1, [pc, #28]	; (8007ddc <USBD_FS_ProductStrDescriptor+0x34>)
 8007dbe:	4808      	ldr	r0, [pc, #32]	; (8007de0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007dc0:	f7ff fee8 	bl	8007b94 <USBD_GetString>
 8007dc4:	e004      	b.n	8007dd0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	4904      	ldr	r1, [pc, #16]	; (8007ddc <USBD_FS_ProductStrDescriptor+0x34>)
 8007dca:	4805      	ldr	r0, [pc, #20]	; (8007de0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007dcc:	f7ff fee2 	bl	8007b94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007dd0:	4b02      	ldr	r3, [pc, #8]	; (8007ddc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	20000568 	.word	0x20000568
 8007de0:	08009334 	.word	0x08009334

08007de4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	4603      	mov	r3, r0
 8007dec:	6039      	str	r1, [r7, #0]
 8007dee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007df0:	683a      	ldr	r2, [r7, #0]
 8007df2:	4904      	ldr	r1, [pc, #16]	; (8007e04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007df4:	4804      	ldr	r0, [pc, #16]	; (8007e08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007df6:	f7ff fecd 	bl	8007b94 <USBD_GetString>
  return USBD_StrDesc;
 8007dfa:	4b02      	ldr	r3, [pc, #8]	; (8007e04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	20000568 	.word	0x20000568
 8007e08:	0800934c 	.word	0x0800934c

08007e0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	4603      	mov	r3, r0
 8007e14:	6039      	str	r1, [r7, #0]
 8007e16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	221a      	movs	r2, #26
 8007e1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007e1e:	f000 f843 	bl	8007ea8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007e22:	4b02      	ldr	r3, [pc, #8]	; (8007e2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	2000013c 	.word	0x2000013c

08007e30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	4603      	mov	r3, r0
 8007e38:	6039      	str	r1, [r7, #0]
 8007e3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007e3c:	79fb      	ldrb	r3, [r7, #7]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d105      	bne.n	8007e4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e42:	683a      	ldr	r2, [r7, #0]
 8007e44:	4907      	ldr	r1, [pc, #28]	; (8007e64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e46:	4808      	ldr	r0, [pc, #32]	; (8007e68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e48:	f7ff fea4 	bl	8007b94 <USBD_GetString>
 8007e4c:	e004      	b.n	8007e58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	4904      	ldr	r1, [pc, #16]	; (8007e64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e52:	4805      	ldr	r0, [pc, #20]	; (8007e68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e54:	f7ff fe9e 	bl	8007b94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e58:	4b02      	ldr	r3, [pc, #8]	; (8007e64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	20000568 	.word	0x20000568
 8007e68:	08009360 	.word	0x08009360

08007e6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	4603      	mov	r3, r0
 8007e74:	6039      	str	r1, [r7, #0]
 8007e76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e78:	79fb      	ldrb	r3, [r7, #7]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d105      	bne.n	8007e8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e7e:	683a      	ldr	r2, [r7, #0]
 8007e80:	4907      	ldr	r1, [pc, #28]	; (8007ea0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e82:	4808      	ldr	r0, [pc, #32]	; (8007ea4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e84:	f7ff fe86 	bl	8007b94 <USBD_GetString>
 8007e88:	e004      	b.n	8007e94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e8a:	683a      	ldr	r2, [r7, #0]
 8007e8c:	4904      	ldr	r1, [pc, #16]	; (8007ea0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e8e:	4805      	ldr	r0, [pc, #20]	; (8007ea4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e90:	f7ff fe80 	bl	8007b94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e94:	4b02      	ldr	r3, [pc, #8]	; (8007ea0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	20000568 	.word	0x20000568
 8007ea4:	0800936c 	.word	0x0800936c

08007ea8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007eae:	4b0f      	ldr	r3, [pc, #60]	; (8007eec <Get_SerialNum+0x44>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007eb4:	4b0e      	ldr	r3, [pc, #56]	; (8007ef0 <Get_SerialNum+0x48>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007eba:	4b0e      	ldr	r3, [pc, #56]	; (8007ef4 <Get_SerialNum+0x4c>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d009      	beq.n	8007ee2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007ece:	2208      	movs	r2, #8
 8007ed0:	4909      	ldr	r1, [pc, #36]	; (8007ef8 <Get_SerialNum+0x50>)
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f000 f814 	bl	8007f00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ed8:	2204      	movs	r2, #4
 8007eda:	4908      	ldr	r1, [pc, #32]	; (8007efc <Get_SerialNum+0x54>)
 8007edc:	68b8      	ldr	r0, [r7, #8]
 8007ede:	f000 f80f 	bl	8007f00 <IntToUnicode>
  }
}
 8007ee2:	bf00      	nop
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	1ffff7e8 	.word	0x1ffff7e8
 8007ef0:	1ffff7ec 	.word	0x1ffff7ec
 8007ef4:	1ffff7f0 	.word	0x1ffff7f0
 8007ef8:	2000013e 	.word	0x2000013e
 8007efc:	2000014e 	.word	0x2000014e

08007f00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b087      	sub	sp, #28
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007f12:	2300      	movs	r3, #0
 8007f14:	75fb      	strb	r3, [r7, #23]
 8007f16:	e027      	b.n	8007f68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	0f1b      	lsrs	r3, r3, #28
 8007f1c:	2b09      	cmp	r3, #9
 8007f1e:	d80b      	bhi.n	8007f38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	0f1b      	lsrs	r3, r3, #28
 8007f24:	b2da      	uxtb	r2, r3
 8007f26:	7dfb      	ldrb	r3, [r7, #23]
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	440b      	add	r3, r1
 8007f30:	3230      	adds	r2, #48	; 0x30
 8007f32:	b2d2      	uxtb	r2, r2
 8007f34:	701a      	strb	r2, [r3, #0]
 8007f36:	e00a      	b.n	8007f4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	0f1b      	lsrs	r3, r3, #28
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	7dfb      	ldrb	r3, [r7, #23]
 8007f40:	005b      	lsls	r3, r3, #1
 8007f42:	4619      	mov	r1, r3
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	440b      	add	r3, r1
 8007f48:	3237      	adds	r2, #55	; 0x37
 8007f4a:	b2d2      	uxtb	r2, r2
 8007f4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	011b      	lsls	r3, r3, #4
 8007f52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007f54:	7dfb      	ldrb	r3, [r7, #23]
 8007f56:	005b      	lsls	r3, r3, #1
 8007f58:	3301      	adds	r3, #1
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	2200      	movs	r2, #0
 8007f60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f62:	7dfb      	ldrb	r3, [r7, #23]
 8007f64:	3301      	adds	r3, #1
 8007f66:	75fb      	strb	r3, [r7, #23]
 8007f68:	7dfa      	ldrb	r2, [r7, #23]
 8007f6a:	79fb      	ldrb	r3, [r7, #7]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d3d3      	bcc.n	8007f18 <IntToUnicode+0x18>
  }
}
 8007f70:	bf00      	nop
 8007f72:	bf00      	nop
 8007f74:	371c      	adds	r7, #28
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bc80      	pop	{r7}
 8007f7a:	4770      	bx	lr

08007f7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a0d      	ldr	r2, [pc, #52]	; (8007fc0 <HAL_PCD_MspInit+0x44>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d113      	bne.n	8007fb6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007f8e:	4b0d      	ldr	r3, [pc, #52]	; (8007fc4 <HAL_PCD_MspInit+0x48>)
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	4a0c      	ldr	r2, [pc, #48]	; (8007fc4 <HAL_PCD_MspInit+0x48>)
 8007f94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007f98:	61d3      	str	r3, [r2, #28]
 8007f9a:	4b0a      	ldr	r3, [pc, #40]	; (8007fc4 <HAL_PCD_MspInit+0x48>)
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fa2:	60fb      	str	r3, [r7, #12]
 8007fa4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	2100      	movs	r1, #0
 8007faa:	2014      	movs	r0, #20
 8007fac:	f7f8 fddd 	bl	8000b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007fb0:	2014      	movs	r0, #20
 8007fb2:	f7f8 fdf6 	bl	8000ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007fb6:	bf00      	nop
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	40005c00 	.word	0x40005c00
 8007fc4:	40021000 	.word	0x40021000

08007fc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4610      	mov	r0, r2
 8007fe0:	f7fe fea8 	bl	8006d34 <USBD_LL_SetupStage>
}
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8007ffe:	78fa      	ldrb	r2, [r7, #3]
 8008000:	6879      	ldr	r1, [r7, #4]
 8008002:	4613      	mov	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4413      	add	r3, r2
 8008008:	00db      	lsls	r3, r3, #3
 800800a:	440b      	add	r3, r1
 800800c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	78fb      	ldrb	r3, [r7, #3]
 8008014:	4619      	mov	r1, r3
 8008016:	f7fe feda 	bl	8006dce <USBD_LL_DataOutStage>
}
 800801a:	bf00      	nop
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b082      	sub	sp, #8
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	460b      	mov	r3, r1
 800802c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008034:	78fa      	ldrb	r2, [r7, #3]
 8008036:	6879      	ldr	r1, [r7, #4]
 8008038:	4613      	mov	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	00db      	lsls	r3, r3, #3
 8008040:	440b      	add	r3, r1
 8008042:	333c      	adds	r3, #60	; 0x3c
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	78fb      	ldrb	r3, [r7, #3]
 8008048:	4619      	mov	r1, r3
 800804a:	f7fe ff31 	bl	8006eb0 <USBD_LL_DataInStage>
}
 800804e:	bf00      	nop
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b082      	sub	sp, #8
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008064:	4618      	mov	r0, r3
 8008066:	f7ff f841 	bl	80070ec <USBD_LL_SOF>
}
 800806a:	bf00      	nop
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b084      	sub	sp, #16
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800807a:	2301      	movs	r3, #1
 800807c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	2b02      	cmp	r3, #2
 8008084:	d001      	beq.n	800808a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008086:	f7f8 f9f1 	bl	800046c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008090:	7bfa      	ldrb	r2, [r7, #15]
 8008092:	4611      	mov	r1, r2
 8008094:	4618      	mov	r0, r3
 8008096:	f7fe fff1 	bl	800707c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7fe ffaa 	bl	8006ffa <USBD_LL_Reset>
}
 80080a6:	bf00      	nop
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
	...

080080b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fe ffeb 	bl	800709a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d005      	beq.n	80080d8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80080cc:	4b04      	ldr	r3, [pc, #16]	; (80080e0 <HAL_PCD_SuspendCallback+0x30>)
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	4a03      	ldr	r2, [pc, #12]	; (80080e0 <HAL_PCD_SuspendCallback+0x30>)
 80080d2:	f043 0306 	orr.w	r3, r3, #6
 80080d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80080d8:	bf00      	nop
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	e000ed00 	.word	0xe000ed00

080080e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fe ffe5 	bl	80070c2 <USBD_LL_Resume>
}
 80080f8:	bf00      	nop
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008108:	4a1f      	ldr	r2, [pc, #124]	; (8008188 <USBD_LL_Init+0x88>)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a1d      	ldr	r2, [pc, #116]	; (8008188 <USBD_LL_Init+0x88>)
 8008114:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008118:	4b1b      	ldr	r3, [pc, #108]	; (8008188 <USBD_LL_Init+0x88>)
 800811a:	4a1c      	ldr	r2, [pc, #112]	; (800818c <USBD_LL_Init+0x8c>)
 800811c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800811e:	4b1a      	ldr	r3, [pc, #104]	; (8008188 <USBD_LL_Init+0x88>)
 8008120:	2208      	movs	r2, #8
 8008122:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008124:	4b18      	ldr	r3, [pc, #96]	; (8008188 <USBD_LL_Init+0x88>)
 8008126:	2202      	movs	r2, #2
 8008128:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800812a:	4b17      	ldr	r3, [pc, #92]	; (8008188 <USBD_LL_Init+0x88>)
 800812c:	2200      	movs	r2, #0
 800812e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008130:	4b15      	ldr	r3, [pc, #84]	; (8008188 <USBD_LL_Init+0x88>)
 8008132:	2200      	movs	r2, #0
 8008134:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008136:	4b14      	ldr	r3, [pc, #80]	; (8008188 <USBD_LL_Init+0x88>)
 8008138:	2200      	movs	r2, #0
 800813a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800813c:	4812      	ldr	r0, [pc, #72]	; (8008188 <USBD_LL_Init+0x88>)
 800813e:	f7f8 ff81 	bl	8001044 <HAL_PCD_Init>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008148:	f7f8 f990 	bl	800046c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008152:	2318      	movs	r3, #24
 8008154:	2200      	movs	r2, #0
 8008156:	2100      	movs	r1, #0
 8008158:	f7fa fc89 	bl	8002a6e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008162:	2358      	movs	r3, #88	; 0x58
 8008164:	2200      	movs	r2, #0
 8008166:	2180      	movs	r1, #128	; 0x80
 8008168:	f7fa fc81 	bl	8002a6e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008172:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008176:	2200      	movs	r2, #0
 8008178:	2181      	movs	r1, #129	; 0x81
 800817a:	f7fa fc78 	bl	8002a6e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	20000768 	.word	0x20000768
 800818c:	40005c00 	.word	0x40005c00

08008190 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008198:	2300      	movs	r3, #0
 800819a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800819c:	2300      	movs	r3, #0
 800819e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7f9 f84b 	bl	8001242 <HAL_PCD_Start>
 80081ac:	4603      	mov	r3, r0
 80081ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 f93c 	bl	8008430 <USBD_Get_USB_Status>
 80081b8:	4603      	mov	r3, r0
 80081ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b084      	sub	sp, #16
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	4608      	mov	r0, r1
 80081d0:	4611      	mov	r1, r2
 80081d2:	461a      	mov	r2, r3
 80081d4:	4603      	mov	r3, r0
 80081d6:	70fb      	strb	r3, [r7, #3]
 80081d8:	460b      	mov	r3, r1
 80081da:	70bb      	strb	r3, [r7, #2]
 80081dc:	4613      	mov	r3, r2
 80081de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80081ee:	78bb      	ldrb	r3, [r7, #2]
 80081f0:	883a      	ldrh	r2, [r7, #0]
 80081f2:	78f9      	ldrb	r1, [r7, #3]
 80081f4:	f7f9 f9a0 	bl	8001538 <HAL_PCD_EP_Open>
 80081f8:	4603      	mov	r3, r0
 80081fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 f916 	bl	8008430 <USBD_Get_USB_Status>
 8008204:	4603      	mov	r3, r0
 8008206:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008208:	7bbb      	ldrb	r3, [r7, #14]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	460b      	mov	r3, r1
 800821c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800822c:	78fa      	ldrb	r2, [r7, #3]
 800822e:	4611      	mov	r1, r2
 8008230:	4618      	mov	r0, r3
 8008232:	f7f9 f9de 	bl	80015f2 <HAL_PCD_EP_Close>
 8008236:	4603      	mov	r3, r0
 8008238:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800823a:	7bfb      	ldrb	r3, [r7, #15]
 800823c:	4618      	mov	r0, r3
 800823e:	f000 f8f7 	bl	8008430 <USBD_Get_USB_Status>
 8008242:	4603      	mov	r3, r0
 8008244:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008246:	7bbb      	ldrb	r3, [r7, #14]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	460b      	mov	r3, r1
 800825a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008260:	2300      	movs	r3, #0
 8008262:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800826a:	78fa      	ldrb	r2, [r7, #3]
 800826c:	4611      	mov	r1, r2
 800826e:	4618      	mov	r0, r3
 8008270:	f7f9 fa6f 	bl	8001752 <HAL_PCD_EP_SetStall>
 8008274:	4603      	mov	r3, r0
 8008276:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008278:	7bfb      	ldrb	r3, [r7, #15]
 800827a:	4618      	mov	r0, r3
 800827c:	f000 f8d8 	bl	8008430 <USBD_Get_USB_Status>
 8008280:	4603      	mov	r3, r0
 8008282:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008284:	7bbb      	ldrb	r3, [r7, #14]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b084      	sub	sp, #16
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
 8008296:	460b      	mov	r3, r1
 8008298:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082a8:	78fa      	ldrb	r2, [r7, #3]
 80082aa:	4611      	mov	r1, r2
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7f9 fab0 	bl	8001812 <HAL_PCD_EP_ClrStall>
 80082b2:	4603      	mov	r3, r0
 80082b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082b6:	7bfb      	ldrb	r3, [r7, #15]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f000 f8b9 	bl	8008430 <USBD_Get_USB_Status>
 80082be:	4603      	mov	r3, r0
 80082c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	460b      	mov	r3, r1
 80082d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80082e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	da0c      	bge.n	8008302 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80082e8:	78fb      	ldrb	r3, [r7, #3]
 80082ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082ee:	68f9      	ldr	r1, [r7, #12]
 80082f0:	1c5a      	adds	r2, r3, #1
 80082f2:	4613      	mov	r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	4413      	add	r3, r2
 80082f8:	00db      	lsls	r3, r3, #3
 80082fa:	440b      	add	r3, r1
 80082fc:	3302      	adds	r3, #2
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	e00b      	b.n	800831a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008302:	78fb      	ldrb	r3, [r7, #3]
 8008304:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008308:	68f9      	ldr	r1, [r7, #12]
 800830a:	4613      	mov	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4413      	add	r3, r2
 8008310:	00db      	lsls	r3, r3, #3
 8008312:	440b      	add	r3, r1
 8008314:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008318:	781b      	ldrb	r3, [r3, #0]
  }
}
 800831a:	4618      	mov	r0, r3
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	bc80      	pop	{r7}
 8008322:	4770      	bx	lr

08008324 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	460b      	mov	r3, r1
 800832e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008330:	2300      	movs	r3, #0
 8008332:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008334:	2300      	movs	r3, #0
 8008336:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800833e:	78fa      	ldrb	r2, [r7, #3]
 8008340:	4611      	mov	r1, r2
 8008342:	4618      	mov	r0, r3
 8008344:	f7f9 f8d3 	bl	80014ee <HAL_PCD_SetAddress>
 8008348:	4603      	mov	r3, r0
 800834a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800834c:	7bfb      	ldrb	r3, [r7, #15]
 800834e:	4618      	mov	r0, r3
 8008350:	f000 f86e 	bl	8008430 <USBD_Get_USB_Status>
 8008354:	4603      	mov	r3, r0
 8008356:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008358:	7bbb      	ldrb	r3, [r7, #14]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b086      	sub	sp, #24
 8008366:	af00      	add	r7, sp, #0
 8008368:	60f8      	str	r0, [r7, #12]
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	461a      	mov	r2, r3
 800836e:	460b      	mov	r3, r1
 8008370:	72fb      	strb	r3, [r7, #11]
 8008372:	4613      	mov	r3, r2
 8008374:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800837a:	2300      	movs	r3, #0
 800837c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008384:	893b      	ldrh	r3, [r7, #8]
 8008386:	7af9      	ldrb	r1, [r7, #11]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	f7f9 f9ab 	bl	80016e4 <HAL_PCD_EP_Transmit>
 800838e:	4603      	mov	r3, r0
 8008390:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008392:	7dfb      	ldrb	r3, [r7, #23]
 8008394:	4618      	mov	r0, r3
 8008396:	f000 f84b 	bl	8008430 <USBD_Get_USB_Status>
 800839a:	4603      	mov	r3, r0
 800839c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800839e:	7dbb      	ldrb	r3, [r7, #22]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3718      	adds	r7, #24
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b086      	sub	sp, #24
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	607a      	str	r2, [r7, #4]
 80083b2:	461a      	mov	r2, r3
 80083b4:	460b      	mov	r3, r1
 80083b6:	72fb      	strb	r3, [r7, #11]
 80083b8:	4613      	mov	r3, r2
 80083ba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083ca:	893b      	ldrh	r3, [r7, #8]
 80083cc:	7af9      	ldrb	r1, [r7, #11]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	f7f9 f957 	bl	8001682 <HAL_PCD_EP_Receive>
 80083d4:	4603      	mov	r3, r0
 80083d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083d8:	7dfb      	ldrb	r3, [r7, #23]
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 f828 	bl	8008430 <USBD_Get_USB_Status>
 80083e0:	4603      	mov	r3, r0
 80083e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80083e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3718      	adds	r7, #24
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
	...

080083f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80083f8:	4b02      	ldr	r3, [pc, #8]	; (8008404 <USBD_static_malloc+0x14>)
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	bc80      	pop	{r7}
 8008402:	4770      	bx	lr
 8008404:	20000a58 	.word	0x20000a58

08008408 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]

}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	bc80      	pop	{r7}
 8008418:	4770      	bx	lr

0800841a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800841a:	b480      	push	{r7}
 800841c:	b083      	sub	sp, #12
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	460b      	mov	r3, r1
 8008424:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008426:	bf00      	nop
 8008428:	370c      	adds	r7, #12
 800842a:	46bd      	mov	sp, r7
 800842c:	bc80      	pop	{r7}
 800842e:	4770      	bx	lr

08008430 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	4603      	mov	r3, r0
 8008438:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800843e:	79fb      	ldrb	r3, [r7, #7]
 8008440:	2b03      	cmp	r3, #3
 8008442:	d817      	bhi.n	8008474 <USBD_Get_USB_Status+0x44>
 8008444:	a201      	add	r2, pc, #4	; (adr r2, 800844c <USBD_Get_USB_Status+0x1c>)
 8008446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844a:	bf00      	nop
 800844c:	0800845d 	.word	0x0800845d
 8008450:	08008463 	.word	0x08008463
 8008454:	08008469 	.word	0x08008469
 8008458:	0800846f 	.word	0x0800846f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800845c:	2300      	movs	r3, #0
 800845e:	73fb      	strb	r3, [r7, #15]
    break;
 8008460:	e00b      	b.n	800847a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008462:	2302      	movs	r3, #2
 8008464:	73fb      	strb	r3, [r7, #15]
    break;
 8008466:	e008      	b.n	800847a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008468:	2301      	movs	r3, #1
 800846a:	73fb      	strb	r3, [r7, #15]
    break;
 800846c:	e005      	b.n	800847a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800846e:	2302      	movs	r3, #2
 8008470:	73fb      	strb	r3, [r7, #15]
    break;
 8008472:	e002      	b.n	800847a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008474:	2302      	movs	r3, #2
 8008476:	73fb      	strb	r3, [r7, #15]
    break;
 8008478:	bf00      	nop
  }
  return usb_status;
 800847a:	7bfb      	ldrb	r3, [r7, #15]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3714      	adds	r7, #20
 8008480:	46bd      	mov	sp, r7
 8008482:	bc80      	pop	{r7}
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop

08008488 <std>:
 8008488:	2300      	movs	r3, #0
 800848a:	b510      	push	{r4, lr}
 800848c:	4604      	mov	r4, r0
 800848e:	e9c0 3300 	strd	r3, r3, [r0]
 8008492:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008496:	6083      	str	r3, [r0, #8]
 8008498:	8181      	strh	r1, [r0, #12]
 800849a:	6643      	str	r3, [r0, #100]	; 0x64
 800849c:	81c2      	strh	r2, [r0, #14]
 800849e:	6183      	str	r3, [r0, #24]
 80084a0:	4619      	mov	r1, r3
 80084a2:	2208      	movs	r2, #8
 80084a4:	305c      	adds	r0, #92	; 0x5c
 80084a6:	f000 f906 	bl	80086b6 <memset>
 80084aa:	4b0d      	ldr	r3, [pc, #52]	; (80084e0 <std+0x58>)
 80084ac:	6224      	str	r4, [r4, #32]
 80084ae:	6263      	str	r3, [r4, #36]	; 0x24
 80084b0:	4b0c      	ldr	r3, [pc, #48]	; (80084e4 <std+0x5c>)
 80084b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80084b4:	4b0c      	ldr	r3, [pc, #48]	; (80084e8 <std+0x60>)
 80084b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084b8:	4b0c      	ldr	r3, [pc, #48]	; (80084ec <std+0x64>)
 80084ba:	6323      	str	r3, [r4, #48]	; 0x30
 80084bc:	4b0c      	ldr	r3, [pc, #48]	; (80084f0 <std+0x68>)
 80084be:	429c      	cmp	r4, r3
 80084c0:	d006      	beq.n	80084d0 <std+0x48>
 80084c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80084c6:	4294      	cmp	r4, r2
 80084c8:	d002      	beq.n	80084d0 <std+0x48>
 80084ca:	33d0      	adds	r3, #208	; 0xd0
 80084cc:	429c      	cmp	r4, r3
 80084ce:	d105      	bne.n	80084dc <std+0x54>
 80084d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80084d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084d8:	f000 b966 	b.w	80087a8 <__retarget_lock_init_recursive>
 80084dc:	bd10      	pop	{r4, pc}
 80084de:	bf00      	nop
 80084e0:	08008631 	.word	0x08008631
 80084e4:	08008653 	.word	0x08008653
 80084e8:	0800868b 	.word	0x0800868b
 80084ec:	080086af 	.word	0x080086af
 80084f0:	20000a6c 	.word	0x20000a6c

080084f4 <stdio_exit_handler>:
 80084f4:	4a02      	ldr	r2, [pc, #8]	; (8008500 <stdio_exit_handler+0xc>)
 80084f6:	4903      	ldr	r1, [pc, #12]	; (8008504 <stdio_exit_handler+0x10>)
 80084f8:	4803      	ldr	r0, [pc, #12]	; (8008508 <stdio_exit_handler+0x14>)
 80084fa:	f000 b869 	b.w	80085d0 <_fwalk_sglue>
 80084fe:	bf00      	nop
 8008500:	20000158 	.word	0x20000158
 8008504:	08009049 	.word	0x08009049
 8008508:	20000164 	.word	0x20000164

0800850c <cleanup_stdio>:
 800850c:	6841      	ldr	r1, [r0, #4]
 800850e:	4b0c      	ldr	r3, [pc, #48]	; (8008540 <cleanup_stdio+0x34>)
 8008510:	b510      	push	{r4, lr}
 8008512:	4299      	cmp	r1, r3
 8008514:	4604      	mov	r4, r0
 8008516:	d001      	beq.n	800851c <cleanup_stdio+0x10>
 8008518:	f000 fd96 	bl	8009048 <_fflush_r>
 800851c:	68a1      	ldr	r1, [r4, #8]
 800851e:	4b09      	ldr	r3, [pc, #36]	; (8008544 <cleanup_stdio+0x38>)
 8008520:	4299      	cmp	r1, r3
 8008522:	d002      	beq.n	800852a <cleanup_stdio+0x1e>
 8008524:	4620      	mov	r0, r4
 8008526:	f000 fd8f 	bl	8009048 <_fflush_r>
 800852a:	68e1      	ldr	r1, [r4, #12]
 800852c:	4b06      	ldr	r3, [pc, #24]	; (8008548 <cleanup_stdio+0x3c>)
 800852e:	4299      	cmp	r1, r3
 8008530:	d004      	beq.n	800853c <cleanup_stdio+0x30>
 8008532:	4620      	mov	r0, r4
 8008534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008538:	f000 bd86 	b.w	8009048 <_fflush_r>
 800853c:	bd10      	pop	{r4, pc}
 800853e:	bf00      	nop
 8008540:	20000a6c 	.word	0x20000a6c
 8008544:	20000ad4 	.word	0x20000ad4
 8008548:	20000b3c 	.word	0x20000b3c

0800854c <global_stdio_init.part.0>:
 800854c:	b510      	push	{r4, lr}
 800854e:	4b0b      	ldr	r3, [pc, #44]	; (800857c <global_stdio_init.part.0+0x30>)
 8008550:	4c0b      	ldr	r4, [pc, #44]	; (8008580 <global_stdio_init.part.0+0x34>)
 8008552:	4a0c      	ldr	r2, [pc, #48]	; (8008584 <global_stdio_init.part.0+0x38>)
 8008554:	4620      	mov	r0, r4
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	2104      	movs	r1, #4
 800855a:	2200      	movs	r2, #0
 800855c:	f7ff ff94 	bl	8008488 <std>
 8008560:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008564:	2201      	movs	r2, #1
 8008566:	2109      	movs	r1, #9
 8008568:	f7ff ff8e 	bl	8008488 <std>
 800856c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008570:	2202      	movs	r2, #2
 8008572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008576:	2112      	movs	r1, #18
 8008578:	f7ff bf86 	b.w	8008488 <std>
 800857c:	20000ba4 	.word	0x20000ba4
 8008580:	20000a6c 	.word	0x20000a6c
 8008584:	080084f5 	.word	0x080084f5

08008588 <__sfp_lock_acquire>:
 8008588:	4801      	ldr	r0, [pc, #4]	; (8008590 <__sfp_lock_acquire+0x8>)
 800858a:	f000 b90e 	b.w	80087aa <__retarget_lock_acquire_recursive>
 800858e:	bf00      	nop
 8008590:	20000bad 	.word	0x20000bad

08008594 <__sfp_lock_release>:
 8008594:	4801      	ldr	r0, [pc, #4]	; (800859c <__sfp_lock_release+0x8>)
 8008596:	f000 b909 	b.w	80087ac <__retarget_lock_release_recursive>
 800859a:	bf00      	nop
 800859c:	20000bad 	.word	0x20000bad

080085a0 <__sinit>:
 80085a0:	b510      	push	{r4, lr}
 80085a2:	4604      	mov	r4, r0
 80085a4:	f7ff fff0 	bl	8008588 <__sfp_lock_acquire>
 80085a8:	6a23      	ldr	r3, [r4, #32]
 80085aa:	b11b      	cbz	r3, 80085b4 <__sinit+0x14>
 80085ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085b0:	f7ff bff0 	b.w	8008594 <__sfp_lock_release>
 80085b4:	4b04      	ldr	r3, [pc, #16]	; (80085c8 <__sinit+0x28>)
 80085b6:	6223      	str	r3, [r4, #32]
 80085b8:	4b04      	ldr	r3, [pc, #16]	; (80085cc <__sinit+0x2c>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1f5      	bne.n	80085ac <__sinit+0xc>
 80085c0:	f7ff ffc4 	bl	800854c <global_stdio_init.part.0>
 80085c4:	e7f2      	b.n	80085ac <__sinit+0xc>
 80085c6:	bf00      	nop
 80085c8:	0800850d 	.word	0x0800850d
 80085cc:	20000ba4 	.word	0x20000ba4

080085d0 <_fwalk_sglue>:
 80085d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085d4:	4607      	mov	r7, r0
 80085d6:	4688      	mov	r8, r1
 80085d8:	4614      	mov	r4, r2
 80085da:	2600      	movs	r6, #0
 80085dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085e0:	f1b9 0901 	subs.w	r9, r9, #1
 80085e4:	d505      	bpl.n	80085f2 <_fwalk_sglue+0x22>
 80085e6:	6824      	ldr	r4, [r4, #0]
 80085e8:	2c00      	cmp	r4, #0
 80085ea:	d1f7      	bne.n	80085dc <_fwalk_sglue+0xc>
 80085ec:	4630      	mov	r0, r6
 80085ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085f2:	89ab      	ldrh	r3, [r5, #12]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d907      	bls.n	8008608 <_fwalk_sglue+0x38>
 80085f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085fc:	3301      	adds	r3, #1
 80085fe:	d003      	beq.n	8008608 <_fwalk_sglue+0x38>
 8008600:	4629      	mov	r1, r5
 8008602:	4638      	mov	r0, r7
 8008604:	47c0      	blx	r8
 8008606:	4306      	orrs	r6, r0
 8008608:	3568      	adds	r5, #104	; 0x68
 800860a:	e7e9      	b.n	80085e0 <_fwalk_sglue+0x10>

0800860c <iprintf>:
 800860c:	b40f      	push	{r0, r1, r2, r3}
 800860e:	b507      	push	{r0, r1, r2, lr}
 8008610:	4906      	ldr	r1, [pc, #24]	; (800862c <iprintf+0x20>)
 8008612:	ab04      	add	r3, sp, #16
 8008614:	6808      	ldr	r0, [r1, #0]
 8008616:	f853 2b04 	ldr.w	r2, [r3], #4
 800861a:	6881      	ldr	r1, [r0, #8]
 800861c:	9301      	str	r3, [sp, #4]
 800861e:	f000 f9e3 	bl	80089e8 <_vfiprintf_r>
 8008622:	b003      	add	sp, #12
 8008624:	f85d eb04 	ldr.w	lr, [sp], #4
 8008628:	b004      	add	sp, #16
 800862a:	4770      	bx	lr
 800862c:	200001b0 	.word	0x200001b0

08008630 <__sread>:
 8008630:	b510      	push	{r4, lr}
 8008632:	460c      	mov	r4, r1
 8008634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008638:	f000 f868 	bl	800870c <_read_r>
 800863c:	2800      	cmp	r0, #0
 800863e:	bfab      	itete	ge
 8008640:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008642:	89a3      	ldrhlt	r3, [r4, #12]
 8008644:	181b      	addge	r3, r3, r0
 8008646:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800864a:	bfac      	ite	ge
 800864c:	6563      	strge	r3, [r4, #84]	; 0x54
 800864e:	81a3      	strhlt	r3, [r4, #12]
 8008650:	bd10      	pop	{r4, pc}

08008652 <__swrite>:
 8008652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008656:	461f      	mov	r7, r3
 8008658:	898b      	ldrh	r3, [r1, #12]
 800865a:	4605      	mov	r5, r0
 800865c:	05db      	lsls	r3, r3, #23
 800865e:	460c      	mov	r4, r1
 8008660:	4616      	mov	r6, r2
 8008662:	d505      	bpl.n	8008670 <__swrite+0x1e>
 8008664:	2302      	movs	r3, #2
 8008666:	2200      	movs	r2, #0
 8008668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800866c:	f000 f83c 	bl	80086e8 <_lseek_r>
 8008670:	89a3      	ldrh	r3, [r4, #12]
 8008672:	4632      	mov	r2, r6
 8008674:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008678:	81a3      	strh	r3, [r4, #12]
 800867a:	4628      	mov	r0, r5
 800867c:	463b      	mov	r3, r7
 800867e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008686:	f000 b853 	b.w	8008730 <_write_r>

0800868a <__sseek>:
 800868a:	b510      	push	{r4, lr}
 800868c:	460c      	mov	r4, r1
 800868e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008692:	f000 f829 	bl	80086e8 <_lseek_r>
 8008696:	1c43      	adds	r3, r0, #1
 8008698:	89a3      	ldrh	r3, [r4, #12]
 800869a:	bf15      	itete	ne
 800869c:	6560      	strne	r0, [r4, #84]	; 0x54
 800869e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80086a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086a6:	81a3      	strheq	r3, [r4, #12]
 80086a8:	bf18      	it	ne
 80086aa:	81a3      	strhne	r3, [r4, #12]
 80086ac:	bd10      	pop	{r4, pc}

080086ae <__sclose>:
 80086ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086b2:	f000 b809 	b.w	80086c8 <_close_r>

080086b6 <memset>:
 80086b6:	4603      	mov	r3, r0
 80086b8:	4402      	add	r2, r0
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d100      	bne.n	80086c0 <memset+0xa>
 80086be:	4770      	bx	lr
 80086c0:	f803 1b01 	strb.w	r1, [r3], #1
 80086c4:	e7f9      	b.n	80086ba <memset+0x4>
	...

080086c8 <_close_r>:
 80086c8:	b538      	push	{r3, r4, r5, lr}
 80086ca:	2300      	movs	r3, #0
 80086cc:	4d05      	ldr	r5, [pc, #20]	; (80086e4 <_close_r+0x1c>)
 80086ce:	4604      	mov	r4, r0
 80086d0:	4608      	mov	r0, r1
 80086d2:	602b      	str	r3, [r5, #0]
 80086d4:	f7f7 ff81 	bl	80005da <_close>
 80086d8:	1c43      	adds	r3, r0, #1
 80086da:	d102      	bne.n	80086e2 <_close_r+0x1a>
 80086dc:	682b      	ldr	r3, [r5, #0]
 80086de:	b103      	cbz	r3, 80086e2 <_close_r+0x1a>
 80086e0:	6023      	str	r3, [r4, #0]
 80086e2:	bd38      	pop	{r3, r4, r5, pc}
 80086e4:	20000ba8 	.word	0x20000ba8

080086e8 <_lseek_r>:
 80086e8:	b538      	push	{r3, r4, r5, lr}
 80086ea:	4604      	mov	r4, r0
 80086ec:	4608      	mov	r0, r1
 80086ee:	4611      	mov	r1, r2
 80086f0:	2200      	movs	r2, #0
 80086f2:	4d05      	ldr	r5, [pc, #20]	; (8008708 <_lseek_r+0x20>)
 80086f4:	602a      	str	r2, [r5, #0]
 80086f6:	461a      	mov	r2, r3
 80086f8:	f7f7 ff93 	bl	8000622 <_lseek>
 80086fc:	1c43      	adds	r3, r0, #1
 80086fe:	d102      	bne.n	8008706 <_lseek_r+0x1e>
 8008700:	682b      	ldr	r3, [r5, #0]
 8008702:	b103      	cbz	r3, 8008706 <_lseek_r+0x1e>
 8008704:	6023      	str	r3, [r4, #0]
 8008706:	bd38      	pop	{r3, r4, r5, pc}
 8008708:	20000ba8 	.word	0x20000ba8

0800870c <_read_r>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	4604      	mov	r4, r0
 8008710:	4608      	mov	r0, r1
 8008712:	4611      	mov	r1, r2
 8008714:	2200      	movs	r2, #0
 8008716:	4d05      	ldr	r5, [pc, #20]	; (800872c <_read_r+0x20>)
 8008718:	602a      	str	r2, [r5, #0]
 800871a:	461a      	mov	r2, r3
 800871c:	f7f7 ff24 	bl	8000568 <_read>
 8008720:	1c43      	adds	r3, r0, #1
 8008722:	d102      	bne.n	800872a <_read_r+0x1e>
 8008724:	682b      	ldr	r3, [r5, #0]
 8008726:	b103      	cbz	r3, 800872a <_read_r+0x1e>
 8008728:	6023      	str	r3, [r4, #0]
 800872a:	bd38      	pop	{r3, r4, r5, pc}
 800872c:	20000ba8 	.word	0x20000ba8

08008730 <_write_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	4604      	mov	r4, r0
 8008734:	4608      	mov	r0, r1
 8008736:	4611      	mov	r1, r2
 8008738:	2200      	movs	r2, #0
 800873a:	4d05      	ldr	r5, [pc, #20]	; (8008750 <_write_r+0x20>)
 800873c:	602a      	str	r2, [r5, #0]
 800873e:	461a      	mov	r2, r3
 8008740:	f7f7 ff2f 	bl	80005a2 <_write>
 8008744:	1c43      	adds	r3, r0, #1
 8008746:	d102      	bne.n	800874e <_write_r+0x1e>
 8008748:	682b      	ldr	r3, [r5, #0]
 800874a:	b103      	cbz	r3, 800874e <_write_r+0x1e>
 800874c:	6023      	str	r3, [r4, #0]
 800874e:	bd38      	pop	{r3, r4, r5, pc}
 8008750:	20000ba8 	.word	0x20000ba8

08008754 <__errno>:
 8008754:	4b01      	ldr	r3, [pc, #4]	; (800875c <__errno+0x8>)
 8008756:	6818      	ldr	r0, [r3, #0]
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	200001b0 	.word	0x200001b0

08008760 <__libc_init_array>:
 8008760:	b570      	push	{r4, r5, r6, lr}
 8008762:	2600      	movs	r6, #0
 8008764:	4d0c      	ldr	r5, [pc, #48]	; (8008798 <__libc_init_array+0x38>)
 8008766:	4c0d      	ldr	r4, [pc, #52]	; (800879c <__libc_init_array+0x3c>)
 8008768:	1b64      	subs	r4, r4, r5
 800876a:	10a4      	asrs	r4, r4, #2
 800876c:	42a6      	cmp	r6, r4
 800876e:	d109      	bne.n	8008784 <__libc_init_array+0x24>
 8008770:	f000 fdca 	bl	8009308 <_init>
 8008774:	2600      	movs	r6, #0
 8008776:	4d0a      	ldr	r5, [pc, #40]	; (80087a0 <__libc_init_array+0x40>)
 8008778:	4c0a      	ldr	r4, [pc, #40]	; (80087a4 <__libc_init_array+0x44>)
 800877a:	1b64      	subs	r4, r4, r5
 800877c:	10a4      	asrs	r4, r4, #2
 800877e:	42a6      	cmp	r6, r4
 8008780:	d105      	bne.n	800878e <__libc_init_array+0x2e>
 8008782:	bd70      	pop	{r4, r5, r6, pc}
 8008784:	f855 3b04 	ldr.w	r3, [r5], #4
 8008788:	4798      	blx	r3
 800878a:	3601      	adds	r6, #1
 800878c:	e7ee      	b.n	800876c <__libc_init_array+0xc>
 800878e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008792:	4798      	blx	r3
 8008794:	3601      	adds	r6, #1
 8008796:	e7f2      	b.n	800877e <__libc_init_array+0x1e>
 8008798:	080093dc 	.word	0x080093dc
 800879c:	080093dc 	.word	0x080093dc
 80087a0:	080093dc 	.word	0x080093dc
 80087a4:	080093e0 	.word	0x080093e0

080087a8 <__retarget_lock_init_recursive>:
 80087a8:	4770      	bx	lr

080087aa <__retarget_lock_acquire_recursive>:
 80087aa:	4770      	bx	lr

080087ac <__retarget_lock_release_recursive>:
 80087ac:	4770      	bx	lr
	...

080087b0 <_free_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4605      	mov	r5, r0
 80087b4:	2900      	cmp	r1, #0
 80087b6:	d040      	beq.n	800883a <_free_r+0x8a>
 80087b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087bc:	1f0c      	subs	r4, r1, #4
 80087be:	2b00      	cmp	r3, #0
 80087c0:	bfb8      	it	lt
 80087c2:	18e4      	addlt	r4, r4, r3
 80087c4:	f000 f8dc 	bl	8008980 <__malloc_lock>
 80087c8:	4a1c      	ldr	r2, [pc, #112]	; (800883c <_free_r+0x8c>)
 80087ca:	6813      	ldr	r3, [r2, #0]
 80087cc:	b933      	cbnz	r3, 80087dc <_free_r+0x2c>
 80087ce:	6063      	str	r3, [r4, #4]
 80087d0:	6014      	str	r4, [r2, #0]
 80087d2:	4628      	mov	r0, r5
 80087d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087d8:	f000 b8d8 	b.w	800898c <__malloc_unlock>
 80087dc:	42a3      	cmp	r3, r4
 80087de:	d908      	bls.n	80087f2 <_free_r+0x42>
 80087e0:	6820      	ldr	r0, [r4, #0]
 80087e2:	1821      	adds	r1, r4, r0
 80087e4:	428b      	cmp	r3, r1
 80087e6:	bf01      	itttt	eq
 80087e8:	6819      	ldreq	r1, [r3, #0]
 80087ea:	685b      	ldreq	r3, [r3, #4]
 80087ec:	1809      	addeq	r1, r1, r0
 80087ee:	6021      	streq	r1, [r4, #0]
 80087f0:	e7ed      	b.n	80087ce <_free_r+0x1e>
 80087f2:	461a      	mov	r2, r3
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	b10b      	cbz	r3, 80087fc <_free_r+0x4c>
 80087f8:	42a3      	cmp	r3, r4
 80087fa:	d9fa      	bls.n	80087f2 <_free_r+0x42>
 80087fc:	6811      	ldr	r1, [r2, #0]
 80087fe:	1850      	adds	r0, r2, r1
 8008800:	42a0      	cmp	r0, r4
 8008802:	d10b      	bne.n	800881c <_free_r+0x6c>
 8008804:	6820      	ldr	r0, [r4, #0]
 8008806:	4401      	add	r1, r0
 8008808:	1850      	adds	r0, r2, r1
 800880a:	4283      	cmp	r3, r0
 800880c:	6011      	str	r1, [r2, #0]
 800880e:	d1e0      	bne.n	80087d2 <_free_r+0x22>
 8008810:	6818      	ldr	r0, [r3, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	4408      	add	r0, r1
 8008816:	6010      	str	r0, [r2, #0]
 8008818:	6053      	str	r3, [r2, #4]
 800881a:	e7da      	b.n	80087d2 <_free_r+0x22>
 800881c:	d902      	bls.n	8008824 <_free_r+0x74>
 800881e:	230c      	movs	r3, #12
 8008820:	602b      	str	r3, [r5, #0]
 8008822:	e7d6      	b.n	80087d2 <_free_r+0x22>
 8008824:	6820      	ldr	r0, [r4, #0]
 8008826:	1821      	adds	r1, r4, r0
 8008828:	428b      	cmp	r3, r1
 800882a:	bf01      	itttt	eq
 800882c:	6819      	ldreq	r1, [r3, #0]
 800882e:	685b      	ldreq	r3, [r3, #4]
 8008830:	1809      	addeq	r1, r1, r0
 8008832:	6021      	streq	r1, [r4, #0]
 8008834:	6063      	str	r3, [r4, #4]
 8008836:	6054      	str	r4, [r2, #4]
 8008838:	e7cb      	b.n	80087d2 <_free_r+0x22>
 800883a:	bd38      	pop	{r3, r4, r5, pc}
 800883c:	20000bb0 	.word	0x20000bb0

08008840 <sbrk_aligned>:
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	4e0e      	ldr	r6, [pc, #56]	; (800887c <sbrk_aligned+0x3c>)
 8008844:	460c      	mov	r4, r1
 8008846:	6831      	ldr	r1, [r6, #0]
 8008848:	4605      	mov	r5, r0
 800884a:	b911      	cbnz	r1, 8008852 <sbrk_aligned+0x12>
 800884c:	f000 fcba 	bl	80091c4 <_sbrk_r>
 8008850:	6030      	str	r0, [r6, #0]
 8008852:	4621      	mov	r1, r4
 8008854:	4628      	mov	r0, r5
 8008856:	f000 fcb5 	bl	80091c4 <_sbrk_r>
 800885a:	1c43      	adds	r3, r0, #1
 800885c:	d00a      	beq.n	8008874 <sbrk_aligned+0x34>
 800885e:	1cc4      	adds	r4, r0, #3
 8008860:	f024 0403 	bic.w	r4, r4, #3
 8008864:	42a0      	cmp	r0, r4
 8008866:	d007      	beq.n	8008878 <sbrk_aligned+0x38>
 8008868:	1a21      	subs	r1, r4, r0
 800886a:	4628      	mov	r0, r5
 800886c:	f000 fcaa 	bl	80091c4 <_sbrk_r>
 8008870:	3001      	adds	r0, #1
 8008872:	d101      	bne.n	8008878 <sbrk_aligned+0x38>
 8008874:	f04f 34ff 	mov.w	r4, #4294967295
 8008878:	4620      	mov	r0, r4
 800887a:	bd70      	pop	{r4, r5, r6, pc}
 800887c:	20000bb4 	.word	0x20000bb4

08008880 <_malloc_r>:
 8008880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008884:	1ccd      	adds	r5, r1, #3
 8008886:	f025 0503 	bic.w	r5, r5, #3
 800888a:	3508      	adds	r5, #8
 800888c:	2d0c      	cmp	r5, #12
 800888e:	bf38      	it	cc
 8008890:	250c      	movcc	r5, #12
 8008892:	2d00      	cmp	r5, #0
 8008894:	4607      	mov	r7, r0
 8008896:	db01      	blt.n	800889c <_malloc_r+0x1c>
 8008898:	42a9      	cmp	r1, r5
 800889a:	d905      	bls.n	80088a8 <_malloc_r+0x28>
 800889c:	230c      	movs	r3, #12
 800889e:	2600      	movs	r6, #0
 80088a0:	603b      	str	r3, [r7, #0]
 80088a2:	4630      	mov	r0, r6
 80088a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800897c <_malloc_r+0xfc>
 80088ac:	f000 f868 	bl	8008980 <__malloc_lock>
 80088b0:	f8d8 3000 	ldr.w	r3, [r8]
 80088b4:	461c      	mov	r4, r3
 80088b6:	bb5c      	cbnz	r4, 8008910 <_malloc_r+0x90>
 80088b8:	4629      	mov	r1, r5
 80088ba:	4638      	mov	r0, r7
 80088bc:	f7ff ffc0 	bl	8008840 <sbrk_aligned>
 80088c0:	1c43      	adds	r3, r0, #1
 80088c2:	4604      	mov	r4, r0
 80088c4:	d155      	bne.n	8008972 <_malloc_r+0xf2>
 80088c6:	f8d8 4000 	ldr.w	r4, [r8]
 80088ca:	4626      	mov	r6, r4
 80088cc:	2e00      	cmp	r6, #0
 80088ce:	d145      	bne.n	800895c <_malloc_r+0xdc>
 80088d0:	2c00      	cmp	r4, #0
 80088d2:	d048      	beq.n	8008966 <_malloc_r+0xe6>
 80088d4:	6823      	ldr	r3, [r4, #0]
 80088d6:	4631      	mov	r1, r6
 80088d8:	4638      	mov	r0, r7
 80088da:	eb04 0903 	add.w	r9, r4, r3
 80088de:	f000 fc71 	bl	80091c4 <_sbrk_r>
 80088e2:	4581      	cmp	r9, r0
 80088e4:	d13f      	bne.n	8008966 <_malloc_r+0xe6>
 80088e6:	6821      	ldr	r1, [r4, #0]
 80088e8:	4638      	mov	r0, r7
 80088ea:	1a6d      	subs	r5, r5, r1
 80088ec:	4629      	mov	r1, r5
 80088ee:	f7ff ffa7 	bl	8008840 <sbrk_aligned>
 80088f2:	3001      	adds	r0, #1
 80088f4:	d037      	beq.n	8008966 <_malloc_r+0xe6>
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	442b      	add	r3, r5
 80088fa:	6023      	str	r3, [r4, #0]
 80088fc:	f8d8 3000 	ldr.w	r3, [r8]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d038      	beq.n	8008976 <_malloc_r+0xf6>
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	42a2      	cmp	r2, r4
 8008908:	d12b      	bne.n	8008962 <_malloc_r+0xe2>
 800890a:	2200      	movs	r2, #0
 800890c:	605a      	str	r2, [r3, #4]
 800890e:	e00f      	b.n	8008930 <_malloc_r+0xb0>
 8008910:	6822      	ldr	r2, [r4, #0]
 8008912:	1b52      	subs	r2, r2, r5
 8008914:	d41f      	bmi.n	8008956 <_malloc_r+0xd6>
 8008916:	2a0b      	cmp	r2, #11
 8008918:	d917      	bls.n	800894a <_malloc_r+0xca>
 800891a:	1961      	adds	r1, r4, r5
 800891c:	42a3      	cmp	r3, r4
 800891e:	6025      	str	r5, [r4, #0]
 8008920:	bf18      	it	ne
 8008922:	6059      	strne	r1, [r3, #4]
 8008924:	6863      	ldr	r3, [r4, #4]
 8008926:	bf08      	it	eq
 8008928:	f8c8 1000 	streq.w	r1, [r8]
 800892c:	5162      	str	r2, [r4, r5]
 800892e:	604b      	str	r3, [r1, #4]
 8008930:	4638      	mov	r0, r7
 8008932:	f104 060b 	add.w	r6, r4, #11
 8008936:	f000 f829 	bl	800898c <__malloc_unlock>
 800893a:	f026 0607 	bic.w	r6, r6, #7
 800893e:	1d23      	adds	r3, r4, #4
 8008940:	1af2      	subs	r2, r6, r3
 8008942:	d0ae      	beq.n	80088a2 <_malloc_r+0x22>
 8008944:	1b9b      	subs	r3, r3, r6
 8008946:	50a3      	str	r3, [r4, r2]
 8008948:	e7ab      	b.n	80088a2 <_malloc_r+0x22>
 800894a:	42a3      	cmp	r3, r4
 800894c:	6862      	ldr	r2, [r4, #4]
 800894e:	d1dd      	bne.n	800890c <_malloc_r+0x8c>
 8008950:	f8c8 2000 	str.w	r2, [r8]
 8008954:	e7ec      	b.n	8008930 <_malloc_r+0xb0>
 8008956:	4623      	mov	r3, r4
 8008958:	6864      	ldr	r4, [r4, #4]
 800895a:	e7ac      	b.n	80088b6 <_malloc_r+0x36>
 800895c:	4634      	mov	r4, r6
 800895e:	6876      	ldr	r6, [r6, #4]
 8008960:	e7b4      	b.n	80088cc <_malloc_r+0x4c>
 8008962:	4613      	mov	r3, r2
 8008964:	e7cc      	b.n	8008900 <_malloc_r+0x80>
 8008966:	230c      	movs	r3, #12
 8008968:	4638      	mov	r0, r7
 800896a:	603b      	str	r3, [r7, #0]
 800896c:	f000 f80e 	bl	800898c <__malloc_unlock>
 8008970:	e797      	b.n	80088a2 <_malloc_r+0x22>
 8008972:	6025      	str	r5, [r4, #0]
 8008974:	e7dc      	b.n	8008930 <_malloc_r+0xb0>
 8008976:	605b      	str	r3, [r3, #4]
 8008978:	deff      	udf	#255	; 0xff
 800897a:	bf00      	nop
 800897c:	20000bb0 	.word	0x20000bb0

08008980 <__malloc_lock>:
 8008980:	4801      	ldr	r0, [pc, #4]	; (8008988 <__malloc_lock+0x8>)
 8008982:	f7ff bf12 	b.w	80087aa <__retarget_lock_acquire_recursive>
 8008986:	bf00      	nop
 8008988:	20000bac 	.word	0x20000bac

0800898c <__malloc_unlock>:
 800898c:	4801      	ldr	r0, [pc, #4]	; (8008994 <__malloc_unlock+0x8>)
 800898e:	f7ff bf0d 	b.w	80087ac <__retarget_lock_release_recursive>
 8008992:	bf00      	nop
 8008994:	20000bac 	.word	0x20000bac

08008998 <__sfputc_r>:
 8008998:	6893      	ldr	r3, [r2, #8]
 800899a:	b410      	push	{r4}
 800899c:	3b01      	subs	r3, #1
 800899e:	2b00      	cmp	r3, #0
 80089a0:	6093      	str	r3, [r2, #8]
 80089a2:	da07      	bge.n	80089b4 <__sfputc_r+0x1c>
 80089a4:	6994      	ldr	r4, [r2, #24]
 80089a6:	42a3      	cmp	r3, r4
 80089a8:	db01      	blt.n	80089ae <__sfputc_r+0x16>
 80089aa:	290a      	cmp	r1, #10
 80089ac:	d102      	bne.n	80089b4 <__sfputc_r+0x1c>
 80089ae:	bc10      	pop	{r4}
 80089b0:	f000 bb72 	b.w	8009098 <__swbuf_r>
 80089b4:	6813      	ldr	r3, [r2, #0]
 80089b6:	1c58      	adds	r0, r3, #1
 80089b8:	6010      	str	r0, [r2, #0]
 80089ba:	7019      	strb	r1, [r3, #0]
 80089bc:	4608      	mov	r0, r1
 80089be:	bc10      	pop	{r4}
 80089c0:	4770      	bx	lr

080089c2 <__sfputs_r>:
 80089c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c4:	4606      	mov	r6, r0
 80089c6:	460f      	mov	r7, r1
 80089c8:	4614      	mov	r4, r2
 80089ca:	18d5      	adds	r5, r2, r3
 80089cc:	42ac      	cmp	r4, r5
 80089ce:	d101      	bne.n	80089d4 <__sfputs_r+0x12>
 80089d0:	2000      	movs	r0, #0
 80089d2:	e007      	b.n	80089e4 <__sfputs_r+0x22>
 80089d4:	463a      	mov	r2, r7
 80089d6:	4630      	mov	r0, r6
 80089d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089dc:	f7ff ffdc 	bl	8008998 <__sfputc_r>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d1f3      	bne.n	80089cc <__sfputs_r+0xa>
 80089e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089e8 <_vfiprintf_r>:
 80089e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ec:	460d      	mov	r5, r1
 80089ee:	4614      	mov	r4, r2
 80089f0:	4698      	mov	r8, r3
 80089f2:	4606      	mov	r6, r0
 80089f4:	b09d      	sub	sp, #116	; 0x74
 80089f6:	b118      	cbz	r0, 8008a00 <_vfiprintf_r+0x18>
 80089f8:	6a03      	ldr	r3, [r0, #32]
 80089fa:	b90b      	cbnz	r3, 8008a00 <_vfiprintf_r+0x18>
 80089fc:	f7ff fdd0 	bl	80085a0 <__sinit>
 8008a00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a02:	07d9      	lsls	r1, r3, #31
 8008a04:	d405      	bmi.n	8008a12 <_vfiprintf_r+0x2a>
 8008a06:	89ab      	ldrh	r3, [r5, #12]
 8008a08:	059a      	lsls	r2, r3, #22
 8008a0a:	d402      	bmi.n	8008a12 <_vfiprintf_r+0x2a>
 8008a0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a0e:	f7ff fecc 	bl	80087aa <__retarget_lock_acquire_recursive>
 8008a12:	89ab      	ldrh	r3, [r5, #12]
 8008a14:	071b      	lsls	r3, r3, #28
 8008a16:	d501      	bpl.n	8008a1c <_vfiprintf_r+0x34>
 8008a18:	692b      	ldr	r3, [r5, #16]
 8008a1a:	b99b      	cbnz	r3, 8008a44 <_vfiprintf_r+0x5c>
 8008a1c:	4629      	mov	r1, r5
 8008a1e:	4630      	mov	r0, r6
 8008a20:	f000 fb78 	bl	8009114 <__swsetup_r>
 8008a24:	b170      	cbz	r0, 8008a44 <_vfiprintf_r+0x5c>
 8008a26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a28:	07dc      	lsls	r4, r3, #31
 8008a2a:	d504      	bpl.n	8008a36 <_vfiprintf_r+0x4e>
 8008a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a30:	b01d      	add	sp, #116	; 0x74
 8008a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a36:	89ab      	ldrh	r3, [r5, #12]
 8008a38:	0598      	lsls	r0, r3, #22
 8008a3a:	d4f7      	bmi.n	8008a2c <_vfiprintf_r+0x44>
 8008a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a3e:	f7ff feb5 	bl	80087ac <__retarget_lock_release_recursive>
 8008a42:	e7f3      	b.n	8008a2c <_vfiprintf_r+0x44>
 8008a44:	2300      	movs	r3, #0
 8008a46:	9309      	str	r3, [sp, #36]	; 0x24
 8008a48:	2320      	movs	r3, #32
 8008a4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a4e:	2330      	movs	r3, #48	; 0x30
 8008a50:	f04f 0901 	mov.w	r9, #1
 8008a54:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a58:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008c08 <_vfiprintf_r+0x220>
 8008a5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a60:	4623      	mov	r3, r4
 8008a62:	469a      	mov	sl, r3
 8008a64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a68:	b10a      	cbz	r2, 8008a6e <_vfiprintf_r+0x86>
 8008a6a:	2a25      	cmp	r2, #37	; 0x25
 8008a6c:	d1f9      	bne.n	8008a62 <_vfiprintf_r+0x7a>
 8008a6e:	ebba 0b04 	subs.w	fp, sl, r4
 8008a72:	d00b      	beq.n	8008a8c <_vfiprintf_r+0xa4>
 8008a74:	465b      	mov	r3, fp
 8008a76:	4622      	mov	r2, r4
 8008a78:	4629      	mov	r1, r5
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	f7ff ffa1 	bl	80089c2 <__sfputs_r>
 8008a80:	3001      	adds	r0, #1
 8008a82:	f000 80a9 	beq.w	8008bd8 <_vfiprintf_r+0x1f0>
 8008a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a88:	445a      	add	r2, fp
 8008a8a:	9209      	str	r2, [sp, #36]	; 0x24
 8008a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f000 80a1 	beq.w	8008bd8 <_vfiprintf_r+0x1f0>
 8008a96:	2300      	movs	r3, #0
 8008a98:	f04f 32ff 	mov.w	r2, #4294967295
 8008a9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008aa0:	f10a 0a01 	add.w	sl, sl, #1
 8008aa4:	9304      	str	r3, [sp, #16]
 8008aa6:	9307      	str	r3, [sp, #28]
 8008aa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008aac:	931a      	str	r3, [sp, #104]	; 0x68
 8008aae:	4654      	mov	r4, sl
 8008ab0:	2205      	movs	r2, #5
 8008ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ab6:	4854      	ldr	r0, [pc, #336]	; (8008c08 <_vfiprintf_r+0x220>)
 8008ab8:	f000 fb94 	bl	80091e4 <memchr>
 8008abc:	9a04      	ldr	r2, [sp, #16]
 8008abe:	b9d8      	cbnz	r0, 8008af8 <_vfiprintf_r+0x110>
 8008ac0:	06d1      	lsls	r1, r2, #27
 8008ac2:	bf44      	itt	mi
 8008ac4:	2320      	movmi	r3, #32
 8008ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008aca:	0713      	lsls	r3, r2, #28
 8008acc:	bf44      	itt	mi
 8008ace:	232b      	movmi	r3, #43	; 0x2b
 8008ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8008ada:	d015      	beq.n	8008b08 <_vfiprintf_r+0x120>
 8008adc:	4654      	mov	r4, sl
 8008ade:	2000      	movs	r0, #0
 8008ae0:	f04f 0c0a 	mov.w	ip, #10
 8008ae4:	9a07      	ldr	r2, [sp, #28]
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008aec:	3b30      	subs	r3, #48	; 0x30
 8008aee:	2b09      	cmp	r3, #9
 8008af0:	d94d      	bls.n	8008b8e <_vfiprintf_r+0x1a6>
 8008af2:	b1b0      	cbz	r0, 8008b22 <_vfiprintf_r+0x13a>
 8008af4:	9207      	str	r2, [sp, #28]
 8008af6:	e014      	b.n	8008b22 <_vfiprintf_r+0x13a>
 8008af8:	eba0 0308 	sub.w	r3, r0, r8
 8008afc:	fa09 f303 	lsl.w	r3, r9, r3
 8008b00:	4313      	orrs	r3, r2
 8008b02:	46a2      	mov	sl, r4
 8008b04:	9304      	str	r3, [sp, #16]
 8008b06:	e7d2      	b.n	8008aae <_vfiprintf_r+0xc6>
 8008b08:	9b03      	ldr	r3, [sp, #12]
 8008b0a:	1d19      	adds	r1, r3, #4
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	9103      	str	r1, [sp, #12]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	bfbb      	ittet	lt
 8008b14:	425b      	neglt	r3, r3
 8008b16:	f042 0202 	orrlt.w	r2, r2, #2
 8008b1a:	9307      	strge	r3, [sp, #28]
 8008b1c:	9307      	strlt	r3, [sp, #28]
 8008b1e:	bfb8      	it	lt
 8008b20:	9204      	strlt	r2, [sp, #16]
 8008b22:	7823      	ldrb	r3, [r4, #0]
 8008b24:	2b2e      	cmp	r3, #46	; 0x2e
 8008b26:	d10c      	bne.n	8008b42 <_vfiprintf_r+0x15a>
 8008b28:	7863      	ldrb	r3, [r4, #1]
 8008b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b2c:	d134      	bne.n	8008b98 <_vfiprintf_r+0x1b0>
 8008b2e:	9b03      	ldr	r3, [sp, #12]
 8008b30:	3402      	adds	r4, #2
 8008b32:	1d1a      	adds	r2, r3, #4
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	9203      	str	r2, [sp, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	bfb8      	it	lt
 8008b3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b40:	9305      	str	r3, [sp, #20]
 8008b42:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c0c <_vfiprintf_r+0x224>
 8008b46:	2203      	movs	r2, #3
 8008b48:	4650      	mov	r0, sl
 8008b4a:	7821      	ldrb	r1, [r4, #0]
 8008b4c:	f000 fb4a 	bl	80091e4 <memchr>
 8008b50:	b138      	cbz	r0, 8008b62 <_vfiprintf_r+0x17a>
 8008b52:	2240      	movs	r2, #64	; 0x40
 8008b54:	9b04      	ldr	r3, [sp, #16]
 8008b56:	eba0 000a 	sub.w	r0, r0, sl
 8008b5a:	4082      	lsls	r2, r0
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	3401      	adds	r4, #1
 8008b60:	9304      	str	r3, [sp, #16]
 8008b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b66:	2206      	movs	r2, #6
 8008b68:	4829      	ldr	r0, [pc, #164]	; (8008c10 <_vfiprintf_r+0x228>)
 8008b6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b6e:	f000 fb39 	bl	80091e4 <memchr>
 8008b72:	2800      	cmp	r0, #0
 8008b74:	d03f      	beq.n	8008bf6 <_vfiprintf_r+0x20e>
 8008b76:	4b27      	ldr	r3, [pc, #156]	; (8008c14 <_vfiprintf_r+0x22c>)
 8008b78:	bb1b      	cbnz	r3, 8008bc2 <_vfiprintf_r+0x1da>
 8008b7a:	9b03      	ldr	r3, [sp, #12]
 8008b7c:	3307      	adds	r3, #7
 8008b7e:	f023 0307 	bic.w	r3, r3, #7
 8008b82:	3308      	adds	r3, #8
 8008b84:	9303      	str	r3, [sp, #12]
 8008b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b88:	443b      	add	r3, r7
 8008b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b8c:	e768      	b.n	8008a60 <_vfiprintf_r+0x78>
 8008b8e:	460c      	mov	r4, r1
 8008b90:	2001      	movs	r0, #1
 8008b92:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b96:	e7a6      	b.n	8008ae6 <_vfiprintf_r+0xfe>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f04f 0c0a 	mov.w	ip, #10
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	3401      	adds	r4, #1
 8008ba2:	9305      	str	r3, [sp, #20]
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008baa:	3a30      	subs	r2, #48	; 0x30
 8008bac:	2a09      	cmp	r2, #9
 8008bae:	d903      	bls.n	8008bb8 <_vfiprintf_r+0x1d0>
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d0c6      	beq.n	8008b42 <_vfiprintf_r+0x15a>
 8008bb4:	9105      	str	r1, [sp, #20]
 8008bb6:	e7c4      	b.n	8008b42 <_vfiprintf_r+0x15a>
 8008bb8:	4604      	mov	r4, r0
 8008bba:	2301      	movs	r3, #1
 8008bbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bc0:	e7f0      	b.n	8008ba4 <_vfiprintf_r+0x1bc>
 8008bc2:	ab03      	add	r3, sp, #12
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	462a      	mov	r2, r5
 8008bc8:	4630      	mov	r0, r6
 8008bca:	4b13      	ldr	r3, [pc, #76]	; (8008c18 <_vfiprintf_r+0x230>)
 8008bcc:	a904      	add	r1, sp, #16
 8008bce:	f3af 8000 	nop.w
 8008bd2:	4607      	mov	r7, r0
 8008bd4:	1c78      	adds	r0, r7, #1
 8008bd6:	d1d6      	bne.n	8008b86 <_vfiprintf_r+0x19e>
 8008bd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bda:	07d9      	lsls	r1, r3, #31
 8008bdc:	d405      	bmi.n	8008bea <_vfiprintf_r+0x202>
 8008bde:	89ab      	ldrh	r3, [r5, #12]
 8008be0:	059a      	lsls	r2, r3, #22
 8008be2:	d402      	bmi.n	8008bea <_vfiprintf_r+0x202>
 8008be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008be6:	f7ff fde1 	bl	80087ac <__retarget_lock_release_recursive>
 8008bea:	89ab      	ldrh	r3, [r5, #12]
 8008bec:	065b      	lsls	r3, r3, #25
 8008bee:	f53f af1d 	bmi.w	8008a2c <_vfiprintf_r+0x44>
 8008bf2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bf4:	e71c      	b.n	8008a30 <_vfiprintf_r+0x48>
 8008bf6:	ab03      	add	r3, sp, #12
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	462a      	mov	r2, r5
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	4b06      	ldr	r3, [pc, #24]	; (8008c18 <_vfiprintf_r+0x230>)
 8008c00:	a904      	add	r1, sp, #16
 8008c02:	f000 f87d 	bl	8008d00 <_printf_i>
 8008c06:	e7e4      	b.n	8008bd2 <_vfiprintf_r+0x1ea>
 8008c08:	080093a6 	.word	0x080093a6
 8008c0c:	080093ac 	.word	0x080093ac
 8008c10:	080093b0 	.word	0x080093b0
 8008c14:	00000000 	.word	0x00000000
 8008c18:	080089c3 	.word	0x080089c3

08008c1c <_printf_common>:
 8008c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c20:	4616      	mov	r6, r2
 8008c22:	4699      	mov	r9, r3
 8008c24:	688a      	ldr	r2, [r1, #8]
 8008c26:	690b      	ldr	r3, [r1, #16]
 8008c28:	4607      	mov	r7, r0
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	bfb8      	it	lt
 8008c2e:	4613      	movlt	r3, r2
 8008c30:	6033      	str	r3, [r6, #0]
 8008c32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c36:	460c      	mov	r4, r1
 8008c38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c3c:	b10a      	cbz	r2, 8008c42 <_printf_common+0x26>
 8008c3e:	3301      	adds	r3, #1
 8008c40:	6033      	str	r3, [r6, #0]
 8008c42:	6823      	ldr	r3, [r4, #0]
 8008c44:	0699      	lsls	r1, r3, #26
 8008c46:	bf42      	ittt	mi
 8008c48:	6833      	ldrmi	r3, [r6, #0]
 8008c4a:	3302      	addmi	r3, #2
 8008c4c:	6033      	strmi	r3, [r6, #0]
 8008c4e:	6825      	ldr	r5, [r4, #0]
 8008c50:	f015 0506 	ands.w	r5, r5, #6
 8008c54:	d106      	bne.n	8008c64 <_printf_common+0x48>
 8008c56:	f104 0a19 	add.w	sl, r4, #25
 8008c5a:	68e3      	ldr	r3, [r4, #12]
 8008c5c:	6832      	ldr	r2, [r6, #0]
 8008c5e:	1a9b      	subs	r3, r3, r2
 8008c60:	42ab      	cmp	r3, r5
 8008c62:	dc2b      	bgt.n	8008cbc <_printf_common+0xa0>
 8008c64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c68:	1e13      	subs	r3, r2, #0
 8008c6a:	6822      	ldr	r2, [r4, #0]
 8008c6c:	bf18      	it	ne
 8008c6e:	2301      	movne	r3, #1
 8008c70:	0692      	lsls	r2, r2, #26
 8008c72:	d430      	bmi.n	8008cd6 <_printf_common+0xba>
 8008c74:	4649      	mov	r1, r9
 8008c76:	4638      	mov	r0, r7
 8008c78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c7c:	47c0      	blx	r8
 8008c7e:	3001      	adds	r0, #1
 8008c80:	d023      	beq.n	8008cca <_printf_common+0xae>
 8008c82:	6823      	ldr	r3, [r4, #0]
 8008c84:	6922      	ldr	r2, [r4, #16]
 8008c86:	f003 0306 	and.w	r3, r3, #6
 8008c8a:	2b04      	cmp	r3, #4
 8008c8c:	bf14      	ite	ne
 8008c8e:	2500      	movne	r5, #0
 8008c90:	6833      	ldreq	r3, [r6, #0]
 8008c92:	f04f 0600 	mov.w	r6, #0
 8008c96:	bf08      	it	eq
 8008c98:	68e5      	ldreq	r5, [r4, #12]
 8008c9a:	f104 041a 	add.w	r4, r4, #26
 8008c9e:	bf08      	it	eq
 8008ca0:	1aed      	subeq	r5, r5, r3
 8008ca2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008ca6:	bf08      	it	eq
 8008ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cac:	4293      	cmp	r3, r2
 8008cae:	bfc4      	itt	gt
 8008cb0:	1a9b      	subgt	r3, r3, r2
 8008cb2:	18ed      	addgt	r5, r5, r3
 8008cb4:	42b5      	cmp	r5, r6
 8008cb6:	d11a      	bne.n	8008cee <_printf_common+0xd2>
 8008cb8:	2000      	movs	r0, #0
 8008cba:	e008      	b.n	8008cce <_printf_common+0xb2>
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	4652      	mov	r2, sl
 8008cc0:	4649      	mov	r1, r9
 8008cc2:	4638      	mov	r0, r7
 8008cc4:	47c0      	blx	r8
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	d103      	bne.n	8008cd2 <_printf_common+0xb6>
 8008cca:	f04f 30ff 	mov.w	r0, #4294967295
 8008cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd2:	3501      	adds	r5, #1
 8008cd4:	e7c1      	b.n	8008c5a <_printf_common+0x3e>
 8008cd6:	2030      	movs	r0, #48	; 0x30
 8008cd8:	18e1      	adds	r1, r4, r3
 8008cda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cde:	1c5a      	adds	r2, r3, #1
 8008ce0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ce4:	4422      	add	r2, r4
 8008ce6:	3302      	adds	r3, #2
 8008ce8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cec:	e7c2      	b.n	8008c74 <_printf_common+0x58>
 8008cee:	2301      	movs	r3, #1
 8008cf0:	4622      	mov	r2, r4
 8008cf2:	4649      	mov	r1, r9
 8008cf4:	4638      	mov	r0, r7
 8008cf6:	47c0      	blx	r8
 8008cf8:	3001      	adds	r0, #1
 8008cfa:	d0e6      	beq.n	8008cca <_printf_common+0xae>
 8008cfc:	3601      	adds	r6, #1
 8008cfe:	e7d9      	b.n	8008cb4 <_printf_common+0x98>

08008d00 <_printf_i>:
 8008d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d04:	7e0f      	ldrb	r7, [r1, #24]
 8008d06:	4691      	mov	r9, r2
 8008d08:	2f78      	cmp	r7, #120	; 0x78
 8008d0a:	4680      	mov	r8, r0
 8008d0c:	460c      	mov	r4, r1
 8008d0e:	469a      	mov	sl, r3
 8008d10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d16:	d807      	bhi.n	8008d28 <_printf_i+0x28>
 8008d18:	2f62      	cmp	r7, #98	; 0x62
 8008d1a:	d80a      	bhi.n	8008d32 <_printf_i+0x32>
 8008d1c:	2f00      	cmp	r7, #0
 8008d1e:	f000 80d5 	beq.w	8008ecc <_printf_i+0x1cc>
 8008d22:	2f58      	cmp	r7, #88	; 0x58
 8008d24:	f000 80c1 	beq.w	8008eaa <_printf_i+0x1aa>
 8008d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d30:	e03a      	b.n	8008da8 <_printf_i+0xa8>
 8008d32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d36:	2b15      	cmp	r3, #21
 8008d38:	d8f6      	bhi.n	8008d28 <_printf_i+0x28>
 8008d3a:	a101      	add	r1, pc, #4	; (adr r1, 8008d40 <_printf_i+0x40>)
 8008d3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d40:	08008d99 	.word	0x08008d99
 8008d44:	08008dad 	.word	0x08008dad
 8008d48:	08008d29 	.word	0x08008d29
 8008d4c:	08008d29 	.word	0x08008d29
 8008d50:	08008d29 	.word	0x08008d29
 8008d54:	08008d29 	.word	0x08008d29
 8008d58:	08008dad 	.word	0x08008dad
 8008d5c:	08008d29 	.word	0x08008d29
 8008d60:	08008d29 	.word	0x08008d29
 8008d64:	08008d29 	.word	0x08008d29
 8008d68:	08008d29 	.word	0x08008d29
 8008d6c:	08008eb3 	.word	0x08008eb3
 8008d70:	08008dd9 	.word	0x08008dd9
 8008d74:	08008e6d 	.word	0x08008e6d
 8008d78:	08008d29 	.word	0x08008d29
 8008d7c:	08008d29 	.word	0x08008d29
 8008d80:	08008ed5 	.word	0x08008ed5
 8008d84:	08008d29 	.word	0x08008d29
 8008d88:	08008dd9 	.word	0x08008dd9
 8008d8c:	08008d29 	.word	0x08008d29
 8008d90:	08008d29 	.word	0x08008d29
 8008d94:	08008e75 	.word	0x08008e75
 8008d98:	682b      	ldr	r3, [r5, #0]
 8008d9a:	1d1a      	adds	r2, r3, #4
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	602a      	str	r2, [r5, #0]
 8008da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008da4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008da8:	2301      	movs	r3, #1
 8008daa:	e0a0      	b.n	8008eee <_printf_i+0x1ee>
 8008dac:	6820      	ldr	r0, [r4, #0]
 8008dae:	682b      	ldr	r3, [r5, #0]
 8008db0:	0607      	lsls	r7, r0, #24
 8008db2:	f103 0104 	add.w	r1, r3, #4
 8008db6:	6029      	str	r1, [r5, #0]
 8008db8:	d501      	bpl.n	8008dbe <_printf_i+0xbe>
 8008dba:	681e      	ldr	r6, [r3, #0]
 8008dbc:	e003      	b.n	8008dc6 <_printf_i+0xc6>
 8008dbe:	0646      	lsls	r6, r0, #25
 8008dc0:	d5fb      	bpl.n	8008dba <_printf_i+0xba>
 8008dc2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008dc6:	2e00      	cmp	r6, #0
 8008dc8:	da03      	bge.n	8008dd2 <_printf_i+0xd2>
 8008dca:	232d      	movs	r3, #45	; 0x2d
 8008dcc:	4276      	negs	r6, r6
 8008dce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dd2:	230a      	movs	r3, #10
 8008dd4:	4859      	ldr	r0, [pc, #356]	; (8008f3c <_printf_i+0x23c>)
 8008dd6:	e012      	b.n	8008dfe <_printf_i+0xfe>
 8008dd8:	682b      	ldr	r3, [r5, #0]
 8008dda:	6820      	ldr	r0, [r4, #0]
 8008ddc:	1d19      	adds	r1, r3, #4
 8008dde:	6029      	str	r1, [r5, #0]
 8008de0:	0605      	lsls	r5, r0, #24
 8008de2:	d501      	bpl.n	8008de8 <_printf_i+0xe8>
 8008de4:	681e      	ldr	r6, [r3, #0]
 8008de6:	e002      	b.n	8008dee <_printf_i+0xee>
 8008de8:	0641      	lsls	r1, r0, #25
 8008dea:	d5fb      	bpl.n	8008de4 <_printf_i+0xe4>
 8008dec:	881e      	ldrh	r6, [r3, #0]
 8008dee:	2f6f      	cmp	r7, #111	; 0x6f
 8008df0:	bf0c      	ite	eq
 8008df2:	2308      	moveq	r3, #8
 8008df4:	230a      	movne	r3, #10
 8008df6:	4851      	ldr	r0, [pc, #324]	; (8008f3c <_printf_i+0x23c>)
 8008df8:	2100      	movs	r1, #0
 8008dfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dfe:	6865      	ldr	r5, [r4, #4]
 8008e00:	2d00      	cmp	r5, #0
 8008e02:	bfa8      	it	ge
 8008e04:	6821      	ldrge	r1, [r4, #0]
 8008e06:	60a5      	str	r5, [r4, #8]
 8008e08:	bfa4      	itt	ge
 8008e0a:	f021 0104 	bicge.w	r1, r1, #4
 8008e0e:	6021      	strge	r1, [r4, #0]
 8008e10:	b90e      	cbnz	r6, 8008e16 <_printf_i+0x116>
 8008e12:	2d00      	cmp	r5, #0
 8008e14:	d04b      	beq.n	8008eae <_printf_i+0x1ae>
 8008e16:	4615      	mov	r5, r2
 8008e18:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e1c:	fb03 6711 	mls	r7, r3, r1, r6
 8008e20:	5dc7      	ldrb	r7, [r0, r7]
 8008e22:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e26:	4637      	mov	r7, r6
 8008e28:	42bb      	cmp	r3, r7
 8008e2a:	460e      	mov	r6, r1
 8008e2c:	d9f4      	bls.n	8008e18 <_printf_i+0x118>
 8008e2e:	2b08      	cmp	r3, #8
 8008e30:	d10b      	bne.n	8008e4a <_printf_i+0x14a>
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	07de      	lsls	r6, r3, #31
 8008e36:	d508      	bpl.n	8008e4a <_printf_i+0x14a>
 8008e38:	6923      	ldr	r3, [r4, #16]
 8008e3a:	6861      	ldr	r1, [r4, #4]
 8008e3c:	4299      	cmp	r1, r3
 8008e3e:	bfde      	ittt	le
 8008e40:	2330      	movle	r3, #48	; 0x30
 8008e42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e4a:	1b52      	subs	r2, r2, r5
 8008e4c:	6122      	str	r2, [r4, #16]
 8008e4e:	464b      	mov	r3, r9
 8008e50:	4621      	mov	r1, r4
 8008e52:	4640      	mov	r0, r8
 8008e54:	f8cd a000 	str.w	sl, [sp]
 8008e58:	aa03      	add	r2, sp, #12
 8008e5a:	f7ff fedf 	bl	8008c1c <_printf_common>
 8008e5e:	3001      	adds	r0, #1
 8008e60:	d14a      	bne.n	8008ef8 <_printf_i+0x1f8>
 8008e62:	f04f 30ff 	mov.w	r0, #4294967295
 8008e66:	b004      	add	sp, #16
 8008e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e6c:	6823      	ldr	r3, [r4, #0]
 8008e6e:	f043 0320 	orr.w	r3, r3, #32
 8008e72:	6023      	str	r3, [r4, #0]
 8008e74:	2778      	movs	r7, #120	; 0x78
 8008e76:	4832      	ldr	r0, [pc, #200]	; (8008f40 <_printf_i+0x240>)
 8008e78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	6829      	ldr	r1, [r5, #0]
 8008e80:	061f      	lsls	r7, r3, #24
 8008e82:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e86:	d402      	bmi.n	8008e8e <_printf_i+0x18e>
 8008e88:	065f      	lsls	r7, r3, #25
 8008e8a:	bf48      	it	mi
 8008e8c:	b2b6      	uxthmi	r6, r6
 8008e8e:	07df      	lsls	r7, r3, #31
 8008e90:	bf48      	it	mi
 8008e92:	f043 0320 	orrmi.w	r3, r3, #32
 8008e96:	6029      	str	r1, [r5, #0]
 8008e98:	bf48      	it	mi
 8008e9a:	6023      	strmi	r3, [r4, #0]
 8008e9c:	b91e      	cbnz	r6, 8008ea6 <_printf_i+0x1a6>
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	f023 0320 	bic.w	r3, r3, #32
 8008ea4:	6023      	str	r3, [r4, #0]
 8008ea6:	2310      	movs	r3, #16
 8008ea8:	e7a6      	b.n	8008df8 <_printf_i+0xf8>
 8008eaa:	4824      	ldr	r0, [pc, #144]	; (8008f3c <_printf_i+0x23c>)
 8008eac:	e7e4      	b.n	8008e78 <_printf_i+0x178>
 8008eae:	4615      	mov	r5, r2
 8008eb0:	e7bd      	b.n	8008e2e <_printf_i+0x12e>
 8008eb2:	682b      	ldr	r3, [r5, #0]
 8008eb4:	6826      	ldr	r6, [r4, #0]
 8008eb6:	1d18      	adds	r0, r3, #4
 8008eb8:	6961      	ldr	r1, [r4, #20]
 8008eba:	6028      	str	r0, [r5, #0]
 8008ebc:	0635      	lsls	r5, r6, #24
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	d501      	bpl.n	8008ec6 <_printf_i+0x1c6>
 8008ec2:	6019      	str	r1, [r3, #0]
 8008ec4:	e002      	b.n	8008ecc <_printf_i+0x1cc>
 8008ec6:	0670      	lsls	r0, r6, #25
 8008ec8:	d5fb      	bpl.n	8008ec2 <_printf_i+0x1c2>
 8008eca:	8019      	strh	r1, [r3, #0]
 8008ecc:	2300      	movs	r3, #0
 8008ece:	4615      	mov	r5, r2
 8008ed0:	6123      	str	r3, [r4, #16]
 8008ed2:	e7bc      	b.n	8008e4e <_printf_i+0x14e>
 8008ed4:	682b      	ldr	r3, [r5, #0]
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	1d1a      	adds	r2, r3, #4
 8008eda:	602a      	str	r2, [r5, #0]
 8008edc:	681d      	ldr	r5, [r3, #0]
 8008ede:	6862      	ldr	r2, [r4, #4]
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	f000 f97f 	bl	80091e4 <memchr>
 8008ee6:	b108      	cbz	r0, 8008eec <_printf_i+0x1ec>
 8008ee8:	1b40      	subs	r0, r0, r5
 8008eea:	6060      	str	r0, [r4, #4]
 8008eec:	6863      	ldr	r3, [r4, #4]
 8008eee:	6123      	str	r3, [r4, #16]
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ef6:	e7aa      	b.n	8008e4e <_printf_i+0x14e>
 8008ef8:	462a      	mov	r2, r5
 8008efa:	4649      	mov	r1, r9
 8008efc:	4640      	mov	r0, r8
 8008efe:	6923      	ldr	r3, [r4, #16]
 8008f00:	47d0      	blx	sl
 8008f02:	3001      	adds	r0, #1
 8008f04:	d0ad      	beq.n	8008e62 <_printf_i+0x162>
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	079b      	lsls	r3, r3, #30
 8008f0a:	d413      	bmi.n	8008f34 <_printf_i+0x234>
 8008f0c:	68e0      	ldr	r0, [r4, #12]
 8008f0e:	9b03      	ldr	r3, [sp, #12]
 8008f10:	4298      	cmp	r0, r3
 8008f12:	bfb8      	it	lt
 8008f14:	4618      	movlt	r0, r3
 8008f16:	e7a6      	b.n	8008e66 <_printf_i+0x166>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	4632      	mov	r2, r6
 8008f1c:	4649      	mov	r1, r9
 8008f1e:	4640      	mov	r0, r8
 8008f20:	47d0      	blx	sl
 8008f22:	3001      	adds	r0, #1
 8008f24:	d09d      	beq.n	8008e62 <_printf_i+0x162>
 8008f26:	3501      	adds	r5, #1
 8008f28:	68e3      	ldr	r3, [r4, #12]
 8008f2a:	9903      	ldr	r1, [sp, #12]
 8008f2c:	1a5b      	subs	r3, r3, r1
 8008f2e:	42ab      	cmp	r3, r5
 8008f30:	dcf2      	bgt.n	8008f18 <_printf_i+0x218>
 8008f32:	e7eb      	b.n	8008f0c <_printf_i+0x20c>
 8008f34:	2500      	movs	r5, #0
 8008f36:	f104 0619 	add.w	r6, r4, #25
 8008f3a:	e7f5      	b.n	8008f28 <_printf_i+0x228>
 8008f3c:	080093b7 	.word	0x080093b7
 8008f40:	080093c8 	.word	0x080093c8

08008f44 <__sflush_r>:
 8008f44:	898a      	ldrh	r2, [r1, #12]
 8008f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f48:	4605      	mov	r5, r0
 8008f4a:	0710      	lsls	r0, r2, #28
 8008f4c:	460c      	mov	r4, r1
 8008f4e:	d457      	bmi.n	8009000 <__sflush_r+0xbc>
 8008f50:	684b      	ldr	r3, [r1, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	dc04      	bgt.n	8008f60 <__sflush_r+0x1c>
 8008f56:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	dc01      	bgt.n	8008f60 <__sflush_r+0x1c>
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f62:	2e00      	cmp	r6, #0
 8008f64:	d0fa      	beq.n	8008f5c <__sflush_r+0x18>
 8008f66:	2300      	movs	r3, #0
 8008f68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f6c:	682f      	ldr	r7, [r5, #0]
 8008f6e:	6a21      	ldr	r1, [r4, #32]
 8008f70:	602b      	str	r3, [r5, #0]
 8008f72:	d032      	beq.n	8008fda <__sflush_r+0x96>
 8008f74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f76:	89a3      	ldrh	r3, [r4, #12]
 8008f78:	075a      	lsls	r2, r3, #29
 8008f7a:	d505      	bpl.n	8008f88 <__sflush_r+0x44>
 8008f7c:	6863      	ldr	r3, [r4, #4]
 8008f7e:	1ac0      	subs	r0, r0, r3
 8008f80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f82:	b10b      	cbz	r3, 8008f88 <__sflush_r+0x44>
 8008f84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f86:	1ac0      	subs	r0, r0, r3
 8008f88:	2300      	movs	r3, #0
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f8e:	4628      	mov	r0, r5
 8008f90:	6a21      	ldr	r1, [r4, #32]
 8008f92:	47b0      	blx	r6
 8008f94:	1c43      	adds	r3, r0, #1
 8008f96:	89a3      	ldrh	r3, [r4, #12]
 8008f98:	d106      	bne.n	8008fa8 <__sflush_r+0x64>
 8008f9a:	6829      	ldr	r1, [r5, #0]
 8008f9c:	291d      	cmp	r1, #29
 8008f9e:	d82b      	bhi.n	8008ff8 <__sflush_r+0xb4>
 8008fa0:	4a28      	ldr	r2, [pc, #160]	; (8009044 <__sflush_r+0x100>)
 8008fa2:	410a      	asrs	r2, r1
 8008fa4:	07d6      	lsls	r6, r2, #31
 8008fa6:	d427      	bmi.n	8008ff8 <__sflush_r+0xb4>
 8008fa8:	2200      	movs	r2, #0
 8008faa:	6062      	str	r2, [r4, #4]
 8008fac:	6922      	ldr	r2, [r4, #16]
 8008fae:	04d9      	lsls	r1, r3, #19
 8008fb0:	6022      	str	r2, [r4, #0]
 8008fb2:	d504      	bpl.n	8008fbe <__sflush_r+0x7a>
 8008fb4:	1c42      	adds	r2, r0, #1
 8008fb6:	d101      	bne.n	8008fbc <__sflush_r+0x78>
 8008fb8:	682b      	ldr	r3, [r5, #0]
 8008fba:	b903      	cbnz	r3, 8008fbe <__sflush_r+0x7a>
 8008fbc:	6560      	str	r0, [r4, #84]	; 0x54
 8008fbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fc0:	602f      	str	r7, [r5, #0]
 8008fc2:	2900      	cmp	r1, #0
 8008fc4:	d0ca      	beq.n	8008f5c <__sflush_r+0x18>
 8008fc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fca:	4299      	cmp	r1, r3
 8008fcc:	d002      	beq.n	8008fd4 <__sflush_r+0x90>
 8008fce:	4628      	mov	r0, r5
 8008fd0:	f7ff fbee 	bl	80087b0 <_free_r>
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	6360      	str	r0, [r4, #52]	; 0x34
 8008fd8:	e7c1      	b.n	8008f5e <__sflush_r+0x1a>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	4628      	mov	r0, r5
 8008fde:	47b0      	blx	r6
 8008fe0:	1c41      	adds	r1, r0, #1
 8008fe2:	d1c8      	bne.n	8008f76 <__sflush_r+0x32>
 8008fe4:	682b      	ldr	r3, [r5, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d0c5      	beq.n	8008f76 <__sflush_r+0x32>
 8008fea:	2b1d      	cmp	r3, #29
 8008fec:	d001      	beq.n	8008ff2 <__sflush_r+0xae>
 8008fee:	2b16      	cmp	r3, #22
 8008ff0:	d101      	bne.n	8008ff6 <__sflush_r+0xb2>
 8008ff2:	602f      	str	r7, [r5, #0]
 8008ff4:	e7b2      	b.n	8008f5c <__sflush_r+0x18>
 8008ff6:	89a3      	ldrh	r3, [r4, #12]
 8008ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ffc:	81a3      	strh	r3, [r4, #12]
 8008ffe:	e7ae      	b.n	8008f5e <__sflush_r+0x1a>
 8009000:	690f      	ldr	r7, [r1, #16]
 8009002:	2f00      	cmp	r7, #0
 8009004:	d0aa      	beq.n	8008f5c <__sflush_r+0x18>
 8009006:	0793      	lsls	r3, r2, #30
 8009008:	bf18      	it	ne
 800900a:	2300      	movne	r3, #0
 800900c:	680e      	ldr	r6, [r1, #0]
 800900e:	bf08      	it	eq
 8009010:	694b      	ldreq	r3, [r1, #20]
 8009012:	1bf6      	subs	r6, r6, r7
 8009014:	600f      	str	r7, [r1, #0]
 8009016:	608b      	str	r3, [r1, #8]
 8009018:	2e00      	cmp	r6, #0
 800901a:	dd9f      	ble.n	8008f5c <__sflush_r+0x18>
 800901c:	4633      	mov	r3, r6
 800901e:	463a      	mov	r2, r7
 8009020:	4628      	mov	r0, r5
 8009022:	6a21      	ldr	r1, [r4, #32]
 8009024:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009028:	47e0      	blx	ip
 800902a:	2800      	cmp	r0, #0
 800902c:	dc06      	bgt.n	800903c <__sflush_r+0xf8>
 800902e:	89a3      	ldrh	r3, [r4, #12]
 8009030:	f04f 30ff 	mov.w	r0, #4294967295
 8009034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009038:	81a3      	strh	r3, [r4, #12]
 800903a:	e790      	b.n	8008f5e <__sflush_r+0x1a>
 800903c:	4407      	add	r7, r0
 800903e:	1a36      	subs	r6, r6, r0
 8009040:	e7ea      	b.n	8009018 <__sflush_r+0xd4>
 8009042:	bf00      	nop
 8009044:	dfbffffe 	.word	0xdfbffffe

08009048 <_fflush_r>:
 8009048:	b538      	push	{r3, r4, r5, lr}
 800904a:	690b      	ldr	r3, [r1, #16]
 800904c:	4605      	mov	r5, r0
 800904e:	460c      	mov	r4, r1
 8009050:	b913      	cbnz	r3, 8009058 <_fflush_r+0x10>
 8009052:	2500      	movs	r5, #0
 8009054:	4628      	mov	r0, r5
 8009056:	bd38      	pop	{r3, r4, r5, pc}
 8009058:	b118      	cbz	r0, 8009062 <_fflush_r+0x1a>
 800905a:	6a03      	ldr	r3, [r0, #32]
 800905c:	b90b      	cbnz	r3, 8009062 <_fflush_r+0x1a>
 800905e:	f7ff fa9f 	bl	80085a0 <__sinit>
 8009062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d0f3      	beq.n	8009052 <_fflush_r+0xa>
 800906a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800906c:	07d0      	lsls	r0, r2, #31
 800906e:	d404      	bmi.n	800907a <_fflush_r+0x32>
 8009070:	0599      	lsls	r1, r3, #22
 8009072:	d402      	bmi.n	800907a <_fflush_r+0x32>
 8009074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009076:	f7ff fb98 	bl	80087aa <__retarget_lock_acquire_recursive>
 800907a:	4628      	mov	r0, r5
 800907c:	4621      	mov	r1, r4
 800907e:	f7ff ff61 	bl	8008f44 <__sflush_r>
 8009082:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009084:	4605      	mov	r5, r0
 8009086:	07da      	lsls	r2, r3, #31
 8009088:	d4e4      	bmi.n	8009054 <_fflush_r+0xc>
 800908a:	89a3      	ldrh	r3, [r4, #12]
 800908c:	059b      	lsls	r3, r3, #22
 800908e:	d4e1      	bmi.n	8009054 <_fflush_r+0xc>
 8009090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009092:	f7ff fb8b 	bl	80087ac <__retarget_lock_release_recursive>
 8009096:	e7dd      	b.n	8009054 <_fflush_r+0xc>

08009098 <__swbuf_r>:
 8009098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909a:	460e      	mov	r6, r1
 800909c:	4614      	mov	r4, r2
 800909e:	4605      	mov	r5, r0
 80090a0:	b118      	cbz	r0, 80090aa <__swbuf_r+0x12>
 80090a2:	6a03      	ldr	r3, [r0, #32]
 80090a4:	b90b      	cbnz	r3, 80090aa <__swbuf_r+0x12>
 80090a6:	f7ff fa7b 	bl	80085a0 <__sinit>
 80090aa:	69a3      	ldr	r3, [r4, #24]
 80090ac:	60a3      	str	r3, [r4, #8]
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	071a      	lsls	r2, r3, #28
 80090b2:	d525      	bpl.n	8009100 <__swbuf_r+0x68>
 80090b4:	6923      	ldr	r3, [r4, #16]
 80090b6:	b31b      	cbz	r3, 8009100 <__swbuf_r+0x68>
 80090b8:	6823      	ldr	r3, [r4, #0]
 80090ba:	6922      	ldr	r2, [r4, #16]
 80090bc:	b2f6      	uxtb	r6, r6
 80090be:	1a98      	subs	r0, r3, r2
 80090c0:	6963      	ldr	r3, [r4, #20]
 80090c2:	4637      	mov	r7, r6
 80090c4:	4283      	cmp	r3, r0
 80090c6:	dc04      	bgt.n	80090d2 <__swbuf_r+0x3a>
 80090c8:	4621      	mov	r1, r4
 80090ca:	4628      	mov	r0, r5
 80090cc:	f7ff ffbc 	bl	8009048 <_fflush_r>
 80090d0:	b9e0      	cbnz	r0, 800910c <__swbuf_r+0x74>
 80090d2:	68a3      	ldr	r3, [r4, #8]
 80090d4:	3b01      	subs	r3, #1
 80090d6:	60a3      	str	r3, [r4, #8]
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	1c5a      	adds	r2, r3, #1
 80090dc:	6022      	str	r2, [r4, #0]
 80090de:	701e      	strb	r6, [r3, #0]
 80090e0:	6962      	ldr	r2, [r4, #20]
 80090e2:	1c43      	adds	r3, r0, #1
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d004      	beq.n	80090f2 <__swbuf_r+0x5a>
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	07db      	lsls	r3, r3, #31
 80090ec:	d506      	bpl.n	80090fc <__swbuf_r+0x64>
 80090ee:	2e0a      	cmp	r6, #10
 80090f0:	d104      	bne.n	80090fc <__swbuf_r+0x64>
 80090f2:	4621      	mov	r1, r4
 80090f4:	4628      	mov	r0, r5
 80090f6:	f7ff ffa7 	bl	8009048 <_fflush_r>
 80090fa:	b938      	cbnz	r0, 800910c <__swbuf_r+0x74>
 80090fc:	4638      	mov	r0, r7
 80090fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009100:	4621      	mov	r1, r4
 8009102:	4628      	mov	r0, r5
 8009104:	f000 f806 	bl	8009114 <__swsetup_r>
 8009108:	2800      	cmp	r0, #0
 800910a:	d0d5      	beq.n	80090b8 <__swbuf_r+0x20>
 800910c:	f04f 37ff 	mov.w	r7, #4294967295
 8009110:	e7f4      	b.n	80090fc <__swbuf_r+0x64>
	...

08009114 <__swsetup_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	4b2a      	ldr	r3, [pc, #168]	; (80091c0 <__swsetup_r+0xac>)
 8009118:	4605      	mov	r5, r0
 800911a:	6818      	ldr	r0, [r3, #0]
 800911c:	460c      	mov	r4, r1
 800911e:	b118      	cbz	r0, 8009128 <__swsetup_r+0x14>
 8009120:	6a03      	ldr	r3, [r0, #32]
 8009122:	b90b      	cbnz	r3, 8009128 <__swsetup_r+0x14>
 8009124:	f7ff fa3c 	bl	80085a0 <__sinit>
 8009128:	89a3      	ldrh	r3, [r4, #12]
 800912a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800912e:	0718      	lsls	r0, r3, #28
 8009130:	d422      	bmi.n	8009178 <__swsetup_r+0x64>
 8009132:	06d9      	lsls	r1, r3, #27
 8009134:	d407      	bmi.n	8009146 <__swsetup_r+0x32>
 8009136:	2309      	movs	r3, #9
 8009138:	602b      	str	r3, [r5, #0]
 800913a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800913e:	f04f 30ff 	mov.w	r0, #4294967295
 8009142:	81a3      	strh	r3, [r4, #12]
 8009144:	e034      	b.n	80091b0 <__swsetup_r+0x9c>
 8009146:	0758      	lsls	r0, r3, #29
 8009148:	d512      	bpl.n	8009170 <__swsetup_r+0x5c>
 800914a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800914c:	b141      	cbz	r1, 8009160 <__swsetup_r+0x4c>
 800914e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009152:	4299      	cmp	r1, r3
 8009154:	d002      	beq.n	800915c <__swsetup_r+0x48>
 8009156:	4628      	mov	r0, r5
 8009158:	f7ff fb2a 	bl	80087b0 <_free_r>
 800915c:	2300      	movs	r3, #0
 800915e:	6363      	str	r3, [r4, #52]	; 0x34
 8009160:	89a3      	ldrh	r3, [r4, #12]
 8009162:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009166:	81a3      	strh	r3, [r4, #12]
 8009168:	2300      	movs	r3, #0
 800916a:	6063      	str	r3, [r4, #4]
 800916c:	6923      	ldr	r3, [r4, #16]
 800916e:	6023      	str	r3, [r4, #0]
 8009170:	89a3      	ldrh	r3, [r4, #12]
 8009172:	f043 0308 	orr.w	r3, r3, #8
 8009176:	81a3      	strh	r3, [r4, #12]
 8009178:	6923      	ldr	r3, [r4, #16]
 800917a:	b94b      	cbnz	r3, 8009190 <__swsetup_r+0x7c>
 800917c:	89a3      	ldrh	r3, [r4, #12]
 800917e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009186:	d003      	beq.n	8009190 <__swsetup_r+0x7c>
 8009188:	4621      	mov	r1, r4
 800918a:	4628      	mov	r0, r5
 800918c:	f000 f85d 	bl	800924a <__smakebuf_r>
 8009190:	89a0      	ldrh	r0, [r4, #12]
 8009192:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009196:	f010 0301 	ands.w	r3, r0, #1
 800919a:	d00a      	beq.n	80091b2 <__swsetup_r+0x9e>
 800919c:	2300      	movs	r3, #0
 800919e:	60a3      	str	r3, [r4, #8]
 80091a0:	6963      	ldr	r3, [r4, #20]
 80091a2:	425b      	negs	r3, r3
 80091a4:	61a3      	str	r3, [r4, #24]
 80091a6:	6923      	ldr	r3, [r4, #16]
 80091a8:	b943      	cbnz	r3, 80091bc <__swsetup_r+0xa8>
 80091aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091ae:	d1c4      	bne.n	800913a <__swsetup_r+0x26>
 80091b0:	bd38      	pop	{r3, r4, r5, pc}
 80091b2:	0781      	lsls	r1, r0, #30
 80091b4:	bf58      	it	pl
 80091b6:	6963      	ldrpl	r3, [r4, #20]
 80091b8:	60a3      	str	r3, [r4, #8]
 80091ba:	e7f4      	b.n	80091a6 <__swsetup_r+0x92>
 80091bc:	2000      	movs	r0, #0
 80091be:	e7f7      	b.n	80091b0 <__swsetup_r+0x9c>
 80091c0:	200001b0 	.word	0x200001b0

080091c4 <_sbrk_r>:
 80091c4:	b538      	push	{r3, r4, r5, lr}
 80091c6:	2300      	movs	r3, #0
 80091c8:	4d05      	ldr	r5, [pc, #20]	; (80091e0 <_sbrk_r+0x1c>)
 80091ca:	4604      	mov	r4, r0
 80091cc:	4608      	mov	r0, r1
 80091ce:	602b      	str	r3, [r5, #0]
 80091d0:	f7f7 fa34 	bl	800063c <_sbrk>
 80091d4:	1c43      	adds	r3, r0, #1
 80091d6:	d102      	bne.n	80091de <_sbrk_r+0x1a>
 80091d8:	682b      	ldr	r3, [r5, #0]
 80091da:	b103      	cbz	r3, 80091de <_sbrk_r+0x1a>
 80091dc:	6023      	str	r3, [r4, #0]
 80091de:	bd38      	pop	{r3, r4, r5, pc}
 80091e0:	20000ba8 	.word	0x20000ba8

080091e4 <memchr>:
 80091e4:	4603      	mov	r3, r0
 80091e6:	b510      	push	{r4, lr}
 80091e8:	b2c9      	uxtb	r1, r1
 80091ea:	4402      	add	r2, r0
 80091ec:	4293      	cmp	r3, r2
 80091ee:	4618      	mov	r0, r3
 80091f0:	d101      	bne.n	80091f6 <memchr+0x12>
 80091f2:	2000      	movs	r0, #0
 80091f4:	e003      	b.n	80091fe <memchr+0x1a>
 80091f6:	7804      	ldrb	r4, [r0, #0]
 80091f8:	3301      	adds	r3, #1
 80091fa:	428c      	cmp	r4, r1
 80091fc:	d1f6      	bne.n	80091ec <memchr+0x8>
 80091fe:	bd10      	pop	{r4, pc}

08009200 <__swhatbuf_r>:
 8009200:	b570      	push	{r4, r5, r6, lr}
 8009202:	460c      	mov	r4, r1
 8009204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009208:	4615      	mov	r5, r2
 800920a:	2900      	cmp	r1, #0
 800920c:	461e      	mov	r6, r3
 800920e:	b096      	sub	sp, #88	; 0x58
 8009210:	da0c      	bge.n	800922c <__swhatbuf_r+0x2c>
 8009212:	89a3      	ldrh	r3, [r4, #12]
 8009214:	2100      	movs	r1, #0
 8009216:	f013 0f80 	tst.w	r3, #128	; 0x80
 800921a:	bf0c      	ite	eq
 800921c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009220:	2340      	movne	r3, #64	; 0x40
 8009222:	2000      	movs	r0, #0
 8009224:	6031      	str	r1, [r6, #0]
 8009226:	602b      	str	r3, [r5, #0]
 8009228:	b016      	add	sp, #88	; 0x58
 800922a:	bd70      	pop	{r4, r5, r6, pc}
 800922c:	466a      	mov	r2, sp
 800922e:	f000 f849 	bl	80092c4 <_fstat_r>
 8009232:	2800      	cmp	r0, #0
 8009234:	dbed      	blt.n	8009212 <__swhatbuf_r+0x12>
 8009236:	9901      	ldr	r1, [sp, #4]
 8009238:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800923c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009240:	4259      	negs	r1, r3
 8009242:	4159      	adcs	r1, r3
 8009244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009248:	e7eb      	b.n	8009222 <__swhatbuf_r+0x22>

0800924a <__smakebuf_r>:
 800924a:	898b      	ldrh	r3, [r1, #12]
 800924c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800924e:	079d      	lsls	r5, r3, #30
 8009250:	4606      	mov	r6, r0
 8009252:	460c      	mov	r4, r1
 8009254:	d507      	bpl.n	8009266 <__smakebuf_r+0x1c>
 8009256:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800925a:	6023      	str	r3, [r4, #0]
 800925c:	6123      	str	r3, [r4, #16]
 800925e:	2301      	movs	r3, #1
 8009260:	6163      	str	r3, [r4, #20]
 8009262:	b002      	add	sp, #8
 8009264:	bd70      	pop	{r4, r5, r6, pc}
 8009266:	466a      	mov	r2, sp
 8009268:	ab01      	add	r3, sp, #4
 800926a:	f7ff ffc9 	bl	8009200 <__swhatbuf_r>
 800926e:	9900      	ldr	r1, [sp, #0]
 8009270:	4605      	mov	r5, r0
 8009272:	4630      	mov	r0, r6
 8009274:	f7ff fb04 	bl	8008880 <_malloc_r>
 8009278:	b948      	cbnz	r0, 800928e <__smakebuf_r+0x44>
 800927a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800927e:	059a      	lsls	r2, r3, #22
 8009280:	d4ef      	bmi.n	8009262 <__smakebuf_r+0x18>
 8009282:	f023 0303 	bic.w	r3, r3, #3
 8009286:	f043 0302 	orr.w	r3, r3, #2
 800928a:	81a3      	strh	r3, [r4, #12]
 800928c:	e7e3      	b.n	8009256 <__smakebuf_r+0xc>
 800928e:	89a3      	ldrh	r3, [r4, #12]
 8009290:	6020      	str	r0, [r4, #0]
 8009292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009296:	81a3      	strh	r3, [r4, #12]
 8009298:	9b00      	ldr	r3, [sp, #0]
 800929a:	6120      	str	r0, [r4, #16]
 800929c:	6163      	str	r3, [r4, #20]
 800929e:	9b01      	ldr	r3, [sp, #4]
 80092a0:	b15b      	cbz	r3, 80092ba <__smakebuf_r+0x70>
 80092a2:	4630      	mov	r0, r6
 80092a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092a8:	f000 f81e 	bl	80092e8 <_isatty_r>
 80092ac:	b128      	cbz	r0, 80092ba <__smakebuf_r+0x70>
 80092ae:	89a3      	ldrh	r3, [r4, #12]
 80092b0:	f023 0303 	bic.w	r3, r3, #3
 80092b4:	f043 0301 	orr.w	r3, r3, #1
 80092b8:	81a3      	strh	r3, [r4, #12]
 80092ba:	89a3      	ldrh	r3, [r4, #12]
 80092bc:	431d      	orrs	r5, r3
 80092be:	81a5      	strh	r5, [r4, #12]
 80092c0:	e7cf      	b.n	8009262 <__smakebuf_r+0x18>
	...

080092c4 <_fstat_r>:
 80092c4:	b538      	push	{r3, r4, r5, lr}
 80092c6:	2300      	movs	r3, #0
 80092c8:	4d06      	ldr	r5, [pc, #24]	; (80092e4 <_fstat_r+0x20>)
 80092ca:	4604      	mov	r4, r0
 80092cc:	4608      	mov	r0, r1
 80092ce:	4611      	mov	r1, r2
 80092d0:	602b      	str	r3, [r5, #0]
 80092d2:	f7f7 f98d 	bl	80005f0 <_fstat>
 80092d6:	1c43      	adds	r3, r0, #1
 80092d8:	d102      	bne.n	80092e0 <_fstat_r+0x1c>
 80092da:	682b      	ldr	r3, [r5, #0]
 80092dc:	b103      	cbz	r3, 80092e0 <_fstat_r+0x1c>
 80092de:	6023      	str	r3, [r4, #0]
 80092e0:	bd38      	pop	{r3, r4, r5, pc}
 80092e2:	bf00      	nop
 80092e4:	20000ba8 	.word	0x20000ba8

080092e8 <_isatty_r>:
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	2300      	movs	r3, #0
 80092ec:	4d05      	ldr	r5, [pc, #20]	; (8009304 <_isatty_r+0x1c>)
 80092ee:	4604      	mov	r4, r0
 80092f0:	4608      	mov	r0, r1
 80092f2:	602b      	str	r3, [r5, #0]
 80092f4:	f7f7 f98b 	bl	800060e <_isatty>
 80092f8:	1c43      	adds	r3, r0, #1
 80092fa:	d102      	bne.n	8009302 <_isatty_r+0x1a>
 80092fc:	682b      	ldr	r3, [r5, #0]
 80092fe:	b103      	cbz	r3, 8009302 <_isatty_r+0x1a>
 8009300:	6023      	str	r3, [r4, #0]
 8009302:	bd38      	pop	{r3, r4, r5, pc}
 8009304:	20000ba8 	.word	0x20000ba8

08009308 <_init>:
 8009308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930a:	bf00      	nop
 800930c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800930e:	bc08      	pop	{r3}
 8009310:	469e      	mov	lr, r3
 8009312:	4770      	bx	lr

08009314 <_fini>:
 8009314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009316:	bf00      	nop
 8009318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800931a:	bc08      	pop	{r3}
 800931c:	469e      	mov	lr, r3
 800931e:	4770      	bx	lr
